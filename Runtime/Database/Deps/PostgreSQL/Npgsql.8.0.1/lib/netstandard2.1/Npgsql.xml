<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Npgsql</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <seealso cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ReferenceEqualityComparer.Instance">
            <summary>
            Gets the singleton <see cref="T:System.Collections.Generic.ReferenceEqualityComparer"/> instance.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether two object references refer to the same object instance.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both <paramref name="x"/> and <paramref name="y"/> refer to the same object instance
            or if both are <see langword="null"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This API is a wrapper around <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            It is not necessarily equivalent to calling <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object. The returned hash code is based on the object
            identity, not on the contents of the object.
            </summary>
            <param name="obj">The object for which to retrieve the hash code.</param>
            <returns>A hash code for the identity of <paramref name="obj"/>.</returns>
            <remarks>
            This API is a wrapper around <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)"/>.
            It is not necessarily equivalent to calling <see cref="M:System.Object.GetHashCode"/>.
            </remarks>
        </member>
        <member name="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@,System.Span{System.Char})">
            <summary>
            Decodes the specified <see cref="T:System.Buffers.ReadOnlySequence`1"/> to <see langword="char"/>s using the specified <see cref="T:System.Text.Encoding"/>
            and outputs the result to <paramref name="chars"/>.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> which represents how the data in <paramref name="bytes"/> is encoded.</param>
            <param name="bytes">The <see cref="T:System.Buffers.ReadOnlySequence`1"/> to decode to characters.</param>
            <param name="chars">The destination buffer to which the decoded characters will be written.</param>
            <returns>The number of chars written to <paramref name="chars"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="chars"/> is not large enough to contain the encoded form of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">Thrown if <paramref name="bytes"/> contains data that cannot be decoded and <paramref name="encoding"/> is configured
            to throw an exception when such data is seen.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.</param>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.</returns>
            <remarks>This method reproduces new to the .NET 6.0 API <see cref="T:System.Threading.Tasks.Task"/>.WaitAsync.</remarks>
        </member>
        <member name="T:Npgsql.BackendMessages.CopyDataMessage">
            <summary>
            Note that this message doesn't actually contain the data, but only the length. Data is processed
            directly from the connector's buffer.
            </summary>
        </member>
        <member name="T:Npgsql.BackendMessages.DataRowMessage">
            <summary>
            DataRow is special in that it does not parse the actual contents of the backend message,
            because in sequential mode the message will be traversed and processed sequentially by
            <see cref="T:Npgsql.NpgsqlDataReader"/>.
            </summary>
        </member>
        <member name="T:Npgsql.BackendMessages.ErrorOrNoticeMessage.ErrorFieldTypeCode">
            <summary>
            Error and notice message field codes
            </summary>
        </member>
        <member name="T:Npgsql.BackendMessages.RowDescriptionMessage">
            <summary>
            A RowDescription message sent from the backend.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/protocol-message-formats.html
            </remarks>
        </member>
        <member name="M:Npgsql.BackendMessages.RowDescriptionMessage.GetFieldIndex(System.String)">
            <summary>
            Given a string name, returns the field's ordinal index in the row.
            </summary>
        </member>
        <member name="M:Npgsql.BackendMessages.RowDescriptionMessage.TryGetFieldIndex(System.String,System.Int32@)">
            <summary>
            Given a string name, returns the field's ordinal index in the row.
            </summary>
        </member>
        <member name="T:Npgsql.BackendMessages.FieldDescription">
            <summary>
            A descriptive record on a single field received from PostgreSQL.
            See RowDescription in https://www.postgresql.org/docs/current/static/protocol-message-formats.html
            </summary>
        </member>
        <member name="P:Npgsql.BackendMessages.FieldDescription.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:Npgsql.BackendMessages.FieldDescription.TypeOID">
            <summary>
            The object ID of the field's data type.
            </summary>
        </member>
        <member name="P:Npgsql.BackendMessages.FieldDescription.TypeSize">
            <summary>
            The data type size (see pg_type.typlen). Note that negative values denote variable-width types.
            </summary>
        </member>
        <member name="P:Npgsql.BackendMessages.FieldDescription.TypeModifier">
            <summary>
            The type modifier (see pg_attribute.atttypmod). The meaning of the modifier is type-specific.
            </summary>
        </member>
        <member name="P:Npgsql.BackendMessages.FieldDescription.TableOID">
            <summary>
            If the field can be identified as a column of a specific table, the object ID of the table; otherwise zero.
            </summary>
        </member>
        <member name="P:Npgsql.BackendMessages.FieldDescription.ColumnAttributeNumber">
            <summary>
            If the field can be identified as a column of a specific table, the attribute number of the column; otherwise zero.
            </summary>
        </member>
        <member name="P:Npgsql.BackendMessages.FieldDescription.DataFormat">
            <summary>
            The format code being used for the field.
            Currently will be text or binary.
            In a RowDescription returned from the statement variant of Describe, the format code is not yet known and will always be zero.
            </summary>
        </member>
        <member name="M:Npgsql.BackendMessages.FieldDescription.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Npgsql.IBackendMessage">
            <summary>
            Base class for all classes which represent a message sent by the PostgreSQL backend.
            </summary>
        </member>
        <member name="T:Npgsql.StatementType">
            <summary>
            Specifies the type of SQL statement, e.g. SELECT
            </summary>
        </member>
        <member name="P:Npgsql.Internal.BufferRequirements.None">
            Streaming
        </member>
        <member name="P:Npgsql.Internal.BufferRequirements.Value">
            Entire value should be buffered
        </member>
        <member name="M:Npgsql.Internal.BufferRequirements.CreateFixedSize(System.Int32)">
            Fixed size value should be buffered
        </member>
        <member name="M:Npgsql.Internal.BufferRequirements.Create(Npgsql.Internal.Size)">
            Custom requirements
        </member>
        <member name="M:Npgsql.Internal.Composites.CompositeFieldInfo.#ctor(System.String,Npgsql.Internal.PgTypeInfo,Npgsql.Internal.Postgres.PgTypeId)">
            <summary>
            CompositeFieldInfo constructor.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="typeInfo">Type info for reading/writing.</param>
            <param name="nominalPgTypeId">The nominal field type, this may differ from the typeInfo.PgTypeId when the field is a domain type.</param>
        </member>
        <member name="M:Npgsql.Internal.Composites.CompositeInfo`1.CreateTempBoxes">
            <summary>
            Create temporary storage for all values that come before the constructor parameters can be saturated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Npgsql.Internal.Converters.ArrayConverter`1.Continuation.#ctor(System.Object,)">
            <param name="handle">A reference to the type that houses the static method <see ref="continuation"/> points to.</param>
            <param name="continuation">The continuation</param>
        </member>
        <member name="M:Npgsql.Internal.Converters.AsyncHelpers.Continuation.#ctor(System.Object,)">
            <param name="handle">A reference to the type that houses the static method <see ref="continuation"/> points to.</param>
            <param name="continuation">The continuation</param>
        </member>
        <member name="T:Npgsql.Internal.Converters.PolymorphicBitStringConverterResolver">
            Note that for BIT(1), this resolver will return a bool by default, to align with SqlClient
            (see discussion https://github.com/npgsql/npgsql/pull/362#issuecomment-59622101).
        </member>
        <member name="T:Npgsql.Internal.Converters.CastingConverter`1">
            A converter to map strongly typed apis onto boxed converter results to produce a strongly typed converter over T.
        </member>
        <member name="T:Npgsql.Internal.Converters.NullableConverter`1">
            Special value converter to be able to use struct converters as System.Nullable converters, it delegates all behavior to the effective converter.
        </member>
        <member name="P:Npgsql.Internal.Converters.PgNumeric.Digits">
            Big endian array of numeric digits
        </member>
        <member name="M:Npgsql.Internal.Converters.PgNumeric.Builder.#ctor(System.Numerics.BigInteger,System.Span{System.Int16})">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="destination">If the destination ends up being too small the builder allocates instead</param>
        </member>
        <member name="M:Npgsql.Internal.Converters.PgNumeric.Builder.DivideInPlace(System.Span{System.UInt32},System.UInt32,System.UInt32@)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <param name="remainder"></param>
             <returns>Whether the input consists of any non zero bits</returns>
        </member>
        <member name="M:Npgsql.Internal.Converters.PgNumeric.Builder.Divide(System.ReadOnlySpan{System.UInt32},System.UInt32,System.Span{System.UInt32},System.UInt32@)">
            <remarks>Adapted from BigInteger, to allow us to operate directly on stack allocated bits</remarks>
        </member>
        <member name="T:Npgsql.Internal.HackyEnumTypeMapping">
            <summary>
            Hacky temporary measure used by EFCore.PG to extract user-configured enum mappings. Accessed via reflection only.
            </summary>
        </member>
        <member name="T:Npgsql.Internal.INpgsqlDatabaseInfoFactory">
            <summary>
            A factory which get generate instances of <see cref="T:Npgsql.Internal.NpgsqlDatabaseInfo"/>, which describe a database
            and the types it contains. When first connecting to a database, Npgsql will attempt to load information
            about it via this factory.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.INpgsqlDatabaseInfoFactory.Load(Npgsql.Internal.NpgsqlConnector,Npgsql.Util.NpgsqlTimeout,System.Boolean)">
            <summary>
            Given a connection, loads all necessary information about the connected database, e.g. its types.
            A factory should only handle the exact database type it was meant for, and return null otherwise.
            </summary>
            <returns>
            An object describing the database to which <paramref name="conn"/> is connected, or null if the
            database isn't of the correct type and isn't handled by this factory.
            </returns>
        </member>
        <member name="T:Npgsql.Internal.IPgTypeInfoResolver">
            <summary>
            An Npgsql resolver for type info. Used by Npgsql to read and write values to PostgreSQL.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.IPgTypeInfoResolver.GetTypeInfo(System.Type,System.Nullable{Npgsql.Internal.Postgres.DataTypeName},Npgsql.Internal.PgSerializerOptions)">
            <summary>
            Resolve a type info for a given type and data type name, at least one value will be non-null.
            </summary>
            <param name="type">The clr type being requested.</param>
            <param name="dataTypeName">The postgres type being requested.</param>
            <param name="options">Used for configuration state and Npgsql type info or PostgreSQL type catalog lookups.</param>
            <returns>A result, or null if there was no match.</returns>
        </member>
        <member name="T:Npgsql.Internal.NpgsqlConnector">
            <summary>
            Represents a connection to a PostgreSQL backend. Unlike NpgsqlConnection objects, which are
            exposed to users, connectors are internal to Npgsql and are recycled by the connection pool.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._socket">
            <summary>
            The physical connection socket to the backend.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._baseStream">
            <summary>
            The physical connection stream to the backend, without anything on top.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._stream">
            <summary>
            The physical connection stream to the backend, layered with an SSL/TLS stream if in secure mode.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.Settings">
            <summary>
            The parsed connection string.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.RelaxedTextEncoding">
            <summary>
            Same as <see cref="P:Npgsql.Internal.NpgsqlConnector.TextEncoding"/>, except that it does not throw an exception if an invalid char is
            encountered (exception fallback), but rather replaces it with a question mark character (replacement
            fallback).
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.ReadBuffer">
            <summary>
            Buffer used for reading data.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._origReadBuffer">
            <summary>
            If we read a data row that's bigger than <see cref="P:Npgsql.Internal.NpgsqlConnector.ReadBuffer"/>, we allocate an oversize buffer.
            The original (smaller) buffer is stored here, and restored when the connection is reset.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.WriteBuffer">
            <summary>
            Buffer used for writing data.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._backendSecretKey">
            <summary>
            The secret key of the backend for this connector, used for query cancellation.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.BackendProcessId">
            <summary>
            The process ID of the backend for this connector.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.InferredUserName">
            <summary>
            The user name that has been inferred when the connector was opened
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.Id">
            <summary>
            A unique ID identifying this connector, used for logging. Currently mapped to BackendProcessId
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.DatabaseInfo">
            <summary>
            Information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...).
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.TransactionStatus">
            <summary>
            The current transaction status for this connector.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.Transaction">
            <summary>
            A transaction object for this connector. Since only one transaction can be in progress at any given time,
            this instance is recycled. To check whether a transaction is currently in progress on this connector,
            see <see cref="P:Npgsql.Internal.NpgsqlConnector.TransactionStatus"/>.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.Connection">
            <summary>
            The NpgsqlConnection that (currently) owns this connector. Null if the connector isn't
            owned (i.e. idle in the pool)
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.PendingPrependedResponses">
            <summary>
            The number of messages that were prepended to the current message chain, but not yet sent.
            Note that this only tracks messages which produce a ReadyForQuery message
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector.ReadingPrependedMessagesMRE">
            <summary>
            A ManualResetEventSlim used to make sure a cancellation request doesn't run
            while we're reading responses for the prepended query
            as we can't gracefully handle their cancellation.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector.CurrentCopyOperation">
            <summary>
            If the connector is currently in COPY mode, holds a reference to the importer/exporter object.
            Otherwise null.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.PostgresParameters">
            <summary>
            Holds all run-time parameters received from the backend (via ParameterStatus messages)
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._rawParameters">
            <summary>
            Holds all run-time parameters in raw, binary format for efficient handling without allocations.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._breakReason">
            <summary>
            If this connector was broken, this contains the exception that caused the break.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector.MultiplexAsyncWritingLock">
            <summary>
            <para>
            Used by the pool to indicate that I/O is currently in progress on this connector, so that another write
            isn't started concurrently. Note that since we have only one write loop, this is only ever usedto
            protect against an over-capacity writes into a connector that's currently *asynchronously* writing.
            </para>
            <para>
            It is guaranteed that the currently-executing
            Specifically, reading may occur - and the connector may even be returned to the pool - before this is
            released.
            </para>
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.FlagAsNotWritableForMultiplexing">
            <seealso cref="F:Npgsql.Internal.NpgsqlConnector.MultiplexAsyncWritingLock"/>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.FlagAsWritableForMultiplexing">
            <seealso cref="F:Npgsql.Internal.NpgsqlConnector.MultiplexAsyncWritingLock"/>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.CancelLock">
            <summary>
            A lock that's taken while a cancellation is being delivered; new queries are blocked until the
            cancellation is delivered. This reduces the chance that a cancellation meant for a previous
            command will accidentally cancel a later one, see #615.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.SyncObj">
            <summary>
            A lock that's taken to make sure no other concurrent operation is running.
            Break takes it to set the state of the connector.
            Anyone else should immediately check the state and exit
            if the connector is closed.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.CleanupLock">
            <summary>
            A lock that's used to wait for the Cleanup to complete while breaking the connection.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector._currentCommand">
            <summary>
            The command currently being executed by the connector, null otherwise.
            Used only for concurrent use error reporting purposes.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.DataSource">
            <summary>
            The connector source (e.g. pool) from where this connector came, and to which it will be returned.
            Note that in multi-host scenarios, this references the host-specific <see cref="T:Npgsql.PoolingDataSource"/> rather than the
            <see cref="T:Npgsql.NpgsqlMultiHostDataSource"/>.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.OpenTimestamp">
            <summary>
            Contains the UTC timestamp when this connector was opened, used to implement
            <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.ConnectionLifetime"/>.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlConnector.MinimumInternalCommandTimeout">
            <summary>
            The minimum timeout that can be set on internal commands such as COMMIT, ROLLBACK.
            </summary>
            <remarks>Precision is seconds</remarks>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.State">
            <summary>
            Gets the current state of the connector
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.IsConnected">
            <summary>
            Returns whether the connector is open, regardless of any task it is currently performing
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.Open(Npgsql.Util.NpgsqlTimeout,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Opens the physical connection to the server.
            </summary>
            <remarks>Usually called by the RequestConnector
            Method of the connection pool manager.</remarks>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.PrependInternalMessage(System.Byte[],System.Int32)">
            <summary>
            Prepends a message to be sent at the beginning of the next message chain.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.SkipUntil(Npgsql.BackendMessageCode)">
            <summary>
            Reads backend messages and discards them, stopping only after a message of the given type has
            been seen. Only a sync I/O version of this method exists - in async flows we inline the loop
            rather than calling an additional async method, in order to avoid the overhead.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.ProcessNewTransactionStatus(Npgsql.Internal.TransactionStatus)">
            <summary>
            Handles a new transaction indicator received on a ReadyForQuery message
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.IsSecure">
            <summary>
            Returns whether SSL is being used for the connection
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.IsScram">
            <summary>
            Returns whether SCRAM-SHA256 is being user for the connection
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.IsScramPlus">
            <summary>
            Returns whether SCRAM-SHA256-PLUS is being user for the connection
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.PerformPostgresCancellation">
            <summary>
            Creates another connector and sends a cancel request through it for this connector. This method never throws, but returns
            whether the cancellation attempt failed.
            </summary>
            <returns>
            <para>
            <see langword="true" /> if the cancellation request was successfully delivered, or if it was skipped because a previous
            request was already sent. <see langword="false"/> if the cancellation request could not be delivered because of an exception
            (the method logs internally).
            </para>
            <para>
            This does not indicate whether the cancellation attempt was successful on the PostgreSQL side - only if the request was
            delivered.
            </para>
            </returns>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.StartNestedCancellableOperation(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Starts a new cancellable operation within an ongoing user action. This should only be used if a single user
            action spans several different actions which each has its own cancellation tokens. For example, a command
            execution is a single user action, but spans ExecuteReaderQuery, NextResult, Read and so forth.
            </summary>
            <remarks>
            Only one level of nested operations is supported. It is an error to call this method if it has previously
            been called, and the returned <see cref="T:System.Threading.CancellationTokenRegistration"/> was not disposed.
            </remarks>
            <param name="cancellationToken">
            The cancellation token provided by the user. Callbacks will be registered on this token for executing the
            cancellation, and the token will be included in any thrown <see cref="T:System.OperationCanceledException"/>.
            </param>
            <param name="attemptPgCancellation">
            If <see langword="true" />, PostgreSQL cancellation will be attempted when the user requests cancellation or
            a timeout occurs, followed by a client-side socket cancellation once
            <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.CancellationTimeout"/> has elapsed. If <see langword="false" />,
            PostgreSQL cancellation will be skipped and client-socket cancellation will occur immediately.
            </param>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.CloseOngoingOperations(System.Boolean)">
            <summary>
            Closes ongoing operations, i.e. an open reader exists or a COPY operation still in progress, as
            part of a connection close.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.UnexpectedMessageReceived(Npgsql.BackendMessageCode)">
            <summary>
            Called when an unexpected message has been received during an action. Breaks the
            connector and returns the appropriate message.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.Break(System.Exception)">
            <summary>
            Called when a connector becomes completely unusable, e.g. when an unexpected I/O exception is raised or when
            we lose protocol sync.
            Note that fatal errors during the Open phase do *not* pass through here.
            </summary>
            <param name="reason">The exception that caused the break.</param>
            <returns>The exception given in <paramref name="reason"/> for chaining calls.</returns>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.Cleanup">
            <summary>
            Closes the socket and cleans up client-side resources associated with this connector.
            </summary>
            <remarks>
            This method doesn't actually perform any meaningful I/O, and therefore is sync-only.
            </remarks>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.Reset(System.Boolean)">
            <summary>
            Called when a pooled connection is closed, and its connector is returned to the pool.
            Resets the connector back to its initial state, releasing server-side sources
            (e.g. prepared statements), resetting parameters to their defaults, and resetting client-side
            state
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.ResetReadBuffer">
            <summary>
            The connector may have allocated an oversize read buffer, to hold big rows in non-sequential reading.
            This switches us back to the original one and returns the buffer to <see cref="T:System.Buffers.ArrayPool`1" />.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.StartUserAction(Npgsql.Internal.ConnectorState,Npgsql.NpgsqlCommand,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Starts a user action. This makes sure that another action isn't already in progress, handles synchronization with keepalive,
            and sets up cancellation.
            </summary>
            <param name="newState">The new state to be set when entering this user action.</param>
            <param name="command">
            The <see cref="T:Npgsql.NpgsqlCommand" /> that is starting execution - if an <see cref="T:Npgsql.NpgsqlOperationInProgressException" /> is
            thrown, it will reference this.
            </param>
            <param name="cancellationToken">
            The cancellation token provided by the user. Callbacks will be registered on this token for executing the cancellation,
            and the token will be included in any thrown <see cref="T:System.OperationCanceledException"/>.
            </param>
            <param name="attemptPgCancellation">
            If <see langword="true" />, PostgreSQL cancellation will be attempted when the user requests cancellation or a timeout
            occurs, followed by a client-side socket cancellation once <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.CancellationTimeout"/> has
            elapsed. If <see langword="false" />, PostgreSQL cancellation will be skipped and client-socket cancellation will occur
            immediately.
            </param>
        </member>
        <member name="T:Npgsql.Internal.NpgsqlConnector.UserAction">
            <summary>
            An IDisposable wrapper around <see cref="M:Npgsql.Internal.NpgsqlConnector.EndUserAction"/>.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlConnector.Timezone">
            <summary>
            The connection's timezone as reported by PostgreSQL, in the IANA/Olson database format.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.CreateCommand(System.String)">
            <summary>
            Creates and returns a <see cref="T:Npgsql.NpgsqlCommand"/> object associated with the <see cref="T:Npgsql.Internal.NpgsqlConnector"/>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlCommand"/> object.</returns>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlConnector.CreateBatch">
            <summary>
            Creates and returns a <see cref="T:Npgsql.NpgsqlBatch"/> object associated with the <see cref="T:Npgsql.Internal.NpgsqlConnector"/>.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlBatch"/> object.</returns>
        </member>
        <member name="T:Npgsql.Internal.NpgsqlConnector.GSSPasswordMessageStream">
            <summary>
            This Stream is placed between NegotiateStream and the socket's NetworkStream (or SSLStream). It intercepts
            traffic and performs the following operations:
            * Outgoing messages are framed in PostgreSQL's PasswordMessage, and incoming are stripped of it.
            * NegotiateStream frames payloads with a 5-byte header, which PostgreSQL doesn't understand. This header is
            stripped from outgoing messages and added to incoming ones.
            </summary>
            <remarks>
            See https://referencesource.microsoft.com/#System/net/System/Net/_StreamFramer.cs,16417e735f0e9530,references
            </remarks>
        </member>
        <member name="T:Npgsql.Internal.ConnectorState">
            <summary>
            Expresses the exact state of a connector.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Closed">
            <summary>
            The connector has either not yet been opened or has been closed.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Connecting">
            <summary>
            The connector is currently connecting to a PostgreSQL server.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Ready">
            <summary>
            The connector is connected and may be used to send a new query.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Executing">
            <summary>
            The connector is waiting for a response to a query which has been sent to the server.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Fetching">
            <summary>
            The connector is currently fetching and processing query results.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Waiting">
            <summary>
            The connector is currently waiting for asynchronous notifications to arrive.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Broken">
            <summary>
            The connection was broken because an unexpected error occurred which left it in an unknown state.
            This state isn't implemented yet.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Copy">
            <summary>
            The connector is engaged in a COPY operation.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.ConnectorState.Replication">
            <summary>
            The connector is engaged in streaming replication.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.TransactionStatus.Idle">
            <summary>
            Currently not in a transaction block
            </summary>
        </member>
        <member name="F:Npgsql.Internal.TransactionStatus.InTransactionBlock">
            <summary>
            Currently in a transaction block
            </summary>
        </member>
        <member name="F:Npgsql.Internal.TransactionStatus.InFailedTransactionBlock">
            <summary>
            Currently in a failed transaction block (queries will be rejected until block is ended)
            </summary>
        </member>
        <member name="F:Npgsql.Internal.TransactionStatus.Pending">
            <summary>
            A new transaction has been requested but not yet transmitted to the backend. It will be transmitted
            prepended to the next query.
            This is a client-side state option only, and is never transmitted from the backend.
            </summary>
        </member>
        <member name="T:Npgsql.Internal.DataRowLoadingMode">
            <summary>
            Specifies how to load/parse DataRow messages as they're received from the backend.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.DataRowLoadingMode.NonSequential">
            <summary>
            Load DataRows in non-sequential mode
            </summary>
        </member>
        <member name="F:Npgsql.Internal.DataRowLoadingMode.Sequential">
            <summary>
            Load DataRows in sequential mode
            </summary>
        </member>
        <member name="F:Npgsql.Internal.DataRowLoadingMode.Skip">
            <summary>
            Skip DataRow messages altogether
            </summary>
        </member>
        <member name="T:Npgsql.Internal.NpgsqlDatabaseInfo">
            <summary>
            Base class for implementations which provide information about PostgreSQL and PostgreSQL-like databases
            (e.g. type definitions, capabilities...).
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.Host">
            <summary>
            The hostname of IP address of the database.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.Port">
            <summary>
            The TCP port of the database.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.Name">
            <summary>
            The database name.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.Version">
            <summary>
            The version of the PostgreSQL database we're connected to, as reported in the "server_version" parameter.
            Exposed via <see cref="P:Npgsql.NpgsqlConnection.PostgreSqlVersion"/>.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.ServerVersion">
            <summary>
            The PostgreSQL version string as returned by the server_version option. Populated during loading.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsRangeTypes">
            <summary>
            Whether the backend supports range types.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsMultirangeTypes">
            <summary>
            Whether the backend supports multirange types.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsEnumTypes">
            <summary>
            Whether the backend supports enum types.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsCloseAll">
            <summary>
            Whether the backend supports the CLOSE ALL statement.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsAdvisoryLocks">
            <summary>
            Whether the backend supports advisory locks.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsDiscardSequences">
            <summary>
            Whether the backend supports the DISCARD SEQUENCES statement.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsUnlisten">
            <summary>
            Whether the backend supports the UNLISTEN statement.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsDiscardTemp">
            <summary>
            Whether the backend supports the DISCARD TEMP statement.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsDiscard">
            <summary>
            Whether the backend supports the DISCARD statement.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.HasIntegerDateTimes">
            <summary>
            Reports whether the backend uses the newer integer timestamp representation.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.SupportsTransactions">
            <summary>
            Whether the database supports transactions.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.ByOID">
            <summary>
            Indexes backend types by their type OID.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.ByFullName">
            <summary>
            Indexes backend types by their PostgreSQL internal name, including namespace (e.g. pg_catalog.int4).
            Only used for enums and composites.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlDatabaseInfo.ByName">
            <summary>
            Indexes backend types by their PostgreSQL name, not including namespace.
            If more than one type exists with the same name (i.e. in different namespaces) this
            table will contain an entry with a null value.
            Only used for enums and composites.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlDatabaseInfo.#ctor(System.String,System.Int32,System.String,System.Version)">
            <summary>
            Initializes the instance of <see cref="T:Npgsql.Internal.NpgsqlDatabaseInfo"/>.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlDatabaseInfo.#ctor(System.String,System.Int32,System.String,System.Version,System.String)">
            <summary>
            Initializes the instance of <see cref="T:Npgsql.Internal.NpgsqlDatabaseInfo"/>.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlDatabaseInfo.GetTypes">
            <summary>
            Provides all PostgreSQL types detected in this database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlDatabaseInfo.ParseServerVersion(System.String)">
            <summary>
            Parses a PostgreSQL server version (e.g. 10.1, 9.6.3) and returns a CLR Version.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlDatabaseInfo.RegisterFactory(Npgsql.Internal.INpgsqlDatabaseInfoFactory)">
            <summary>
            Registers a new database info factory, which is used to load information about databases.
            </summary>
        </member>
        <member name="T:Npgsql.Internal.NpgsqlReadBuffer">
            <summary>
            A buffer used by Npgsql to read data from the socket efficiently.
            Provides methods which decode different values types and tracks the current position.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlReadBuffer.Timeout">
            <summary>
            Timeout for sync and async reads
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlReadBuffer.Size">
            <summary>
            The total byte length of the buffer.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlReadBuffer.RelaxedTextEncoding">
            <summary>
            Same as <see cref="P:Npgsql.Internal.NpgsqlReadBuffer.TextEncoding"/>, except that it does not throw an exception if an invalid char is
            encountered (exception fallback), but rather replaces it with a question mark character (replacement
            fallback).
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlReadBuffer.MinimumSize">
            <summary>
            The minimum buffer size possible.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlReadBuffer.Ensure(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Ensures that <paramref name="count"/> bytes are available in the buffer, and if
            not, reads from the socket until enough is available.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlReadBuffer.Skip(System.Int32)">
            <summary>
            Does not perform any I/O - assuming that the bytes to be skipped are in the memory buffer.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlReadBuffer.Skip(System.Int32,System.Boolean)">
            <summary>
            Skip a given number of bytes.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlReadBuffer.ReadNullTerminatedString">
            <summary>
            Seeks the first null terminator (\0) and returns the string up to it. The buffer must already
            contain the entire string and its terminator.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlReadBuffer.ReadNullTerminatedStringRelaxed">
            <summary>
            Seeks the first null terminator (\0) and returns the string up to it. The buffer must already
            contain the entire string and its terminator. If any character could not be decoded, a question
            mark character is returned instead of throwing an exception.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlReadBuffer.ReadNullTerminatedString(System.Text.Encoding,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Seeks the first null terminator (\0) and returns the string up to it. Reads additional data from the network if a null
            terminator isn't found in the buffered data.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlReadBuffer.ColumnStream.CurrentLength">
            Does not throw ODE.
        </member>
        <member name="T:Npgsql.Internal.NpgsqlWriteBuffer">
            <summary>
            A buffer used by Npgsql to write data to the socket efficiently.
            Provides methods which encode different values types and tracks the current position.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlWriteBuffer.Timeout">
            <summary>
            Timeout for sync and async writes
            </summary>
        </member>
        <member name="P:Npgsql.Internal.NpgsqlWriteBuffer.Size">
            <summary>
            The total byte length of the buffer.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.NpgsqlWriteBuffer.MinimumSize">
            <summary>
            The minimum buffer size possible.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.NpgsqlWriteBuffer.GetContents">
            <summary>
            Returns all contents currently written to the buffer (but not flushed).
            Useful for pre-generating messages.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.PgConverter.CanConvert(Npgsql.Internal.DataFormat,Npgsql.Internal.BufferRequirements@)">
            <summary>
            Whether this converter can handle the given format and with which buffer requirements.
            </summary>
            <param name="format">The data format.</param>
            <param name="bufferRequirements">Returns the buffer requirements.</param>
            <returns>Returns true if the given data format is supported.</returns>
            <remarks>The buffer requirements should not cover database NULL reads or writes, these are handled by the caller.</remarks>
        </member>
        <member name="F:Npgsql.Internal.PgConverter.DbNullPredicate.None">
            Never DbNull (struct types)
        </member>
        <member name="F:Npgsql.Internal.PgConverter.DbNullPredicate.Custom">
            DbNull when *user code*
        </member>
        <member name="F:Npgsql.Internal.PgConverter.DbNullPredicate.Null">
            DbNull when value is null
        </member>
        <member name="F:Npgsql.Internal.PgConverter.DbNullPredicate.PolymorphicNull">
            DbNull when value is null or DBNull
        </member>
        <member name="M:Npgsql.Internal.PgConverterResolver.GetDefault(System.Nullable{Npgsql.Internal.Postgres.PgTypeId})">
            <summary>
            Gets the appropriate converter solely based on PgTypeId.
            </summary>
            <param name="pgTypeId"></param>
            <returns>The converter resolution.</returns>
            <remarks>
            Implementations should not return new instances of the possible converters that can be returned, instead its expected these are cached once used.
            Array or other collection converters depend on this to cache their own converter - which wraps the element converter - with the cache key being the element converter reference.
            </remarks>
        </member>
        <member name="M:Npgsql.Internal.PgConverterResolver.Get(Npgsql.Internal.Postgres.Field)">
            <summary>
            Gets the appropriate converter to read with based on the given field info.
            </summary>
            <param name="field"></param>
            <returns>The converter resolution.</returns>
            <remarks>
            Implementations should not return new instances of the possible converters that can be returned, instead its expected these are cached once used.
            Array or other collection converters depend on this to cache their own converter - which wraps the element converter - with the cache key being the element converter reference.
            </remarks>
        </member>
        <member name="M:Npgsql.Internal.PgConverterResolver`1.Get(`0,System.Nullable{Npgsql.Internal.Postgres.PgTypeId})">
            <summary>
            Gets the appropriate converter to write with based on the given value.
            </summary>
            <param name="value"></param>
            <param name="expectedPgTypeId"></param>
            <returns>The converter resolution.</returns>
            <remarks>
            Implementations should not return new instances of the possible converters that can be returned, instead its expected these are
            cached once used. Array or other collection converters depend on this to cache their own converter - which wraps the element
            converter - with the cache key being the element converter reference.
            </remarks>
        </member>
        <member name="M:Npgsql.Internal.PgReader.ReadBytes(System.Int32)">
            ReadBytes without memory management, the next read invalidates the underlying buffer(s), only use this for intermediate transformations.
        </member>
        <member name="M:Npgsql.Internal.PgReader.ReadBytesAsync(System.Int32,System.Threading.CancellationToken)">
            ReadBytesAsync without memory management, the next read invalidates the underlying buffer(s), only use this for intermediate transformations.
        </member>
        <member name="M:Npgsql.Internal.PgReader.DisposeUserActiveStream(System.Boolean)">
             <summary>
            
             </summary>
             <param name="async"></param>
             <returns>The stream length, if any</returns>
        </member>
        <member name="P:Npgsql.Internal.PgSerializerOptions.IntrospectionCaller">
            <summary>
            Used by GetSchema to be able to attempt to resolve all type catalog types without exceptions.
            </summary>
        </member>
        <member name="P:Npgsql.Internal.PgSerializerOptions.PortableTypeIds">
            Whether options should return a portable identifier (data type name) to prevent any generated id (oid) confusion across backends, this comes with a perf penalty.
        </member>
        <member name="M:Npgsql.Internal.PgStreamingConverterHelpers.Continuation.#ctor(System.Object,)">
            <param name="handle">A reference to the type that houses the static method <see ref="continuation"/> points to.</param>
            <param name="continuation">The continuation</param>
        </member>
        <member name="M:Npgsql.Internal.PgTypeInfo.GetResolution">
            Throws if the instance is a PgResolverTypeInfo.
        </member>
        <member name="M:Npgsql.Internal.PgTypeInfo.Bind``1(Npgsql.Internal.PgConverter{``0},``0,Npgsql.Internal.Size@,System.Object@,Npgsql.Internal.DataFormat@,System.Nullable{Npgsql.Internal.DataFormat})">
            When result is null, the value was interpreted to be a SQL NULL.
        </member>
        <member name="M:Npgsql.Internal.PgTypeInfo.BindObject(Npgsql.Internal.PgConverter,System.Object,Npgsql.Internal.Size@,System.Object@,Npgsql.Internal.DataFormat@,System.Nullable{Npgsql.Internal.DataFormat})">
            When result is null or DBNull, the value was interpreted to be a SQL NULL.
        </member>
        <member name="P:Npgsql.Internal.PgConverterInfo.IsBoxingConverter">
            Whether Converter.TypeToConvert matches PgTypeInfo.Type, if it doesn't object apis should be used.
        </member>
        <member name="M:Npgsql.Internal.PgWriter.GetStream(System.Boolean)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> that can be used to write to the underlying buffer.
            </summary>
            <param name="allowMixedIO">Blocking flushes during writes that were expected to be non-blocking and vice versa cause an exception to be thrown unless allowMixedIO is set to true, false by default.</param>
            <returns>The stream.</returns>
        </member>
        <member name="T:Npgsql.Internal.Postgres.DataTypeName">
            <summary>
            Represents the fully-qualified name of a PostgreSQL type.
            </summary>
        </member>
        <member name="F:Npgsql.Internal.Postgres.DataTypeName.NAMEDATALEN">
            <summary>
            The maximum length of names in an unmodified PostgreSQL installation.
            </summary>
            <remarks>
            We need to respect this to get to valid names when deriving them (for multirange/arrays etc).
            This does not include the namespace.
            </remarks>
        </member>
        <member name="T:Npgsql.Internal.Postgres.DataTypeNames">
            <summary>
            Well-known PostgreSQL data type names.
            </summary>
        </member>
        <member name="T:Npgsql.Internal.Postgres.Field">
            Base field type shared between tables and composites.
        </member>
        <member name="T:Npgsql.Internal.Postgres.PgTypeId">
            <summary>
            A discriminated union of <see cref="P:Npgsql.Internal.Postgres.PgTypeId.Oid" /> and <see cref="P:Npgsql.Internal.Postgres.PgTypeId.DataTypeName" />.
            </summary>
        </member>
        <member name="M:Npgsql.Internal.TypeInfoCache`1.GetOrAddInfo(System.Type,System.Nullable{`0},System.Boolean)">
             <summary>
            
             </summary>
             <param name="type"></param>
             <param name="pgTypeId"></param>
             <param name="defaultTypeFallback">
             When this flag is true, and both type and pgTypeId are non null, a default info for the pgTypeId can be returned if an exact match
             can't be found.
             </param>
             <returns></returns>
             <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Npgsql.Internal.TypeInfoFactory">
             <summary>
            
             </summary>
             <param name="options"></param>
             <param name="mapping"></param>
             <param name="resolvedDataTypeName">
             Signals whether a resolver based TypeInfo can keep its PgTypeId undecided or whether it should follow mapping.DataTypeName.
             </param>
        </member>
        <member name="F:Npgsql.Internal.MatchRequirement.All">
            Match when the clr type and datatype name both match.
            It's also the only requirement that participates in clr type fallback matching.
        </member>
        <member name="F:Npgsql.Internal.MatchRequirement.Single">
            Match when the datatype name or CLR type matches while the other also matches or is absent.
        </member>
        <member name="F:Npgsql.Internal.MatchRequirement.DataTypeName">
            Match when the datatype name matches and the clr type also matches or is absent.
        </member>
        <member name="T:Npgsql.Internal.PgConverterFactory">
            A factory for well-known PgConverters.
        </member>
        <member name="M:Npgsql.Internal.TypeInfoMappingCollection.Find(System.Type,System.Nullable{Npgsql.Internal.Postgres.DataTypeName},Npgsql.Internal.PgSerializerOptions)">
            Returns the first default converter or the first converter that matches both type and dataTypeName.
            If just a type was passed and no default was found we return the first converter with a type match.
        </member>
        <member name="M:Npgsql.Internal.TypeInfoMappingCollection.IsArrayLikeType(System.Type,System.Type@)">
            Returns whether type matches any of the types we register pg arrays as.
        </member>
        <member name="T:Npgsql.KerberosUsernameProvider">
            <summary>
            Launches MIT Kerberos klist and parses out the default principal from it.
            Caches the result.
            </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__OpeningConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__OpenedConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__OpenedMultiplexingConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ClosingConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ClosedConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ClosedMultiplexingConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__OpeningPhysicalConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__OpenedPhysicalConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ClosingPhysicalConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ClosedPhysicalConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingWaitStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ReceivedNoticeStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ConnectionExceededMaximumLifetimeStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__SendingKeepaliveStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CompletedKeepaliveStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__KeepaliveFailedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__BreakingConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExceptionWhenClosingPhysicalConnectionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartUserActionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__EndUserActionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExecutingCommandStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExecutingCommandWithParametersStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExecutingBatchStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExecutingBatchWithParametersStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CommandExecutionCompletedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CommandExecutionCompletedWithParametersStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__BatchExecutionCompletedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__BatchExecutionCompletedWithParametersStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CancellingCommandStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExecutingInternalCommandStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__PreparingCommandExplicitlyStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CommandPreparedExplicitlyStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__AutoPreparingStatementStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__UnpreparingCommandStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__DerivingParametersStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExceptionWhenWritingMultiplexedCommandsStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ReaderCleanupStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartedTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CommittedTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__RolledBackTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CreatingSavepointStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__RolledBackToSavepointStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ReleasedSavepointStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExceptionDuringTransactionDisposeStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__EnlistedVolatileResourceManagerStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CommittingSinglePhaseTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__RollingBackSinglePhaseTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__SinglePhaseTransactionRollbackFailedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__PreparingTwoPhaseTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CommittingTwoPhaseTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__TwoPhaseTransactionCommitFailedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__RollingBackTwoPhaseTransactionStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__TwoPhaseTransactionRollbackFailedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__TwoPhaseTransactionInDoubtStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ConnectionInUseWhenRollingBackStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CleaningUpResourceManagerStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingBinaryExportStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingBinaryImportStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingTextExportStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingTextImportStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingRawCopyStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__BinaryCopyOperationCompletedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CopyOperationCompletedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CopyOperationCancelledStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExceptionWhenDisposingCopyOperationStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__CreatingReplicationSlotStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__DroppingReplicationSlotStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingLogicalReplicationStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__StartingPhysicalReplicationStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ExecutingReplicationCommandStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ReceivedReplicationPrimaryKeepaliveStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__SendingReplicationStandbyStatusUpdateStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__SentReplicationFeedbackMessageStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Npgsql.LogMessages.__ReplicationFeedbackMessageSendingFailedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="F:Npgsql.MultiplexingDataSource._writeCoalescingBufferThresholdBytes">
            <summary>
            When multiplexing is enabled, determines the maximum number of outgoing bytes to buffer before
            flushing to the network.
            </summary>
        </member>
        <member name="T:Npgsql.INpgsqlNameTranslator">
            <summary>
            A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class)
            according to some scheme.
            Used for mapping enum and composite types.
            </summary>
        </member>
        <member name="M:Npgsql.INpgsqlNameTranslator.TranslateTypeName(System.String)">
            <summary>
            Given a CLR type name (e.g class, struct, enum), translates its name to a database type name.
            </summary>
        </member>
        <member name="M:Npgsql.INpgsqlNameTranslator.TranslateMemberName(System.String)">
            <summary>
            Given a CLR member name (property or field), translates its name to a database type name.
            </summary>
        </member>
        <member name="T:Npgsql.NameTranslation.NpgsqlNullNameTranslator">
            <summary>
            A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database.
            </summary>
        </member>
        <member name="M:Npgsql.NameTranslation.NpgsqlNullNameTranslator.TranslateTypeName(System.String)">
            <summary>
            Given a CLR type name (e.g class, struct, enum), translates its name to a database type name.
            </summary>
        </member>
        <member name="M:Npgsql.NameTranslation.NpgsqlNullNameTranslator.TranslateMemberName(System.String)">
            <summary>
            Given a CLR member name (property or field), translates its name to a database type name.
            </summary>
        </member>
        <member name="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator">
            <summary>
            A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database
            names (some_class)
            </summary>
        </member>
        <member name="M:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a new <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.
            </summary>
            <param name="culture">
            An object that supplies culture-specific casing rules.
            This will be used when converting names to lower case.
            If <see langword="null"/> then <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> will be used.
            </param>
        </member>
        <member name="M:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.#ctor(System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Creates a new <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.
            </summary>
            <param name="legacyMode">
            Uses the legacy naming convention if <see langword="true"/>, otherwise it uses the new naming convention.
            </param>
            <param name="culture">
            An object that supplies culture-specific casing rules.
            This will be used when converting names to lower case.
            If <see langword="null"/> then <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> will be used.
            </param>
        </member>
        <member name="M:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.TranslateTypeName(System.String)">
            <summary>
            Given a CLR type name (e.g class, struct, enum), translates its name to a database type name.
            </summary>
        </member>
        <member name="M:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.TranslateMemberName(System.String)">
            <summary>
            Given a CLR member name (property or field), translates its name to a database type name.
            </summary>
        </member>
        <member name="M:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.ConvertToSnakeCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to its snake_case equivalent.
            </summary>
            <param name="name">The value to convert.</param>
            <param name="culture">
            An object that supplies culture-specific casing rules.
            This will be used when converting names to lower case.
            If <see langword="null"/> then <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> will be used.
            </param>
        </member>
        <member name="T:Npgsql.NpgsqlBatch">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlBatch.DbBatchCommands">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlBatch.BatchCommands">
            <inheritdoc cref="P:System.Data.Common.DbBatch.BatchCommands"/>
        </member>
        <member name="P:Npgsql.NpgsqlBatch.Timeout">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlBatch.Connection">
            <inheritdoc cref="P:System.Data.Common.DbBatch.Connection"/>
        </member>
        <member name="P:Npgsql.NpgsqlBatch.DbConnection">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlBatch.Transaction">
            <inheritdoc cref="P:System.Data.Common.DbBatch.Transaction"/>
        </member>
        <member name="P:Npgsql.NpgsqlBatch.DbTransaction">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlBatch.EnableErrorBarriers">
            <summary>
            Controls whether to place error barriers between all batch commands within this batch. Default to <see langword="false" />.
            </summary>
            <remarks>
            <para>
                By default, any exception in a command causes later commands in the batch to be skipped, and earlier commands to be rolled back.
                Enabling error barriers ensures that errors do not affect other commands in the batch.
            </para>
            <para>
                Note that if the batch is executed within an explicit transaction, the first error places the transaction in a failed state,
                causing all later commands to fail in any case. As a result, this option is useful mainly when there is no explicit transaction.
            </para>
            <para>
                At the PostgreSQL wire protocol level, this corresponds to inserting a Sync message between each command, rather than grouping
                all the batch's commands behind a single terminating Sync.
            </para>
            <para>
                To control error barriers on a command-by-command basis, see <see cref="P:Npgsql.NpgsqlBatchCommand.AppendErrorBarrier" />.
            </para>
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlBatch.AllResultTypesAreUnknown">
            <summary>
            Marks all of the batch's result columns as either known or unknown.
            Unknown results column are requested them from PostgreSQL in text format, and Npgsql makes no
            attempt to parse them. They will be accessible as strings only.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBatch.#ctor(Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction)">
            <summary>
            Initializes a new <see cref="T:Npgsql.NpgsqlBatch"/>.
            </summary>
            <param name="connection">A <see cref="T:Npgsql.NpgsqlConnection"/> that represents the connection to a PostgreSQL server.</param>
            <param name="transaction">The <see cref="T:Npgsql.NpgsqlTransaction"/> in which the <see cref="T:Npgsql.NpgsqlCommand"/> executes.</param>
        </member>
        <member name="M:Npgsql.NpgsqlBatch.CreateDbBatchCommand">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.CreateBatchCommand">
            <inheritdoc cref="M:System.Data.Common.DbBatch.CreateBatchCommand"/>
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteReader(System.Data.CommandBehavior)">
            <inheritdoc cref="M:System.Data.Common.DbBatch.ExecuteReader(System.Data.CommandBehavior)"/>
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteReaderAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbBatch.ExecuteReaderAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbBatch.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteNonQuery">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteScalar">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.Prepare">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.PrepareAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.Cancel">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlBatch.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.NpgsqlBatchCommand">
            <inheritdoc/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.CommandText">
            <inheritdoc/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.CommandType">
            <inheritdoc/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.DbParameterCollection">
            <inheritdoc/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.Parameters">
            <inheritdoc cref="P:System.Data.Common.DbBatchCommand.Parameters"/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:Npgsql.NpgsqlParameter"/> object.
            </summary>
            <returns>An <see cref="T:Npgsql.NpgsqlParameter"/> object.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.CanCreateParameter">
            <summary>
            Returns whether the <see cref="M:Npgsql.NpgsqlBatchCommand.CreateParameter"/> method is implemented.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.AppendErrorBarrier">
            <summary>
            Appends an error barrier after this batch command. Defaults to the value of <see cref="P:Npgsql.NpgsqlBatch.EnableErrorBarriers" /> on the
            batch.
            </summary>
            <remarks>
            <para>
                By default, any exception in a command causes later commands in the batch to be skipped, and earlier commands to be rolled back.
                Appending an error barrier ensures that errors from this command (or previous ones) won't cause later commands to be skipped,
                and that errors from later commands won't cause this command (or previous ones) to be rolled back).
            </para>
            <para>
                Note that if the batch is executed within an explicit transaction, the first error places the transaction in a failed state,
                causing all later commands to fail in any case. As a result, this option is useful mainly when there is no explicit transaction.
            </para>
            <para>
                At the PostgreSQL wire protocol level, this corresponds to inserting a Sync message after this command, rather than grouping
                all the batch's commands behind a single terminating Sync.
            </para>
            <para>
                Controlling error barriers on a command-by-command basis is an advanced feature, consider enabling error barriers for the entire
                batch via <see cref="P:Npgsql.NpgsqlBatch.EnableErrorBarriers" />.
            </para>
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.Rows">
            <summary>
            The number of rows affected or retrieved.
            </summary>
            <remarks>
            See the command tag in the CommandComplete message for the meaning of this value for each <see cref="P:Npgsql.NpgsqlBatchCommand.StatementType"/>,
            https://www.postgresql.org/docs/current/static/protocol-message-formats.html
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.RecordsAffected">
            <inheritdoc/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.StatementType">
            <summary>
            Specifies the type of query, e.g. SELECT.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.OID">
            <summary>
            For an INSERT, the object ID of the inserted row if <see cref="P:Npgsql.NpgsqlBatchCommand.RecordsAffected"/> is 1 and
            the target table has OIDs; otherwise 0.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.FinalCommandText">
            <summary>
            The SQL as it will be sent to PostgreSQL, after any rewriting performed by Npgsql (e.g. named to positional parameter
            placeholders).
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.PositionalParameters">
            <summary>
            The list of parameters, ordered positionally, as it will be sent to PostgreSQL.
            </summary>
            <remarks>
            If the user provided positional parameters, this references the <see cref="P:Npgsql.NpgsqlBatchCommand.Parameters"/> (in batching mode) or the list
            backing <see cref="P:Npgsql.NpgsqlCommand.Parameters" /> (in non-batching) mode. If the user provided named parameters, this is a
            separate list containing the re-ordered parameters.
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.Description">
            <summary>
            The RowDescription message for this query. If null, the query does not return rows (e.g. INSERT)
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.PreparedStatement">
            <summary>
            If this statement has been automatically prepared, references the <see cref="P:Npgsql.NpgsqlBatchCommand.PreparedStatement"/>.
            Null otherwise.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.StatementName">
            <summary>
            Holds the server-side (prepared) ASCII statement name. Empty string for non-prepared statements.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommand.IsPrepared">
            <summary>
            Whether this statement has already been prepared (including automatic preparation).
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommand.TryGetPrepared(Npgsql.PreparedStatement@)">
            <summary>
            Returns a prepared statement for this statement (including automatic preparation).
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommand.#ctor">
            <summary>
            Initializes a new <see cref="T:Npgsql.NpgsqlBatchCommand"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommand.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Npgsql.NpgsqlBatchCommand"/>.
            </summary>
            <param name="commandText">The text of the <see cref="T:Npgsql.NpgsqlBatchCommand"/>.</param>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommand.ToString">
            <summary>
            Returns the <see cref="P:Npgsql.NpgsqlBatchCommand.CommandText"/>.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlBatchCommandCollection">
            <inheritdoc cref="T:System.Data.Common.DbBatchCommandCollection"/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommandCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommandCollection.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Add(Npgsql.NpgsqlBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Add(System.Data.Common.DbBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Contains(Npgsql.NpgsqlBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Contains(System.Data.Common.DbBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.CopyTo(Npgsql.NpgsqlBatchCommand[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.CopyTo(System.Data.Common.DbBatchCommand[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.IndexOf(Npgsql.NpgsqlBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.IndexOf(System.Data.Common.DbBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Insert(System.Int32,Npgsql.NpgsqlBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Insert(System.Int32,System.Data.Common.DbBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Remove(Npgsql.NpgsqlBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.Remove(System.Data.Common.DbBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Npgsql.NpgsqlBatchCommandCollection.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" />
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.GetBatchCommand(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Npgsql.NpgsqlBatchCommandCollection.SetBatchCommand(System.Int32,System.Data.Common.DbBatchCommand)">
            <inheritdoc/>
        </member>
        <member name="T:Npgsql.NpgsqlBinaryExporter">
            <summary>
            Provides an API for a binary COPY TO operation, a high-performance data export mechanism from
            a PostgreSQL table. Initiated by <see cref="M:Npgsql.NpgsqlConnection.BeginBinaryExport(System.String)"/>
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBinaryExporter.NumColumns">
            <summary>
            The number of columns, as returned from the backend in the CopyInResponse.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBinaryExporter.Timeout">
            <summary>
            Current timeout
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.StartRow">
            <summary>
            Starts reading a single row, must be invoked before reading any columns.
            </summary>
            <returns>
            The number of columns in the row. -1 if there are no further rows.
            Note: This will currently be the same value for all rows, but this may change in the future.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.StartRowAsync(System.Threading.CancellationToken)">
            <summary>
            Starts reading a single row, must be invoked before reading any columns.
            </summary>
            <returns>
            The number of columns in the row. -1 if there are no further rows.
            Note: This will currently be the same value for all rows, but this may change in the future.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.Read``1">
            <summary>
            Reads the current column, returns its value and moves ahead to the next column.
            If the column is null an exception is thrown.
            </summary>
            <typeparam name="T">
            The type of the column to be read. This must correspond to the actual type or data
            corruption will occur. If in doubt, use <see cref="M:Npgsql.NpgsqlBinaryExporter.Read``1(NpgsqlTypes.NpgsqlDbType)"/> to manually
            specify the type.
            </typeparam>
            <returns>The value of the column</returns>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.ReadAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the current column, returns its value and moves ahead to the next column.
            If the column is null an exception is thrown.
            </summary>
            <typeparam name="T">
            The type of the column to be read. This must correspond to the actual type or data
            corruption will occur. If in doubt, use <see cref="M:Npgsql.NpgsqlBinaryExporter.Read``1(NpgsqlTypes.NpgsqlDbType)"/> to manually
            specify the type.
            </typeparam>
            <returns>The value of the column</returns>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.Read``1(NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Reads the current column, returns its value according to <paramref name="type"/> and
            moves ahead to the next column.
            If the column is null an exception is thrown.
            </summary>
            <param name="type">
            In some cases <typeparamref name="T"/> isn't enough to infer the data type coming in from the
            database. This parameter can be used to unambiguously specify the type. An example is the JSONB
            type, for which <typeparamref name="T"/> will be a simple string but for which
            <paramref name="type"/> must be specified as <see cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb"/>.
            </param>
            <typeparam name="T">The .NET type of the column to be read.</typeparam>
            <returns>The value of the column</returns>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.ReadAsync``1(NpgsqlTypes.NpgsqlDbType,System.Threading.CancellationToken)">
            <summary>
            Reads the current column, returns its value according to <paramref name="type"/> and
            moves ahead to the next column.
            If the column is null an exception is thrown.
            </summary>
            <param name="type">
            In some cases <typeparamref name="T"/> isn't enough to infer the data type coming in from the
            database. This parameter can be used to unambiguously specify the type. An example is the JSONB
            type, for which <typeparamref name="T"/> will be a simple string but for which
            <paramref name="type"/> must be specified as <see cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb"/>.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <typeparam name="T">The .NET type of the column to be read.</typeparam>
            <returns>The value of the column</returns>
        </member>
        <member name="P:Npgsql.NpgsqlBinaryExporter.IsNull">
            <summary>
            Returns whether the current column is null.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.Skip">
            <summary>
            Skips the current column without interpreting its value.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.SkipAsync(System.Threading.CancellationToken)">
            <summary>
            Skips the current column without interpreting its value.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.Cancel">
            <summary>
            Cancels an ongoing export.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.CancelAsync">
            <summary>
            Async cancels an ongoing export.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.Dispose">
            <summary>
            Completes that binary export and sets the connection back to idle state
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryExporter.DisposeAsync">
            <summary>
            Async completes that binary export and sets the connection back to idle state
            </summary>
            <returns></returns>
        </member>
        <member name="T:Npgsql.NpgsqlBinaryImporter">
            <summary>
            Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to
            a PostgreSQL table. Initiated by <see cref="M:Npgsql.NpgsqlConnection.BeginBinaryImport(System.String)"/>
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="F:Npgsql.NpgsqlBinaryImporter._column">
            <summary>
            The number of columns in the current (not-yet-written) row.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBinaryImporter.NumColumns">
            <summary>
            The number of columns, as returned from the backend in the CopyInResponse.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlBinaryImporter.Timeout">
            <summary>
            Current timeout
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.StartRow">
            <summary>
            Starts writing a single row, must be invoked before writing any columns.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.StartRowAsync(System.Threading.CancellationToken)">
            <summary>
            Starts writing a single row, must be invoked before writing any columns.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.Write``1(``0)">
            <summary>
            Writes a single column in the current row.
            </summary>
            <param name="value">The value to be written</param>
            <typeparam name="T">
            The type of the column to be written. This must correspond to the actual type or data
            corruption will occur. If in doubt, use <see cref="M:Npgsql.NpgsqlBinaryImporter.Write``1(``0,NpgsqlTypes.NpgsqlDbType)"/> to manually
            specify the type.
            </typeparam>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.WriteAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Writes a single column in the current row.
            </summary>
            <param name="value">The value to be written</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <typeparam name="T">
            The type of the column to be written. This must correspond to the actual type or data
            corruption will occur. If in doubt, use <see cref="M:Npgsql.NpgsqlBinaryImporter.Write``1(``0,NpgsqlTypes.NpgsqlDbType)"/> to manually
            specify the type.
            </typeparam>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.Write``1(``0,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Writes a single column in the current row as type <paramref name="npgsqlDbType"/>.
            </summary>
            <param name="value">The value to be written</param>
            <param name="npgsqlDbType">
            In some cases <typeparamref name="T"/> isn't enough to infer the data type to be written to
            the database. This parameter can be used to unambiguously specify the type. An example is
            the JSONB type, for which <typeparamref name="T"/> will be a simple string but for which
            <paramref name="npgsqlDbType"/> must be specified as <see cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb"/>.
            </param>
            <typeparam name="T">The .NET type of the column to be written.</typeparam>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.WriteAsync``1(``0,NpgsqlTypes.NpgsqlDbType,System.Threading.CancellationToken)">
            <summary>
            Writes a single column in the current row as type <paramref name="npgsqlDbType"/>.
            </summary>
            <param name="value">The value to be written</param>
            <param name="npgsqlDbType">
            In some cases <typeparamref name="T"/> isn't enough to infer the data type to be written to
            the database. This parameter can be used to unambiguously specify the type. An example is
            the JSONB type, for which <typeparamref name="T"/> will be a simple string but for which
            <paramref name="npgsqlDbType"/> must be specified as <see cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb"/>.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <typeparam name="T">The .NET type of the column to be written.</typeparam>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.Write``1(``0,System.String)">
            <summary>
            Writes a single column in the current row as type <paramref name="dataTypeName"/>.
            </summary>
            <param name="value">The value to be written</param>
            <param name="dataTypeName">
            In some cases <typeparamref name="T"/> isn't enough to infer the data type to be written to
            the database. This parameter and be used to unambiguously specify the type.
            </param>
            <typeparam name="T">The .NET type of the column to be written.</typeparam>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.WriteAsync``1(``0,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes a single column in the current row as type <paramref name="dataTypeName"/>.
            </summary>
            <param name="value">The value to be written</param>
            <param name="dataTypeName">
            In some cases <typeparamref name="T"/> isn't enough to infer the data type to be written to
            the database. This parameter and be used to unambiguously specify the type.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <typeparam name="T">The .NET type of the column to be written.</typeparam>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.WriteNull">
            <summary>
            Writes a single null column value.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            Writes a single null column value.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.WriteRow(System.Object[])">
            <summary>
            Writes an entire row of columns.
            Equivalent to calling <see cref="M:Npgsql.NpgsqlBinaryImporter.StartRow"/>, followed by multiple <see cref="M:Npgsql.NpgsqlBinaryImporter.Write``1(``0)"/>
            on each value.
            </summary>
            <param name="values">An array of column values to be written as a single row</param>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.WriteRowAsync(System.Threading.CancellationToken,System.Object[])">
            <summary>
            Writes an entire row of columns.
            Equivalent to calling <see cref="M:Npgsql.NpgsqlBinaryImporter.StartRow"/>, followed by multiple <see cref="M:Npgsql.NpgsqlBinaryImporter.Write``1(``0)"/>
            on each value.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <param name="values">An array of column values to be written as a single row</param>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.Complete">
            <summary>
            Completes the import operation. The writer is unusable after this operation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Completes the import operation. The writer is unusable after this operation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.Dispose">
            <summary>
            <para>
            Terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed.
            </para>
            <para>
            Note that if <see cref="M:Npgsql.NpgsqlBinaryImporter.Complete" /> hasn't been invoked before calling this, the import will be cancelled and all changes will
            be reverted.
            </para>
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.DisposeAsync">
            <summary>
            <para>
            Async terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed.
            </para>
            <para>
            Note that if <see cref="M:Npgsql.NpgsqlBinaryImporter.CompleteAsync(System.Threading.CancellationToken)" /> hasn't been invoked before calling this, the import will be cancelled and all changes will
            be reverted.
            </para>
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.Close">
            <summary>
            <para>
            Terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed.
            </para>
            <para>
            Note that if <see cref="M:Npgsql.NpgsqlBinaryImporter.Complete" /> hasn't been invoked before calling this, the import will be cancelled and all changes will
            be reverted.
            </para>
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBinaryImporter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>
            Async terminates the ongoing binary import and puts the connection back into the idle state, where regular commands can be executed.
            </para>
            <para>
            Note that if <see cref="M:Npgsql.NpgsqlBinaryImporter.CompleteAsync(System.Threading.CancellationToken)" /> hasn't been invoked before calling this, the import will be cancelled and all changes will
            be reverted.
            </para>
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCommand">
            <summary>
            Represents a SQL statement or function (stored procedure) to execute
            against a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlCommand._connectorPreparedOn">
            <summary>
            If this command is (explicitly) prepared, references the connector on which the preparation happened.
            Used to detect when the connector was changed (i.e. connection open/close), meaning that the command
            is no longer prepared.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.IsWrappedByBatch">
            <summary>
            Whether this <see cref="T:Npgsql.NpgsqlCommand" /> is wrapped by an <see cref="T:Npgsql.NpgsqlBatch" />.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Statements">
            <summary>
            Returns details about each statement that this command has executed.
            Is only populated when an Execute* method is called.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.IsCacheable">
            <summary>
            Whether this command is cached by <see cref="T:Npgsql.NpgsqlConnection" /> and returned by <see cref="M:Npgsql.NpgsqlConnection.CreateCommand" />.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand"/> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand"/> class with the text of the query.
            </summary>
            <param name="cmdText">The text of the query.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand"/> class with the text of the query and a
            <see cref="T:Npgsql.NpgsqlConnection"/>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Npgsql.NpgsqlConnection"/> that represents the connection to a PostgreSQL server.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand"/> class with the text of the query, a
            <see cref="T:Npgsql.NpgsqlConnection"/>, and the <see cref="T:Npgsql.NpgsqlTransaction"/>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Npgsql.NpgsqlConnection"/> that represents the connection to a PostgreSQL server.</param>
            <param name="transaction">The <see cref="T:Npgsql.NpgsqlTransaction"/> in which the <see cref="T:Npgsql.NpgsqlCommand"/> executes.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.Int32,Npgsql.NpgsqlConnection)">
            <summary>
            Used when this <see cref="T:Npgsql.NpgsqlCommand"/> instance is wrapped inside an <see cref="T:Npgsql.NpgsqlBatch"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(Npgsql.Internal.NpgsqlConnector,System.Int32)">
            <summary>
            Used when this <see cref="T:Npgsql.NpgsqlCommand"/> instance is wrapped inside an <see cref="T:Npgsql.NpgsqlBatch"/>.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandText">
            <summary>
            Gets or sets the SQL statement or function (stored procedure) to execute at the data source.
            </summary>
            <value>The SQL statement or function (stored procedure) to execute. The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time (in seconds) before terminating the attempt  to execute a command and generating an error.
            </summary>
            <value>The time (in seconds) to wait for the command to execute. The default value is 30 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandType">
            <summary>
            Gets or sets a value indicating how the <see cref="P:Npgsql.NpgsqlCommand.CommandText"/> property is to be interpreted.
            </summary>
            <value>
            One of the <see cref="T:System.Data.CommandType"/> values. The default is <see cref="F:System.Data.CommandType.Text"/>.
            </value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DbConnection">
            <summary>
            DB connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:Npgsql.NpgsqlConnection"/> used by this instance of the <see cref="T:Npgsql.NpgsqlCommand"/>.
            </summary>
            <value>The connection to a data source. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DesignTimeVisible">
            <summary>
            Design time visible.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the DataRow when used by the
            DbDataAdapter.Update(DataSet) method.
            </summary>
            <value>One of the <see cref="T:System.Data.UpdateRowSource"/> values.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.IsPrepared">
            <summary>
            Returns whether this query will execute as a prepared (compiled) query.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.AllResultTypesAreUnknown">
            <summary>
            Marks all of the query's result columns as either known or unknown.
            Unknown result columns are requested from PostgreSQL in text format, and Npgsql makes no
            attempt to parse them. They will be accessible as strings only.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.UnknownResultTypeList">
             <summary>
             Marks the query's result columns as known or unknown, on a column-by-column basis.
             Unknown result columns are requested from PostgreSQL in text format, and Npgsql makes no
             attempt to parse them. They will be accessible as strings only.
             </summary>
             <remarks>
             If the query includes several queries (e.g. SELECT 1; SELECT 2), this will only apply to the first
             one. The rest of the queries will be fetched and parsed as usual.
            
             The array size must correspond exactly to the number of result columns the query returns, or an
             error will be raised.
             </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.State">
            <summary>
            The current state of the command
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.CreateDbParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.Common.DbParameter"/> object.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbParameter"/> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:Npgsql.NpgsqlParameter"/> object.
            </summary>
            <returns>An <see cref="T:Npgsql.NpgsqlParameter"/> object.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DbParameterCollection">
            <summary>
            DB parameter collection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Parameters">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameterCollection"/>.
            </summary>
            <value>The parameters of the SQL statement or function (stored procedure). The default is an empty collection.</value>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Prepare">
            <summary>
            Creates a server-side prepared statement on the PostgreSQL server.
            This will make repeated future executions of this command much faster.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.PrepareAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a server-side prepared statement on the PostgreSQL server.
            This will make repeated future executions of this command much faster.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Unprepare">
            <summary>
            Unprepares a command, closing server-side statements associated with it.
            Note that this only affects commands explicitly prepared with <see cref="M:Npgsql.NpgsqlCommand.Prepare"/>, not
            automatically prepared statements.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.UnprepareAsync(System.Threading.CancellationToken)">
            <summary>
            Unprepares a command, closing server-side statements associated with it.
            Note that this only affects commands explicitly prepared with <see cref="M:Npgsql.NpgsqlCommand.Prepare"/>, not
            automatically prepared statements.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against the connection and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronous version of <see cref="M:Npgsql.NpgsqlCommand.ExecuteNonQuery"/>
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row
            in the result set returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set,
            or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronous version of <see cref="M:Npgsql.NpgsqlCommand.ExecuteScalar"/>
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation, with the first column of the
            first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Executes the command text against the connection.
            </summary>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            Executes the command text against the connection.
            </summary>
            <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior"/>.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes the <see cref="P:Npgsql.NpgsqlCommand.CommandText"/> against the <see cref="P:Npgsql.NpgsqlCommand.Connection"/>
            and returns a <see cref="T:Npgsql.NpgsqlDataReader"/>.
            </summary>
            <param name="behavior">One of the enumeration values that specifies the command behavior.</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
            <summary>
            An asynchronous version of <see cref="M:Npgsql.NpgsqlCommand.ExecuteReader(System.Data.CommandBehavior)"/>, which executes
            the <see cref="P:Npgsql.NpgsqlCommand.CommandText"/> against the <see cref="P:Npgsql.NpgsqlCommand.Connection"/>
            and returns a <see cref="T:Npgsql.NpgsqlDataReader"/>.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            An asynchronous version of <see cref="M:Npgsql.NpgsqlCommand.ExecuteReader(System.Data.CommandBehavior)"/>,
            which executes the <see cref="P:Npgsql.NpgsqlCommand.CommandText"/> against the <see cref="P:Npgsql.NpgsqlCommand.Connection"/>
            and returns a <see cref="T:Npgsql.NpgsqlDataReader"/>.
            </summary>
            <param name="behavior">One of the enumeration values that specifies the command behavior.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DbTransaction">
            <summary>
            DB transaction.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Transaction">
            <summary>
            This property is ignored by Npgsql. PostgreSQL only supports a single transaction at a given time on
            a given connection, and all commands implicitly run inside the current transaction started via
            <see cref="M:Npgsql.NpgsqlConnection.BeginTransaction"/>
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Cancel">
            <summary>
            Attempts to cancel the execution of an <see cref="T:Npgsql.NpgsqlCommand" />.
            </summary>
            <remarks>As per the specs, no exception will be thrown by this method in case of failure.</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlCommand.FixupRowDescription(Npgsql.BackendMessages.RowDescriptionMessage,System.Boolean)">
            <summary>
            Fixes up the text/binary flag on result columns.
            Since Prepare() describes a statement rather than a portal, the resulting RowDescription
            will have text format on all result columns. Fix that up.
            </summary>
            <remarks>
            Note that UnknownResultTypeList only applies to the first query, while AllResultTypesAreUnknown applies
            to all of them.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.System#ICloneable#Clone">
            <summary>
            Create a new command based on this one.
            </summary>
            <returns>A new NpgsqlCommand object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Clone">
            <summary>
            Create a new command based on this one.
            </summary>
            <returns>A new NpgsqlCommand object.</returns>
        </member>
        <member name="E:Npgsql.NpgsqlCommand.Disposed">
            <summary>
            This event is unsupported by Npgsql. Use <see cref="E:System.Data.Common.DbConnection.StateChange"/> instead.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCommandBuilder">
            <summary>
             This class creates database commands for automatic insert, update and delete operations.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommandBuilder"/> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.#ctor(Npgsql.NpgsqlDataAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommandBuilder"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="P:Npgsql.NpgsqlCommandBuilder.QuotePrefix">
            <summary>
            Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.
            </summary>
            <returns>
            The beginning character or characters to use. The default is an empty string.
              </returns>
              <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
        </member>
        <member name="P:Npgsql.NpgsqlCommandBuilder.QuoteSuffix">
            <summary>
            Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.
            </summary>
            <returns>
            The ending character or characters to use. The default is an empty string.
              </returns>
              <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.DeriveParameters(Npgsql.NpgsqlCommand)">
            <summary>
            
             This method is responsible to derive the command parameter list with values obtained from function definition.
             It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown.
             Parameters name will be parameter1, parameter2, ... for CommandType.StoredProcedure and named after the placeholder for CommandType.Text
            </summary>
             <param name="command">NpgsqlCommand whose function parameters will be obtained.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetInsertCommand">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required
            to perform insertions at the data source.
            </summary>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform insertions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform insertions
            at the data source, optionally using columns for parameter names.
            </summary>
            <param name="useColumnsForParameterNames">
            If <see langword="true"/>, generate parameter names matching column names, if possible.
            If <see langword="false"/>, generate <c>@p1</c>, <c>@p2</c>, and so on.
            </param>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform insertions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the automatically generated System.Data.Common.DbCommand object required
            to perform updates at the data source.
            </summary>
            <returns>
            The automatically generated System.Data.Common.DbCommand object required to perform updates.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform updates
            at the data source, optionally using columns for parameter names.
            </summary>
            <param name="useColumnsForParameterNames">
            If <see langword="true"/>, generate parameter names matching column names, if possible.
            If <see langword="false"/>, generate <c>@p1</c>, <c>@p2</c>, and so on.
            </param>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform updates.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the automatically generated System.Data.Common.DbCommand object required
            to perform deletions at the data source.
            </summary>
            <returns>
            The automatically generated System.Data.Common.DbCommand object required to perform deletions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform deletions
            at the data source, optionally using columns for parameter names.
            </summary>
            <param name="useColumnsForParameterNames">
            If <see langword="true"/>, generate parameter names matching column names, if possible.
            If <see langword="false"/>, generate @p1, @p2, and so on.
            </param>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform deletions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>
            Applies the parameter information.
            </summary>
            <param name="p">The parameter.</param>
            <param name="row">The row.</param>
            <param name="statementType">Type of the statement.</param>
            <param name="whereClause">If set to <see langword="true"/> [where clause].</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetParameterName(System.Int32)">
            <summary>
            Returns the name of the specified parameter in the format of @p#.
            </summary>
            <param name="parameterOrdinal">The number to be included as part of the parameter's name..</param>
            <returns>
            The name of the parameter with the specified number appended as part of the parameter name.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetParameterName(System.String)">
            <summary>
            Returns the full parameter name, given the partial parameter name.
            </summary>
            <param name="parameterName">The partial name of the parameter.</param>
            <returns>
            The full parameter name corresponding to the partial parameter name requested.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>
            Returns the placeholder for the parameter in the associated SQL statement.
            </summary>
            <param name="parameterOrdinal">The number to be included as part of the parameter's name.</param>
            <returns>
            The name of the parameter with the specified number appended.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>
            Registers the <see cref="T:Npgsql.NpgsqlCommandBuilder" /> to handle the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdating"/> event for a <see cref="T:Npgsql.NpgsqlDataAdapter" />.
            </summary>
            <param name="adapter">The <see cref="T:System.Data.Common.DbDataAdapter" /> to be used for the update.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.RowUpdatingHandler(System.Object,Npgsql.NpgsqlRowUpdatingEventArgs)">
            <summary>
            Adds an event handler for the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdating"/> event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlRowUpdatingEventArgs"/> instance containing information about the event.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.
            </summary>
            <param name="unquotedIdentifier">The original unquoted identifier.</param>
            <returns>
            The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            <exception cref="T:System.ArgumentNullException">Unquoted identifier parameter cannot be null</exception>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.
            </summary>
            <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>
            <returns>
            The unquoted identifier, with embedded quotes properly un-escaped.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            <exception cref="T:System.ArgumentNullException">Quoted identifier parameter cannot be null</exception>
        </member>
        <member name="T:Npgsql.NpgsqlConnection">
            <summary>
            This class represents a connection to a PostgreSQL server.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnection._userFacingConnectionString">
            <summary>
            The connection string, without the password after open (unless Persist Security Info=true)
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnection._connectionString">
            <summary>
            The original connection string provided by the user, including the password.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Connector">
            <summary>
            The physical connection to the database. This is <see langword="null"/> when the connection is closed,
            and also when it is open in multiplexing mode and unbound (e.g. not in a transaction).
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Settings">
            <summary>
            The parsed connection string. Set only after the connection is opened.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnection._closing">
            <summary>
            Flag used to make sure we never double-close a connection, returning it twice to the pool.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.GlobalTypeMapper">
            <summary>
            The global type mapper, which contains defaults used by all new connections.
            Modify mappings on this mapper to affect your entire application.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.TypeMapper">
            <summary>
            Connection-level type mapping is no longer supported. See the 7.0 release notes for configuring type mapping on NpgsqlDataSource.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnection.DefaultPort">
            <summary>
            The default TCP/IP port for PostgreSQL.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnection.TimeoutLimit">
            <summary>
            Maximum value for connection timeout.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectorBindingScope">
            <summary>
            Tracks when this connection was bound to a physical connector (e.g. at open-time, when a transaction
            was started...).
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlConnection"/> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.NpgsqlConnection"/> with the given connection string.
            </summary>
            <param name="connectionString">The connection used to open the PostgreSQL database.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Open">
            <summary>
            Opens a database connection with the property settings specified by the <see cref="P:Npgsql.NpgsqlConnection.ConnectionString"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This is the asynchronous version of <see cref="M:Npgsql.NpgsqlConnection.Open"/>.
            </summary>
            <remarks>
            Do not invoke other methods and properties of the <see cref="T:Npgsql.NpgsqlConnection"/> object until the returned Task is complete.
            </remarks>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionString">
            <summary>
            Gets or sets the string used to connect to a PostgreSQL database. See the manual for details.
            </summary>
            <value>The connection string that includes the server name,
            the database name, and other parameters needed to establish
            the initial connection. The default value is an empty string.
            </value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ProvidePasswordCallback">
            <summary>
            Gets or sets the delegate used to generate a password for new database connections.
            </summary>
            <remarks>
            <p>
            This delegate is executed when a new database connection is opened that requires a password.
            </p>
            <p>
            The <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.Password"/> and <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.Passfile"/> connection
            string properties have precedence over this delegate: it will not be executed if a password is specified, or if the specified or
            default Passfile contains a valid entry.
            </p>
            <p>
            Due to connection pooling this delegate is only executed when a new physical connection is opened, not when reusing a connection
            that was previously opened from the pool.
            </p>
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Host">
            <summary>
            Backend server host name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Port">
            <summary>
            Backend server port.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionTimeout">
            <summary>
            Gets the time (in seconds) to wait while trying to establish a connection
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.CommandTimeout">
            <summary>
            Gets the time (in seconds) to wait while trying to execute a command
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a command to complete. The default value is 30 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Database">
            <summary>
             Gets the name of the current database or the database to be used after a connection is opened.
             </summary>
             <value>The name of the current database or the name of the database to be
             used after a connection is opened. The default value is the empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.DataSource">
            <summary>
            Gets the string identifying the database server (host and port)
            </summary>
            <value>
            The name of the database server (host and port). If the connection uses a Unix-domain socket,
            the path to that socket is returned. The default value is the empty string.
            </value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.FullState">
            <summary>
            Gets the current state of the connection.
            </summary>
            <value>A bitwise combination of the <see cref="T:System.Data.ConnectionState"/> values. The default is <b>Closed</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.State">
            <summary>
            Gets whether the current state of the connection is Open or Closed
            </summary>
            <value>ConnectionState.Open, ConnectionState.Closed or ConnectionState.Connecting</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.CachedCommand">
            <summary>
            A cached command handed out by <see cref="M:Npgsql.NpgsqlConnection.CreateCommand" />, which is returned when disposed. Useful for reducing allocations.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CreateDbCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand"/>
            object associated with the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:Npgsql.NpgsqlCommand"/> object associated with the <see cref="T:Npgsql.NpgsqlConnection"/>.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlCommand"/> object.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.CachedBatch">
            <summary>
            A cached batch handed out by <see cref="M:Npgsql.NpgsqlConnection.CreateBatch" />, which is returned when disposed. Useful for reducing allocations.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CreateBatch">
            <summary>
            Creates and returns a <see cref="T:Npgsql.NpgsqlBatch"/> object associated with the <see cref="T:Npgsql.NpgsqlConnection"/>.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlBatch"/> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">The isolation level under which the transaction should run.</param>
            <returns>A <see cref="T:System.Data.Common.DbTransaction"/> object representing the new transaction.</returns>
            <remarks>Nested transactions are not supported.</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlTransaction"/> object representing the new transaction.</returns>
            <remarks>
            Nested transactions are not supported.
            Transactions created by this method will have the <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> isolation level.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="level">The isolation level under which the transaction should run.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlTransaction"/> object representing the new transaction.</returns>
            <remarks>Nested transactions are not supported.</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginDbTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Asynchronously begins a database transaction.
            </summary>
            <param name="isolationLevel">The isolation level under which the transaction should run.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task whose <see cref="P:System.Threading.Tasks.ValueTask`1.Result"/> property is an object representing the new transaction.</returns>
            <remarks>
            Nested transactions are not supported.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously begins a database transaction.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task whose Result property is an object representing the new transaction.</returns>
            <remarks>
            Nested transactions are not supported.
            Transactions created by this method will have the <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> isolation level.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Asynchronously begins a database transaction.
            </summary>
            <param name="level">The isolation level under which the transaction should run.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task whose <see cref="P:System.Threading.Tasks.ValueTask`1.Result"/> property is an object representing the new transaction.</returns>
            <remarks>
            Nested transactions are not supported.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlist transaction.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Close">
            <summary>
            Releases the connection. If the connection is pooled, it will be returned to the pool and made available for re-use.
            If it is non-pooled, the physical connection will be closed.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CloseAsync">
            <summary>
            Releases the connection. If the connection is pooled, it will be returned to the pool and made available for re-use.
            If it is non-pooled, the physical connection will be closed.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Npgsql.NpgsqlConnection"/>.
            </summary>
            <param name="disposing"><see langword="true"/> when called from <see cref="M:Npgsql.NpgsqlConnection.Dispose(System.Boolean)"/>;
            <see langword="false"/> when being called from the finalizer.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DisposeAsync">
            <summary>
            Releases all resources used by the <see cref="T:Npgsql.NpgsqlConnection"/>.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.Notice">
             <summary>
             Fires when PostgreSQL notices are received from PostgreSQL.
             </summary>
             <remarks>
             PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query
             (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator
             initiates a "fast" database shutdown).
            
             Note that notices are very different from notifications (see the <see cref="E:Npgsql.NpgsqlConnection.Notification"/> event).
             </remarks>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.Notification">
             <summary>
             Fires when PostgreSQL notifications are received from PostgreSQL.
             </summary>
             <remarks>
             PostgreSQL notifications are sent when your connection has registered for notifications on a specific channel via the
             LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel.
            
             Note that notifications are very different from notices (see the <see cref="E:Npgsql.NpgsqlConnection.Notice"/> event).
             </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.IsSecure">
            <summary>
            Returns whether SSL is being used for the connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.IsScram">
            <summary>
            Returns whether SCRAM-SHA256 is being user for the connection
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.IsScramPlus">
            <summary>
            Returns whether SCRAM-SHA256-PLUS is being user for the connection
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ProvideClientCertificatesCallback">
            <summary>
            Selects the local Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
            <remarks>
            See <see href="https://msdn.microsoft.com/en-us/library/system.net.security.localcertificateselectioncallback(v=vs.110).aspx"/>
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.UserCertificateValidationCallback">
            <summary>
            When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an
            advanced API, consider using <see cref="F:Npgsql.SslMode.VerifyFull" /> or <see cref="F:Npgsql.SslMode.VerifyCA" /> instead.
            </summary>
            <remarks>
            <para>
            Cannot be used in conjunction with <see cref="F:Npgsql.SslMode.Disable" />, <see cref="F:Npgsql.SslMode.VerifyCA" /> and
            <see cref="F:Npgsql.SslMode.VerifyFull" />.
            </para>
            <para>
            See <see href="https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.PostgreSqlVersion">
            <summary>
            The version of the PostgreSQL server we're connected to.
            <remarks>
            <p>
            This can only be called when the connection is open.
            </p>
            <p>
            In case of a development or pre-release version this field will contain
            the version of the next version to be released from this branch.
            </p>
            </remarks>
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ServerVersion">
            <summary>
            The PostgreSQL server version as returned by the server_version option.
            <remarks>
            This can only be called when the connection is open.
            </remarks>
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ProcessID">
            <summary>
            Process id of backend server.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.HasIntegerDateTimes">
            <summary>
            Reports whether the backend uses the newer integer timestamp representation.
            Note that the old floating point representation is not supported.
            Meant for use by type plugins (e.g. NodaTime)
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Timezone">
            <summary>
            The connection's timezone as reported by PostgreSQL, in the IANA/Olson database format.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.PostgresParameters">
            <summary>
            Holds all PostgreSQL parameters received for this connection. Is updated if the values change
            (e.g. as a result of a SET command).
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginBinaryImport(System.String)">
            <summary>
            Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table.
            </summary>
            <param name="copyFromCommand">A COPY FROM STDIN SQL command</param>
            <returns>A <see cref="T:Npgsql.NpgsqlBinaryImporter"/> which can be used to write rows and columns</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginBinaryImportAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table.
            </summary>
            <param name="copyFromCommand">A COPY FROM STDIN SQL command</param>
            <param name="cancellationToken">An optional token to cancel the asynchronous operation. The default value is None.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlBinaryImporter"/> which can be used to write rows and columns</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginBinaryExport(System.String)">
            <summary>
            Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table.
            </summary>
            <param name="copyToCommand">A COPY TO STDOUT SQL command</param>
            <returns>A <see cref="T:Npgsql.NpgsqlBinaryExporter"/> which can be used to read rows and columns</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginBinaryExportAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table.
            </summary>
            <param name="copyToCommand">A COPY TO STDOUT SQL command</param>
            <param name="cancellationToken">An optional token to cancel the asynchronous operation. The default value is None.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlBinaryExporter"/> which can be used to read rows and columns</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTextImport(System.String)">
            <summary>
            Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table.
            It is the user's responsibility to send the textual input according to the format specified
            in <paramref name="copyFromCommand"/>.
            </summary>
            <param name="copyFromCommand">A COPY FROM STDIN SQL command</param>
            <returns>
            A TextWriter that can be used to send textual data.</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTextImportAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table.
            It is the user's responsibility to send the textual input according to the format specified
            in <paramref name="copyFromCommand"/>.
            </summary>
            <param name="copyFromCommand">A COPY FROM STDIN SQL command</param>
            <param name="cancellationToken">An optional token to cancel the asynchronous operation. The default value is None.</param>
            <returns>
            A TextWriter that can be used to send textual data.</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTextExport(System.String)">
            <summary>
            Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table.
            It is the user's responsibility to parse the textual input according to the format specified
            in <paramref name="copyToCommand"/>.
            </summary>
            <param name="copyToCommand">A COPY TO STDOUT SQL command</param>
            <returns>
            A TextReader that can be used to read textual data.</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTextExportAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table.
            It is the user's responsibility to parse the textual input according to the format specified
            in <paramref name="copyToCommand"/>.
            </summary>
            <param name="copyToCommand">A COPY TO STDOUT SQL command</param>
            <param name="cancellationToken">An optional token to cancel the asynchronous operation. The default value is None.</param>
            <returns>
            A TextReader that can be used to read textual data.</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginRawBinaryCopy(System.String)">
            <summary>
            Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table.
            Note that unlike the other COPY API methods, <see cref="M:Npgsql.NpgsqlConnection.BeginRawBinaryCopy(System.String)"/> doesn't implement any encoding/decoding
            and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque
            blob, for the purpose of importing it back later.
            </summary>
            <param name="copyCommand">A COPY TO STDOUT or COPY FROM STDIN SQL command</param>
            <returns>A <see cref="T:Npgsql.NpgsqlRawCopyStream"/> that can be used to read or write raw binary data.</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginRawBinaryCopyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table.
            Note that unlike the other COPY API methods, <see cref="M:Npgsql.NpgsqlConnection.BeginRawBinaryCopyAsync(System.String,System.Threading.CancellationToken)"/> doesn't implement any encoding/decoding
            and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque
            blob, for the purpose of importing it back later.
            </summary>
            <param name="copyCommand">A COPY TO STDOUT or COPY FROM STDIN SQL command</param>
            <param name="cancellationToken">An optional token to cancel the asynchronous operation. The default value is None.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlRawCopyStream"/> that can be used to read or write raw binary data.</returns>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Wait(System.Int32)">
            <summary>
            Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and
            exits immediately. The asynchronous message is delivered via the normal events
            (<see cref="E:Npgsql.NpgsqlConnection.Notification"/>, <see cref="E:Npgsql.NpgsqlConnection.Notice"/>).
            </summary>
            <param name="timeout">
            The time-out value, in milliseconds, passed to <see cref="P:System.Net.Sockets.Socket.ReceiveTimeout"/>.
            The default value is 0, which indicates an infinite time-out period.
            Specifying -1 also indicates an infinite time-out period.
            </param>
            <returns>true if an asynchronous message was received, false if timed out.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Wait(System.TimeSpan)">
            <summary>
            Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and
            exits immediately. The asynchronous message is delivered via the normal events
            (<see cref="E:Npgsql.NpgsqlConnection.Notification"/>, <see cref="E:Npgsql.NpgsqlConnection.Notice"/>).
            </summary>
            <param name="timeout">
            The time-out value is passed to <see cref="P:System.Net.Sockets.Socket.ReceiveTimeout"/>.
            </param>
            <returns>true if an asynchronous message was received, false if timed out.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Wait">
            <summary>
            Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and
            exits immediately. The asynchronous message is delivered via the normal events
            (<see cref="E:Npgsql.NpgsqlConnection.Notification"/>, <see cref="E:Npgsql.NpgsqlConnection.Notice"/>).
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification)
            arrives, and exits immediately. The asynchronous message is delivered via the normal events
            (<see cref="E:Npgsql.NpgsqlConnection.Notification"/>, <see cref="E:Npgsql.NpgsqlConnection.Notice"/>).
            </summary>
            <param name="timeout">
            The time-out value, in milliseconds.
            The default value is 0, which indicates an infinite time-out period.
            Specifying -1 also indicates an infinite time-out period.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>true if an asynchronous message was received, false if timed out.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification)
            arrives, and exits immediately. The asynchronous message is delivered via the normal events
            (<see cref="E:Npgsql.NpgsqlConnection.Notification"/>, <see cref="E:Npgsql.NpgsqlConnection.Notice"/>).
            </summary>
            <param name="timeout">
            The time-out value as <see cref="T:System.TimeSpan"/>
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>true if an asynchronous message was received, false if timed out.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification)
            arrives, and exits immediately. The asynchronous message is delivered via the normal events
            (<see cref="E:Npgsql.NpgsqlConnection.Notification"/>, <see cref="E:Npgsql.NpgsqlConnection.Notice"/>).
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.TryGetBoundConnector(Npgsql.Internal.NpgsqlConnector@)">
            <summary>
            Checks whether the connection is currently bound to a connector, and if so, returns it via
            <paramref name="connector"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.StartBindingScope(Npgsql.ConnectorBindingScope,Npgsql.Util.NpgsqlTimeout,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Binds this connection to a physical connector. This happens when opening a non-multiplexing connection,
            or when starting a transaction on a multiplexed connection.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.EndBindingScope(Npgsql.ConnectorBindingScope)">
            <summary>
            Ends binding scope to the physical connection and returns it to the pool. Only useful with multiplexing on.
            </summary>
            <remarks>
            After this method is called, under no circumstances the physical connection (connector) should ever be used if multiplexing is on.
            See #3249.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchema">
            <summary>
            Returns the supported collections
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchema(System.String)">
            <summary>
            Returns the schema collection specified by the collection name.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns the schema collection specified by the collection name filtered by the restrictions.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="restrictions">
            The restriction values to filter the results.  A description of the restrictions is contained
            in the Restrictions collection.
            </param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchemaAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the supported collections.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchemaAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the schema collection specified by the collection name.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchemaAsync(System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the schema collection specified by the collection name filtered by the restrictions.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="restrictions">
            The restriction values to filter the results.  A description of the restrictions is contained
            in the Restrictions collection.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.System#ICloneable#Clone">
            <summary>
            Creates a closed connection with the connection string and authentication details of this message.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CloneWith(System.String)">
            <summary>
            Clones this connection, replacing its connection string with the given one.
            This allows creating a new connection with the same security information
            (password, SSL callbacks) while changing other connection parameters (e.g.
            database or pooling)
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ChangeDatabase(System.String)">
            <summary>
            This method changes the current database by disconnecting from the actual
            database and connecting to the specified.
            </summary>
            <param name="dbName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.DbProviderFactory">
            <summary>
            DB provider factory.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ClearPool(Npgsql.NpgsqlConnection)">
            <summary>
            Clears the connection pool. All idle physical connections in the pool of the given connection are
            immediately closed, and any busy connections which were opened before <see cref="M:Npgsql.NpgsqlConnection.ClearPool(Npgsql.NpgsqlConnection)"/> was called
            will be closed when returned to the pool.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ClearAllPools">
            <summary>
            Clear all connection pools. All idle physical connections in all pools are immediately closed, and any busy
            connections which were opened before <see cref="M:Npgsql.NpgsqlConnection.ClearAllPools"/> was called will be closed when returned
            to their pool.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.UnprepareAll">
            <summary>
            Unprepares all prepared statements on this connection.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ReloadTypes">
            <summary>
            Flushes the type cache for this connection's connection string and reloads the types for this connection only.
            Type changes will appear for other connections only after they are re-opened from the pool.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ReloadTypesAsync">
            <summary>
            Flushes the type cache for this connection's connection string and reloads the types for this connection only.
            Type changes will appear for other connections only after they are re-opened from the pool.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.Disposed">
            <summary>
            This event is unsupported by Npgsql. Use <see cref="E:System.Data.Common.DbConnection.StateChange"/> instead.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorBindingScope.None">
            <summary>
            The connection is currently not bound to a connector.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorBindingScope.Connection">
            <summary>
            The connection is bound to its connector for the scope of the entire connection
            (i.e. non-multiplexed connection).
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorBindingScope.Transaction">
            <summary>
            The connection is bound to its connector for the scope of a transaction.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorBindingScope.Copy">
            <summary>
            The connection is bound to its connector for the scope of a COPY operation.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorBindingScope.Reader">
            <summary>
            The connection is bound to its connector for the scope of a single reader.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorBindingScope.Temporary">
            <summary>
            The connection is bound to its connector for an unspecified, temporary scope; the code that initiated
            the binding is also responsible to unbind it.
            </summary>
        </member>
        <member name="T:Npgsql.NoticeEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Npgsql.NpgsqlConnection.Notice"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlNoticeEventArgs"/> that contains the notice information (e.g. message, severity...).</param>
        </member>
        <member name="T:Npgsql.NotificationEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Npgsql.NpgsqlConnection.Notification"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlNotificationEventArgs"/> that contains the notification payload.</param>
        </member>
        <member name="T:Npgsql.ProvideClientCertificatesCallback">
            <summary>
            Represents a method that allows the application to provide a certificate collection to be used for SSL client authentication
            </summary>
            <param name="certificates">
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> to be filled with one or more client
            certificates.
            </param>
        </member>
        <member name="T:Npgsql.ProvidePasswordCallback">
            <summary>
            Represents a method that allows the application to provide a password at connection time in code rather than configuration
            </summary>
            <param name="host">Hostname</param>
            <param name="port">Port</param>
            <param name="database">Database Name</param>
            <param name="username">User</param>
            <returns>A valid password for connecting to the database</returns>
        </member>
        <member name="T:Npgsql.NpgsqlConnectionStringBuilder">
            <summary>
            Provides a simple way to create and manage the contents of connection strings used by
            the <see cref="T:Npgsql.NpgsqlConnection"/> class.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnectionStringBuilder._dataSourceCached">
            <summary>
            Cached DataSource value to reduce allocations on NpgsqlConnection.DataSource.get
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the NpgsqlConnectionStringBuilder class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NpgsqlConnectionStringBuilder class, optionally using ODBC rules for quoting values.
            </summary>
            <param name="useOdbcRules">true to use {} to delimit fields; false to use quotation marks.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NpgsqlConnectionStringBuilder class and sets its <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString"/>.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlConnectionStringBuilder.GeneratedAction">
            <summary>
            GeneratedAction and GeneratedActions exist to be able to produce a streamlined binary footprint for NativeAOT.
            An idiomatic approach where each action has its own method would double the binary size of NpgsqlConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="keyword">The key of the item to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.
            </summary>
            <param name="item">The key-value pair to be added.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the DbConnectionStringBuilder instance.
            </summary>
            <param name="keyword">The key of the key/value pair to be removed from the connection string in this DbConnectionStringBuilder.</param>
            <returns><b>true</b> if the key existed within the connection string and was removed; <b>false</b> if the key did not exist.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the entry from the DbConnectionStringBuilder instance.
            </summary>
            <param name="item">The key/value pair to be removed from the connection string in this DbConnectionStringBuilder.</param>
            <returns><b>true</b> if the key existed within the connection string and was removed; <b>false</b> if the key did not exist.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/> contains a specific key.
            </summary>
            <param name="keyword">The key to locate in the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.</param>
            <returns><b>true</b> if the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/> contains an entry with the specified key; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/> contains a specific key-value pair.
            </summary>
            <param name="item">The item to locate in the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.</param>
            <returns><b>true</b> if the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/> contains the entry; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding to the supplied key from this <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.
            </summary>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to the key.</param>
            <returns><b>true</b> if keyword was found within the connection string, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Host">
            <summary>
            The hostname or IP address of the PostgreSQL server to connect to.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Port">
            <summary>
            The TCP/IP port of the PostgreSQL server.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Database">
            <summary>
             The PostgreSQL database to connect to.
             </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Username">
            <summary>
            The username to connect with.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Password">
            <summary>
            The password to connect with.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Passfile">
            <summary>
            Path to a PostgreSQL password file (PGPASSFILE), from which the password would be taken.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ApplicationName">
            <summary>
            The optional application name parameter to be sent to the backend during connection initiation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Enlist">
            <summary>
            Whether to enlist in an ambient TransactionScope.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SearchPath">
            <summary>
            Gets or sets the schema search path.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ClientEncoding">
            <summary>
            Gets or sets the client_encoding parameter.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Encoding">
            <summary>
            Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Timezone">
            <summary>
            Gets or sets the PostgreSQL session timezone, in Olson/IANA database format.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SslMode">
            <summary>
            Controls whether SSL is required, disabled or preferred, depending on server support.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SslCertificate">
            <summary>
            Location of a client certificate to be sent to the server.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SslKey">
            <summary>
            Location of a client key for a client certificate to be sent to the server.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SslPassword">
            <summary>
            Password for a key for a client certificate.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.RootCertificate">
            <summary>
            Location of a CA certificate used to validate the server certificate.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.CheckCertificateRevocation">
            <summary>
            Whether to check the certificate revocation list during authentication.
            False by default.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.KerberosServiceName">
            <summary>
            The Kerberos service name to be used for authentication.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.IncludeRealm">
            <summary>
            The Kerberos realm to be used for authentication.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.PersistSecurityInfo">
            <summary>
            Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.LogParameters">
            <summary>
            When enabled, parameter values are logged when commands are executed. Defaults to false.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetail">
            <summary>
            When enabled, PostgreSQL error details are included on <see cref="P:Npgsql.PostgresException.Detail" /> and
            <see cref="P:Npgsql.PostgresNotice.Detail" />. These can contain sensitive data.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ChannelBinding">
            <summary>
            Controls whether channel binding is required, disabled or preferred, depending on server support.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Pooling">
            <summary>
            Whether connection pooling should be used.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.MinPoolSize">
            <summary>
            The minimum connection pool size.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.MaxPoolSize">
            <summary>
            The maximum connection pool size.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ConnectionIdleLifetime">
            <summary>
            The time to wait before closing idle connections in the pool if the count
            of all connections exceeds MinPoolSize.
            </summary>
            <value>The time (in seconds) to wait. The default value is 300.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ConnectionPruningInterval">
            <summary>
            How many seconds the pool waits before attempting to prune idle connections that are beyond
            idle lifetime (<see cref="P:Npgsql.NpgsqlConnectionStringBuilder.ConnectionIdleLifetime"/>.
            </summary>
            <value>The interval (in seconds). The default value is 10.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ConnectionLifetime">
            <summary>
            The total maximum lifetime of connections (in seconds). Connections which have exceeded this value will be
            destroyed instead of returned from the pool. This is useful in clustered configurations to force load
            balancing between a running server and a server just brought online.
            </summary>
            <value>The time (in seconds) to wait, or 0 to to make connections last indefinitely (the default).</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Timeout">
            <summary>
            The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error.
            Defaults to 15 seconds.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.CommandTimeout">
            <summary>
            The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error.
            Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.CancellationTimeout">
            <summary>
            The time to wait (in milliseconds) while trying to read a response for a cancellation request for a timed out or cancelled query, before terminating the attempt and generating an error.
            Zero for infinity, -1 to skip the wait.
            Defaults to 2000 milliseconds.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes">
            <summary>
            Determines the preferred PostgreSQL target server type.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts">
            <summary>
            Enables balancing between multiple hosts by round-robin.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds">
            <summary>
            Controls for how long the host's cached state will be considered as valid.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.KeepAlive">
            <summary>
            The number of seconds of connection inactivity before Npgsql sends a keepalive query.
            Set to 0 (the default) to disable.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAlive">
            <summary>
            Whether to use TCP keepalive with system defaults if overrides isn't specified.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveTime">
            <summary>
            The number of seconds of connection inactivity before a TCP keepalive query is sent.
            Use of this option is discouraged, use <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.KeepAlive"/> instead if possible.
            Set to 0 (the default) to disable.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveInterval">
            <summary>
            The interval, in seconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            Defaults to the value of <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveTime"/>. <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.TcpKeepAliveTime"/> must be non-zero as well.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ReadBufferSize">
            <summary>
            Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.WriteBufferSize">
            <summary>
            Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SocketReceiveBufferSize">
            <summary>
            Determines the size of socket read buffer.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SocketSendBufferSize">
            <summary>
            Determines the size of socket send buffer.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.MaxAutoPrepare">
            <summary>
            The maximum number SQL statements that can be automatically prepared at any given point.
            Beyond this number the least-recently-used statement will be recycled.
            Zero (the default) disables automatic preparation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.AutoPrepareMinUsages">
            <summary>
            The minimum number of usages an SQL statement is used before it's automatically prepared.
            Defaults to 5.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.NoResetOnClose">
            <summary>
            If set to true, a pool connection's state won't be reset when it is closed (improves performance).
            Do not specify this unless you know what you're doing.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.LoadTableComposites">
            <summary>
            Load table composite type definitions, and not just free-standing composite types.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ReplicationMode">
            <summary>
            Set the replication mode of the connection
            </summary>
            <remarks>
            This property and its corresponding enum are intentionally kept internal as they
            should not be set by users or even be visible in their connection strings.
            Replication connections are a special kind of connection that is encapsulated in
            <see cref="T:Npgsql.Replication.PhysicalReplicationConnection"/>
            and <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/>.
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Options">
            <summary>
            Set PostgreSQL configuration parameter default values for the connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode">
            <summary>
            Configure the way arrays of value types are returned when requested as object instances.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Multiplexing">
            <summary>
            Enables multiplexing, which allows more efficient use of connections.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingBufferThresholdBytes">
            <summary>
            When multiplexing is enabled, determines the maximum number of outgoing bytes to buffer before
            flushing to the network.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ServerCompatibilityMode">
            <summary>
            A compatibility mode for special PostgreSQL server types.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.TrustServerCertificate">
            <summary>
            Whether to trust the server certificate without validating it.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.InternalCommandTimeout">
            <summary>
            The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.GetHashCode">
            <summary>
            Hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/> to an Array, starting at a particular Array index.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements copied from <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.
            The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.NpgsqlConnectionStringPropertyAttribute">
            <summary>
            Marks on <see cref="T:Npgsql.NpgsqlConnectionStringBuilder"/> which participate in the connection
            string. Optionally holds a set of synonyms for the property.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringPropertyAttribute.Synonyms">
            <summary>
            Holds a list of synonyms for the property.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringPropertyAttribute.#ctor">
            <summary>
            Creates a <see cref="T:Npgsql.NpgsqlConnectionStringPropertyAttribute"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringPropertyAttribute.#ctor(System.String[])">
            <summary>
            Creates a <see cref="T:Npgsql.NpgsqlConnectionStringPropertyAttribute"/>.
            </summary>
        </member>
        <member name="T:Npgsql.ServerCompatibilityMode">
            <summary>
            An option specified in the connection string that activates special compatibility features.
            </summary>
        </member>
        <member name="F:Npgsql.ServerCompatibilityMode.None">
            <summary>
            No special server compatibility mode is active
            </summary>
        </member>
        <member name="F:Npgsql.ServerCompatibilityMode.Redshift">
            <summary>
            The server is an Amazon Redshift instance.
            </summary>
        </member>
        <member name="F:Npgsql.ServerCompatibilityMode.NoTypeLoading">
            <summary>
            The server is doesn't support full type loading from the PostgreSQL catalogs, support the basic set
            of types via information hardcoded inside Npgsql.
            </summary>
        </member>
        <member name="T:Npgsql.SslMode">
            <summary>
            Specifies how to manage SSL.
            </summary>
        </member>
        <member name="F:Npgsql.SslMode.Disable">
            <summary>
            SSL is disabled. If the server requires SSL, the connection will fail.
            </summary>
        </member>
        <member name="F:Npgsql.SslMode.Allow">
            <summary>
            Prefer non-SSL connections if the server allows them, but allow SSL connections.
            </summary>
        </member>
        <member name="F:Npgsql.SslMode.Prefer">
            <summary>
            Prefer SSL connections if the server allows them, but allow connections without SSL.
            </summary>
        </member>
        <member name="F:Npgsql.SslMode.Require">
            <summary>
            Fail the connection if the server doesn't support SSL.
            </summary>
        </member>
        <member name="F:Npgsql.SslMode.VerifyCA">
            <summary>
            Fail the connection if the server doesn't support SSL. Also verifies server certificate.
            </summary>
        </member>
        <member name="F:Npgsql.SslMode.VerifyFull">
            <summary>
            Fail the connection if the server doesn't support SSL. Also verifies server certificate with host's name.
            </summary>
        </member>
        <member name="T:Npgsql.ChannelBinding">
            <summary>
            Specifies how to manage channel binding.
            </summary>
        </member>
        <member name="F:Npgsql.ChannelBinding.Disable">
            <summary>
            Channel binding is disabled. If the server requires channel binding, the connection will fail.
            </summary>
        </member>
        <member name="F:Npgsql.ChannelBinding.Prefer">
            <summary>
            Prefer channel binding if the server allows it, but connect without it if not.
            </summary>
        </member>
        <member name="F:Npgsql.ChannelBinding.Require">
            <summary>
            Fail the connection if the server doesn't support channel binding.
            </summary>
        </member>
        <member name="T:Npgsql.ArrayNullabilityMode">
            <summary>
            Specifies how the mapping of arrays of
            <a href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/value-types">value types</a>
            behaves with respect to nullability when they are requested via an API returning an <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:Npgsql.ArrayNullabilityMode.Never">
            <summary>
            Arrays of value types are always returned as non-nullable arrays (e.g. <c>int[]</c>).
            If the PostgreSQL array contains a NULL value, an exception is thrown. This is the default mode.
            </summary>
        </member>
        <member name="F:Npgsql.ArrayNullabilityMode.Always">
            <summary>
            Arrays of value types are always returned as nullable arrays (e.g. <c>int?[]</c>).
            </summary>
        </member>
        <member name="F:Npgsql.ArrayNullabilityMode.PerInstance">
            <summary>
            The type of array that gets returned is determined at runtime.
            Arrays of value types are returned as non-nullable arrays (e.g. <c>int[]</c>)
            if the actual instance that gets returned doesn't contain null values
            and as nullable arrays (e.g. <c>int?[]</c>) if it does.
            </summary>
            <remarks>When using this setting, make sure that your code is prepared to the fact
            that the actual type of array instances returned from APIs like <see cref="M:Npgsql.NpgsqlDataReader.GetValue(System.Int32)"/>
            may change on a row by row base.</remarks>
        </member>
        <member name="T:Npgsql.ReplicationMode">
            <summary>
            Specifies whether the connection shall be initialized as a physical or
            logical replication connection
            </summary>
            <remarks>
            This enum and its corresponding property are intentionally kept internal as they
            should not be set by users or even be visible in their connection strings.
            Replication connections are a special kind of connection that is encapsulated in
            <see cref="T:Npgsql.Replication.PhysicalReplicationConnection"/>
            and <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/>.
            </remarks>
        </member>
        <member name="F:Npgsql.ReplicationMode.Off">
            <summary>
            Replication disabled. This is the default
            </summary>
        </member>
        <member name="F:Npgsql.ReplicationMode.Physical">
            <summary>
            Physical replication enabled
            </summary>
        </member>
        <member name="F:Npgsql.ReplicationMode.Logical">
            <summary>
            Logical replication enabled
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlRowUpdatedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdated"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Npgsql.NpgsqlRowUpdatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NpgsqlRowUpdatingEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdating"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Npgsql.NpgsqlRowUpdatingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NpgsqlDataAdapter">
            <summary>
            This class represents an adapter from many commands: select, update, insert and delete to fill a <see cref="T:System.Data.DataSet"/>.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlDataAdapter.RowUpdated">
            <summary>
            Row updated event.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlDataAdapter.RowUpdating">
            <summary>
            Row updating event.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor(Npgsql.NpgsqlCommand)">
            <summary>
            Constructor.
            </summary>
            <param name="selectCommand"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor(System.String,Npgsql.NpgsqlConnection)">
            <summary>
            Constructor.
            </summary>
            <param name="selectCommandText"></param>
            <param name="selectConnection"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="selectCommandText"></param>
            <param name="selectConnectionString"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Create row updated event.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Create row updating event.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raise the RowUpdated event.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raise the RowUpdating event.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.DeleteCommand">
            <summary>
            Delete command.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.SelectCommand">
            <summary>
            Select command.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.UpdateCommand">
            <summary>
            Update command.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.InsertCommand">
            <summary>
            Insert command.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlDataReader">
            <summary>
            Reads a forward-only stream of rows from a data source.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._behavior">
            <summary>
            The behavior of the command with which this reader was executed.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._sendTask">
            <summary>
            In multiplexing, this is <see langword="null" /> as the sending is managed in the write multiplexing loop,
            and does not need to be awaited by the reader.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._statements">
            <summary>
            Holds the list of statements being executed by this reader.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.StatementIndex">
            <summary>
            The index of the current query resultset we're processing (within a multiquery)
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._columns">
            <summary>
            Records, for each column, its starting offset and length in the current row.
            Used only in non-sequential mode.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._column">
            <summary>
            The index of the column that we're on, i.e. that has already been parsed, is
            is memory and can be retrieved. Initialized to -1, which means we're on the column
            count (which comes before the first column).
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._dataMsgEnd">
            <summary>
            The position in the buffer at which the current data row message ends.
            Used only when the row is consumed non-sequentially.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._canConsumeRowNonSequentially">
            <summary>
            Determines, if we can consume the row non-sequentially.
            Mostly useful for a sequential mode, when the row is already in the buffer.
            Should always be true for the non-sequential mode.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader.RowDescription">
            <summary>
            The RowDescription message for the current resultset being processed
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.ColumnInfoCache">
            <summary>
            Stores the last converter info resolved by column, to speed up repeated reading.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._hasRows">
            <summary>
            Whether the current result set has rows
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlDataReader.ReaderClosed">
            <summary>
            Is raised whenever Close() is called.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Read">
            <summary>
            Advances the reader to the next record in a result set.
            </summary>
            <returns><b>true</b> if there are more rows; otherwise <b>false</b>.</returns>
            <remarks>
            The default position of a data reader is before the first record. Therefore, you must call Read to begin accessing data.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            This is the asynchronous version of <see cref="M:Npgsql.NpgsqlDataReader.Read"/>
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.NextResult">
            <summary>
            Advances the reader to the next result when reading the results of a batch of statements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.NextResultAsync(System.Threading.CancellationToken)">
            <summary>
            This is the asynchronous version of NextResult.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.NextResult(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Internal implementation of NextResult
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.NextResultSchemaOnly(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Note that in SchemaOnly mode there are no resultsets, and we read nothing from the backend (all
            RowDescriptions have already been processed and are available)
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.  Always returns zero.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <value>
            The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed.
            </value>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Rows">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <value>
            The number of rows changed, inserted, or deleted. 0 for SELECT statements, if no rows were affected or the statement failed.
            </value>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Statements">
             <summary>
             Returns details about each statement that this reader will or has executed.
             </summary>
             <remarks>
             Note that some fields (i.e. rows and oid) are only populated as the reader
             traverses the result.
            
             For commands with multiple queries, this exposes the number of rows affected on
             a statement-by-statement basis, unlike <see cref="P:Npgsql.NpgsqlDataReader.RecordsAffected"/>
             which exposes an aggregation across all statements.
             </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.HasRows">
            <summary>
            Gets a value that indicates whether this DbDataReader contains one or more rows.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.IsOnRow">
            <summary>
            Indicates whether the reader is currently positioned on a row, i.e. whether reading a
            column is possible.
            This property is different from <see cref="P:Npgsql.NpgsqlDataReader.HasRows"/> in that <see cref="P:Npgsql.NpgsqlDataReader.HasRows"/> will
            return true even if attempting to read a column will fail, e.g. before <see cref="M:Npgsql.NpgsqlDataReader.Read"/>
            has been called
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column, given the zero-based column ordinal.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The name of the specified column.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Consume(System.Boolean,System.Exception)">
            <summary>
            Consumes all result sets for this reader, leaving the connector ready for sending and processing further
            queries
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Npgsql.NpgsqlDataReader"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.DisposeAsync">
            <summary>
            Releases the resources used by the <see cref="T:Npgsql.NpgsqlDataReader"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Close">
            <summary>
            Closes the <see cref="T:Npgsql.NpgsqlDataReader"/> reader, allowing a new command to be executed.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.CloseAsync">
            <summary>
            Closes the <see cref="T:Npgsql.NpgsqlDataReader"/> reader, allowing a new command to be executed.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.String"/>.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current row.
            </summary>
            <param name="values">An array of Object into which to copy the attribute columns.</param>
            <returns>The number of instances of <see cref="T:System.Object"/> in the array.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetTimeSpan(System.Int32)">
            <summary>
            Gets the value of the specified column as a TimeSpan,
            </summary>
            <remarks>
            PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from
            -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds
            and ranges from roughly -29247 to 29247 years.
            See https://www.postgresql.org/docs/current/static/datatype-datetime.html
            </remarks>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDbDataReader(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetData(System.Int32)">
            <summary>
            Returns a nested data reader for the requested column.
            The column type must be a record or a to Npgsql known composite type, or an array thereof.
            Currently only supported in non-sequential mode.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>A data reader.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetStream(System.Int32)">
            <summary>
            Retrieves data as a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The returned object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetStreamAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves data as a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The returned object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetTextReader(System.Int32)">
            <summary>
            Retrieves data as a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The returned object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetTextReaderAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves data as a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The returned object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the value of the specified column as a type.
            </summary>
            <typeparam name="T">The type of the value to be returned.</typeparam>
            <param name="ordinal">The type of the value to be returned.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFieldValue``1(System.Int32)">
            <summary>
            Synchronously gets the value of the specified column as a type.
            </summary>
            <typeparam name="T">Synchronously gets the value of the specified column as a type.</typeparam>
            <param name="ordinal">The column to be retrieved.</param>
            <returns>The column to be retrieved.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns><b>true</b> if the specified column is equivalent to <see cref="T:System.DBNull"/>; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            An asynchronous version of <see cref="M:Npgsql.NpgsqlDataReader.IsDBNull(System.Int32)"/>, which gets a value that indicates whether the column contains non-existent or missing values.
            The <paramref name="cancellationToken"/> parameter is currently ignored.
            </summary>
            <param name="ordinal">The zero-based column to be retrieved.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns><b>true</b> if the specified column value is equivalent to <see cref="T:System.DBNull"/> otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetPostgresType(System.Int32)">
            <summary>
            Gets a representation of the PostgreSQL data type for the specified field.
            The returned representation can be used to access various information about the field.
            </summary>
            <param name="ordinal">The zero-based column index.</param>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            This is the PostgreSQL type name (e.g. double precision), not the .NET type
            (see <see cref="M:Npgsql.NpgsqlDataReader.GetFieldType(System.Int32)"/> for that).
            </summary>
            <param name="ordinal">The zero-based column index.</param>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDataTypeOID(System.Int32)">
            <summary>
            Gets the OID for the PostgreSQL type for the specified field, as it appears in the pg_type table.
            </summary>
            <remarks>
            This is a PostgreSQL-internal value that should not be relied upon and should only be used for
            debugging purposes.
            </remarks>
            <param name="ordinal">The zero-based column index.</param>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the data type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The data type of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the rows in the data reader.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the rows in the data reader.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetColumnSchema">
            <summary>
            Returns schema information for the columns in the current resultset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetColumnSchemaAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns schema information for the columns in the current resultset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetSchemaTable">
            <summary>
            Returns a System.Data.DataTable that describes the column metadata of the DataReader.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetSchemaTableAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns a System.Data.DataTable that describes the column metadata of the DataReader.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.SeekToColumn(System.Boolean,System.Int32,Npgsql.Internal.DataFormat,System.Boolean)">
            <summary>
            Seeks to the given column. The 4-byte length is read and returned.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetField(System.Int32)">
            <summary>
            Checks that we have a RowDescription, but not necessary an actual resultset
            (for operations which work in SchemaOnly mode.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.UnbindIfNecessary">
            <summary>
            Unbinds reader from the connector.
            Should be called before the connector is returned to the pool.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlDataSource">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlDataSource.ConnectionString">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlDataSource.Settings">
            <summary>
            Contains the connection string returned to the user from <see cref="P:Npgsql.NpgsqlConnection.ConnectionString"/>
            after the connection has been opened. Does not contain the password unless Persist Security Info=true.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataSource.DatabaseInfo">
            <summary>
            Information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...).
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataSource._setupMappingsSemaphore">
            <summary>
            Semaphore to ensure we don't perform type loading and mapping setup concurrently for this data source.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.CreateConnection">
            <inheritdoc cref="M:System.Data.Common.DbDataSource.CreateConnection" />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.OpenConnection">
            <inheritdoc cref="M:System.Data.Common.DbDataSource.OpenConnection" />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.OpenDbConnection">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.OpenConnectionAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbDataSource.OpenConnectionAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.OpenDbConnectionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.CreateDbConnection">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.CreateDbCommand(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.CreateDbBatch">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.CreateCommand(System.String)">
            <summary>
            Creates a command ready for use against this <see cref="T:Npgsql.NpgsqlDataSource" />.
            </summary>
            <param name="commandText">An optional SQL for the command.</param>
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.CreateBatch">
            <summary>
            Creates a batch ready for use against this <see cref="T:Npgsql.NpgsqlDataSource" />.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Npgsql.NpgsqlDataSource" /> for the given <paramref name="connectionString" />.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.Create(Npgsql.NpgsqlConnectionStringBuilder)">
            <summary>
            Creates a new <see cref="T:Npgsql.NpgsqlDataSource" /> for the given <paramref name="connectionStringBuilder" />.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataSource.Password">
            <summary>
            Manually sets the password to be used the next time a physical connection is opened.
            Consider using <see cref="M:Npgsql.NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider(System.Func{Npgsql.NpgsqlConnectionStringBuilder,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.String}},System.TimeSpan,System.TimeSpan)" /> instead.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.DisposeBase">
            <inheritdoc cref="M:Npgsql.NpgsqlDataSource.Dispose(System.Boolean)" />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.DisposeAsyncCore">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSource.DisposeAsyncBase">
            <inheritdoc cref="M:Npgsql.NpgsqlDataSource.DisposeAsyncCore" />
        </member>
        <member name="T:Npgsql.NpgsqlDataSourceBuilder">
            <summary>
            Provides a simple API for configuring and creating an <see cref="T:Npgsql.NpgsqlDataSource" />, from which database connections can be obtained.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataSourceBuilder.Name">
            <summary>
            A diagnostics name used by Npgsql when generating tracing, logging and metrics.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataSourceBuilder.DefaultNameTranslator">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlDataSourceBuilder.ConnectionStringBuilder">
            <summary>
            A connection string builder that can be used to configured the connection string on the builder.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataSourceBuilder.ConnectionString">
            <summary>
            Returns the connection string, as currently configured on the builder.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Npgsql.NpgsqlDataSourceBuilder" />, optionally starting out from the given <paramref name="connectionString"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Sets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> that will be used for logging.
            </summary>
            <param name="loggerFactory">The logger factory to be used.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.EnableParameterLogging(System.Boolean)">
            <summary>
            Enables parameters to be included in logging. This includes potentially sensitive information from data sent to PostgreSQL.
            You should only enable this flag in development, or if you have the appropriate security measures in place based on the
            sensitivity of this data.
            </summary>
            <param name="parameterLoggingEnabled">If <see langword="true" />, then sensitive data is logged.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.ConfigureJsonOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Configures the JSON serializer options used when reading and writing all System.Text.Json data.
            </summary>
            <param name="serializerOptions">Options to customize JSON serialization and deserialization.</param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.EnableDynamicJson(System.Type[],System.Type[])">
            <summary>
            Sets up dynamic System.Text.Json mappings. This allows mapping arbitrary .NET types to PostgreSQL <c>json</c> and <c>jsonb</c>
            types, as well as <see cref="T:System.Text.Json.Nodes.JsonNode" /> and its derived types.
            </summary>
            <param name="jsonbClrTypes">
            A list of CLR types to map to PostgreSQL <c>jsonb</c> (no need to specify <see cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb" />).
            </param>
            <param name="jsonClrTypes">
            A list of CLR types to map to PostgreSQL <c>json</c> (no need to specify <see cref="F:NpgsqlTypes.NpgsqlDbType.Json" />).
            </param>
            <remarks>
            Due to the dynamic nature of these mappings, they are not compatible with NativeAOT or trimming.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.EnableRecordsAsTuples">
            <summary>
            Sets up mappings for the PostgreSQL <c>record</c> type as a .NET <see cref="T:System.ValueTuple" /> or <see cref="T:System.Tuple" />.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.EnableUnmappedTypes">
            <summary>
            Sets up mappings allowing the use of unmapped enum, range and multirange types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UseUserCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an
            advanced API, consider using <see cref="F:Npgsql.SslMode.VerifyFull" /> or <see cref="F:Npgsql.SslMode.VerifyCA" /> instead.
            </summary>
            <param name="userCertificateValidationCallback">The callback containing custom callback verification logic.</param>
            <remarks>
            <para>
            Cannot be used in conjunction with <see cref="F:Npgsql.SslMode.Disable" />, <see cref="F:Npgsql.SslMode.VerifyCA" /> or
            <see cref="F:Npgsql.SslMode.VerifyFull" />.
            </para>
            <para>
            See <see href="https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx"/>.
            </para>
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Specifies an SSL/TLS certificate which Npgsql will send to PostgreSQL for certificate-based authentication.
            </summary>
            <param name="clientCertificate">The client certificate to be sent to PostgreSQL when opening a connection.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Specifies a collection of SSL/TLS certificates which Npgsql will send to PostgreSQL for certificate-based authentication.
            </summary>
            <param name="clientCertificates">The client certificate collection to be sent to PostgreSQL when opening a connection.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificatesCallback(System.Action{System.Security.Cryptography.X509Certificates.X509CertificateCollection})">
            <summary>
            Specifies a callback to modify the collection of SSL/TLS client certificates which Npgsql will send to PostgreSQL for
            certificate-based authentication. This is an advanced API, consider using <see cref="M:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)" /> or
            <see cref="M:Npgsql.NpgsqlDataSourceBuilder.UseClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" /> instead.
            </summary>
            <param name="clientCertificatesCallback">The callback to modify the client certificate collection.</param>
            <remarks>
            <para>
            The callback is invoked every time a physical connection is opened, and is therefore suitable for rotating short-lived client
            certificates. Simply make sure the certificate collection argument has the up-to-date certificate(s).
            </para>
            <para>
            The callback's collection argument already includes any client certificates specified via the connection string or environment
            variables.
            </para>
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UseRootCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Sets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that will be used validate SSL certificate, received from the server.
            </summary>
            <param name="rootCertificate">The CA certificate.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UseRootCertificateCallback(System.Func{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Specifies a callback that will be used to validate SSL certificate, received from the server.
            </summary>
            <param name="rootCertificateCallback">The callback to get CA certificate.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
            <remarks>
            This overload, which accepts a callback, is suitable for scenarios where the certificate rotates
            and might change during the lifetime of the application.
            When that's not the case, use the overload which directly accepts the certificate.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider(System.Func{Npgsql.NpgsqlConnectionStringBuilder,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.String}},System.TimeSpan,System.TimeSpan)">
            <summary>
            Configures a periodic password provider, which is automatically called by the data source at some regular interval. This is the
            recommended way to fetch a rotating access token.
            </summary>
            <param name="passwordProvider">A callback which returns the password to be sent to PostgreSQL.</param>
            <param name="successRefreshInterval">How long to cache the password before re-invoking the callback.</param>
            <param name="failureRefreshInterval">
            If a password refresh attempt fails, it will be re-attempted with this interval.
            This should typically be much lower than <paramref name="successRefreshInterval" />.
            </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
            <remarks>
            <para>
            The provided callback is invoked in a timer, and not when opening connections. It therefore doesn't affect opening time.
            </para>
            <para>
            The provided cancellation token is only triggered when the entire data source is disposed. If you'd like to apply a timeout to the
            token fetching, do so within the provided callback.
            </para>
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UsePasswordProvider(System.Func{Npgsql.NpgsqlConnectionStringBuilder,System.String},System.Func{Npgsql.NpgsqlConnectionStringBuilder,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.String}})">
            <summary>
            Configures a password provider, which is called by the data source when opening connections.
            </summary>
            <param name="passwordProvider">
            A callback that may be invoked during <see cref="M:Npgsql.NpgsqlConnection.Open" /> which returns the password to be sent to PostgreSQL.
            </param>
            <param name="passwordProviderAsync">
            A callback that may be invoked during <see cref="M:Npgsql.NpgsqlConnection.OpenAsync(System.Threading.CancellationToken)" /> which returns the password to be sent to PostgreSQL.
            </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
            <remarks>
            <para>
            The provided callback is invoked when opening connections. Therefore its important the callback internally depends on cached
            data or returns quickly otherwise. Any unnecessary delay will affect connection opening time.
            </para>
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.AddTypeInfoResolverFactory(Npgsql.Internal.PgTypeInfoResolverFactory)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.Npgsql#TypeMapping#INpgsqlTypeMapper#Reset">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.MapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UnmapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.MapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UnmapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.MapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.MapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UnmapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UnmapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.UsePhysicalConnectionInitializer(System.Action{Npgsql.NpgsqlConnection},System.Func{Npgsql.NpgsqlConnection,System.Threading.Tasks.Task})">
            <summary>
            Register a connection initializer, which allows executing arbitrary commands when a physical database connection is first opened.
            </summary>
            <param name="connectionInitializer">
            A synchronous connection initialization lambda, which will be called from <see cref="M:Npgsql.NpgsqlConnection.Open" /> when a new physical
            connection is opened.
            </param>
            <param name="connectionInitializerAsync">
            An asynchronous connection initialization lambda, which will be called from
            <see cref="M:Npgsql.NpgsqlConnection.OpenAsync(System.Threading.CancellationToken)" /> when a new physical connection is opened.
            </param>
            <remarks>
            If an initializer is registered, both sync and async versions must be provided. If you do not use sync APIs in your code, simply
            throw <see cref="T:System.NotSupportedException" />, which would also catch accidental cases of sync opening.
            </remarks>
            <remarks>
            Take care that the setting you apply in the initializer does not get reverted when the connection is returned to the pool, since
            Npgsql sends <c>DISCARD ALL</c> by default. The <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.NoResetOnClose" /> option can be used to
            turn this off.
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.Build">
            <summary>
            Builds and returns an <see cref="T:Npgsql.NpgsqlDataSource" /> which is ready for use.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataSourceBuilder.BuildMultiHost">
            <summary>
            Builds and returns a <see cref="T:Npgsql.NpgsqlMultiHostDataSource" /> which is ready for use for load-balancing and failover scenarios.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlException">
            <summary>
            The exception that is thrown when server-related issues occur.
            </summary>
            <remarks>
            PostgreSQL errors (e.g. query SQL issues, constraint violations) are raised via
            <see cref="T:Npgsql.PostgresException"/> which is a subclass of this class.
            Purely Npgsql-related issues which aren't related to the server will be raised
            via the standard CLR exceptions (e.g. ArgumentException).
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlException"/> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<string>Nothing</string> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Npgsql.NpgsqlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Npgsql.NpgsqlException.IsTransient">
            <summary>
            Specifies whether the exception is considered transient, that is, whether retrying the operation could
            succeed (e.g. a network error or a timeout).
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.BatchCommand">
            <summary>
            If the exception was thrown as a result of executing a <see cref="T:System.Data.Common.DbBatch"/>, references the <see cref="T:System.Data.Common.DbBatchCommand"/> within
            the batch which triggered the exception. Otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlException"/> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Npgsql.NpgsqlFactory">
            <summary>
            A factory to create instances of various Npgsql objects.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlFactory.Instance">
            <summary>
            Gets an instance of the <see cref="T:Npgsql.NpgsqlFactory"/>.
            This can be used to retrieve strongly typed data objects.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.CreateCommand">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbCommand"/> instance.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.CreateConnection">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbConnection"/> instance.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.CreateParameter">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbParameter"/> instance.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.CreateConnectionStringBuilder">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.CreateCommandBuilder">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbCommandBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.CreateDataAdapter">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbDataAdapter"/> instance.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlFactory.CanCreateDataAdapter">
            <summary>
            Specifies whether the specific <see cref="T:System.Data.Common.DbProviderFactory"/> supports the <see cref="T:System.Data.Common.DbDataAdapter"/> class.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlFactory.CanCreateCommandBuilder">
            <summary>
            Specifies whether the specific <see cref="T:System.Data.Common.DbProviderFactory"/> supports the <see cref="T:System.Data.Common.DbCommandBuilder"/> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType, or null if there is no service object of type serviceType.</returns>
        </member>
        <member name="T:Npgsql.NpgsqlLargeObjectManager">
            <summary>
            Large object manager. This class can be used to store very large files in a PostgreSQL database.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectManager.MaxTransferBlockSize">
            <summary>
            The largest chunk size (in bytes) read and write operations will read/write each roundtrip to the network. Default 4 MB.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.#ctor(Npgsql.NpgsqlConnection)">
            <summary>
            Creates an NpgsqlLargeObjectManager for this connection. The connection must be opened to perform remote operations.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.ExecuteFunction``1(System.Boolean,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Execute a function
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.ExecuteFunctionGetBytes(System.Boolean,System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Execute a function that returns a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.Create(System.UInt32)">
            <summary>
            Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown.
            </summary>
            <param name="preferredOid">A preferred oid, or specify 0 if one should be automatically assigned</param>
            <returns>The oid for the large object created</returns>
            <exception cref="T:Npgsql.PostgresException">If an oid is already in use</exception>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.CreateAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown.
            </summary>
            <param name="preferredOid">A preferred oid, or specify 0 if one should be automatically assigned</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The oid for the large object created</returns>
            <exception cref="T:Npgsql.PostgresException">If an oid is already in use</exception>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.OpenRead(System.UInt32)">
            <summary>
            Opens a large object on the backend, returning a stream controlling this remote object.
            A transaction snapshot is taken by the backend when the object is opened with only read permissions.
            When reading from this object, the contents reflects the time when the snapshot was taken.
            Note that this method, as well as operations on the stream must be wrapped inside a transaction.
            </summary>
            <param name="oid">Oid of the object</param>
            <returns>An NpgsqlLargeObjectStream</returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.OpenReadAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Opens a large object on the backend, returning a stream controlling this remote object.
            A transaction snapshot is taken by the backend when the object is opened with only read permissions.
            When reading from this object, the contents reflects the time when the snapshot was taken.
            Note that this method, as well as operations on the stream must be wrapped inside a transaction.
            </summary>
            <param name="oid">Oid of the object</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>An NpgsqlLargeObjectStream</returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.OpenReadWrite(System.UInt32)">
            <summary>
            Opens a large object on the backend, returning a stream controlling this remote object.
            Note that this method, as well as operations on the stream must be wrapped inside a transaction.
            </summary>
            <param name="oid">Oid of the object</param>
            <returns>An NpgsqlLargeObjectStream</returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.OpenReadWriteAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Opens a large object on the backend, returning a stream controlling this remote object.
            Note that this method, as well as operations on the stream must be wrapped inside a transaction.
            </summary>
            <param name="oid">Oid of the object</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>An NpgsqlLargeObjectStream</returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.Unlink(System.UInt32)">
            <summary>
            Deletes a large object on the backend.
            </summary>
            <param name="oid">Oid of the object to delete</param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.UnlinkAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes a large object on the backend.
            </summary>
            <param name="oid">Oid of the object to delete</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.ExportRemote(System.UInt32,System.String)">
            <summary>
            Exports a large object stored in the database to a file on the backend. This requires superuser permissions.
            </summary>
            <param name="oid">Oid of the object to export</param>
            <param name="path">Path to write the file on the backend</param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.ExportRemoteAsync(System.UInt32,System.String,System.Threading.CancellationToken)">
            <summary>
            Exports a large object stored in the database to a file on the backend. This requires superuser permissions.
            </summary>
            <param name="oid">Oid of the object to export</param>
            <param name="path">Path to write the file on the backend</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.ImportRemote(System.String,System.UInt32)">
            <summary>
            Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions.
            </summary>
            <param name="path">Path to read the file on the backend</param>
            <param name="oid">A preferred oid, or specify 0 if one should be automatically assigned</param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectManager.ImportRemoteAsync(System.String,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions.
            </summary>
            <param name="path">Path to read the file on the backend</param>
            <param name="oid">A preferred oid, or specify 0 if one should be automatically assigned</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectManager.Has64BitSupport">
            <summary>
            Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB.
            This property returns true whether the PostgreSQL version is >= 9.3.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlLargeObjectStream">
            <summary>
            An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server.
            Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectStream.Has64BitSupport">
            <summary>
            Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB.
            This property returns true whether the PostgreSQL version is >= 9.3.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads <i>count</i> bytes from the large object. The only case when fewer bytes are read is when end of stream is reached.
            </summary>
            <param name="buffer">The buffer where read data should be stored.</param>
            <param name="offset">The offset in the buffer where the first byte should be read.</param>
            <param name="count">The maximum number of bytes that should be read.</param>
            <returns>How many bytes actually read, or 0 if end of file was already reached.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads <i>count</i> bytes from the large object. The only case when fewer bytes are read is when end of stream is reached.
            </summary>
            <param name="buffer">The buffer where read data should be stored.</param>
            <param name="offset">The offset in the buffer where the first byte should be read.</param>
            <param name="count">The maximum number of bytes that should be read.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>How many bytes actually read, or 0 if end of file was already reached.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes <i>count</i> bytes to the large object.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The offset in the buffer at which to begin copying bytes.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes <i>count</i> bytes to the large object.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The offset in the buffer at which to begin copying bytes.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectStream.CanTimeout">
            <summary>
            CanTimeout always returns false.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectStream.CanRead">
            <summary>
            CanRead always returns true, unless the stream has been closed.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectStream.CanWrite">
            <summary>
            CanWrite returns true if the stream was opened with write permissions, and the stream has not been closed.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectStream.CanSeek">
            <summary>
            CanSeek always returns true, unless the stream has been closed.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectStream.Position">
            <summary>
            Returns the current position in the stream. Getting the current position does not need a round-trip to the server, however setting the current position does.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLargeObjectStream.Length">
            <summary>
            Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.GetLengthAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks in the stream to the specified position. This requires a round-trip to the backend.
            </summary>
            <param name="offset">A byte offset relative to the <i>origin</i> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.SeekAsync(System.Int64,System.IO.SeekOrigin,System.Threading.CancellationToken)">
            <summary>
            Seeks in the stream to the specified position. This requires a round-trip to the backend.
            </summary>
            <param name="offset">A byte offset relative to the <i>origin</i> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.Flush">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.SetLength(System.Int64)">
            <summary>
            Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes.
            For PostgreSQL versions earlier than 9.3, the value must fit in an Int32.
            </summary>
            <param name="value">Number of bytes to either truncate or enlarge the large object.</param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.SetLength(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes.
            For PostgreSQL versions earlier than 9.3, the value must fit in an Int32.
            </summary>
            <param name="value">Number of bytes to either truncate or enlarge the large object.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.Close">
            <summary>
            Releases resources at the backend allocated for this stream.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlLargeObjectStream.Dispose(System.Boolean)">
            <summary>
            Releases resources at the backend allocated for this stream, iff disposing is true.
            </summary>
            <param name="disposing">Whether to release resources allocated at the backend.</param>
        </member>
        <member name="T:Npgsql.NpgsqlLoggingConfiguration">
            <summary>
            Configures Npgsql logging
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlLoggingConfiguration.IsParameterLoggingEnabled">
            <summary>
            Determines whether parameter contents will be logged alongside SQL statements - this may reveal sensitive information.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlLoggingConfiguration.InitializeLogging(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)">
            <summary>
            <para>
            Globally initializes Npgsql logging to use the provided <paramref name="loggerFactory" />.
            Must be called before any Npgsql APIs are used.
            </para>
            <para>
            This is a legacy-only, backwards compatibility API. New applications should set the logger factory on
            <see cref="T:Npgsql.NpgsqlDataSourceBuilder" /> and use the resulting <see cref="T:Npgsql.NpgsqlDataSource"/> instead.
            </para>
            </summary>
            <param name="loggerFactory">The logging factory to use when logging from Npgsql.</param>
            <param name="parameterLoggingEnabled">
            Determines whether parameter contents will be logged alongside SQL statements - this may reveal sensitive information.
            Defaults to <see langword="false" />.
            </param>
        </member>
        <member name="T:Npgsql.NpgsqlMultiHostDataSource">
            <summary>
            An <see cref="T:Npgsql.NpgsqlDataSource" /> which manages connections for multiple hosts, is aware of their states (primary, secondary,
            offline...) and can perform failover and load balancing across them.
            </summary>
            <remarks>
            See <see href="https://www.npgsql.org/doc/failover-and-load-balancing.html" />.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlMultiHostDataSource.CreateConnection(Npgsql.TargetSessionAttributes)">
            <summary>
            Returns a new, unopened connection from this data source.
            </summary>
            <param name="targetSessionAttributes">Specifies the server type (e.g. primary, standby).</param>
        </member>
        <member name="M:Npgsql.NpgsqlMultiHostDataSource.OpenConnection(Npgsql.TargetSessionAttributes)">
            <summary>
            Returns a new, opened connection from this data source.
            </summary>
            <param name="targetSessionAttributes">Specifies the server type (e.g. primary, standby).</param>
        </member>
        <member name="M:Npgsql.NpgsqlMultiHostDataSource.OpenConnectionAsync(Npgsql.TargetSessionAttributes,System.Threading.CancellationToken)">
            <summary>
            Returns a new, opened connection from this data source.
            </summary>
            <param name="targetSessionAttributes">Specifies the server type (e.g. primary, standby).</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlMultiHostDataSource.WithTargetSession(Npgsql.TargetSessionAttributes)">
            <summary>
            Returns an <see cref="T:Npgsql.NpgsqlDataSource" /> that wraps this multi-host one with the given server type.
            </summary>
            <param name="targetSessionAttributes">Specifies the server type (e.g. primary, standby).</param>
        </member>
        <member name="M:Npgsql.NpgsqlMultiHostDataSource.ClearDatabaseStates">
            <summary>
            Clears the database state (primary, secondary, offline...) for all data sources managed by this multi-host data source.
            Can be useful to make Npgsql retry a PostgreSQL instance which was previously detected to be offline.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlNestedDataReader">
            <summary>
            Reads a forward-only stream of rows from a nested data source.
            Can be retrieved using <see cref="M:Npgsql.NpgsqlDataReader.GetData(System.Int32)"/> or
            <see cref="M:Npgsql.NpgsqlNestedDataReader.GetData(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlNestedDataReader.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlNestedDataReader.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlNestedDataReader.Depth">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlNestedDataReader.FieldCount">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlNestedDataReader.HasRows">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlNestedDataReader.IsClosed">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlNestedDataReader.RecordsAffected">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetChar(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetGuid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetDbDataReader(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetData(System.Int32)">
            <summary>
            Returns a nested data reader for the requested column.
            The column type must be a record or a to Npgsql known composite type, or an array thereof.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>A data reader.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetDataTypeName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetOrdinal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetFieldType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetValues(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.IsDBNull(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.GetFieldValue``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.Read">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.NextResult">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.Close">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlNestedDataReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.NpgsqlNotificationEventArgs">
            <summary>
            Provides information on a PostgreSQL notification. Notifications are sent when your connection has registered for
            notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications,
            allowing for an inter-connection communication channel.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlNotificationEventArgs.PID">
            <summary>
            Process ID of the PostgreSQL backend that sent this notification.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlNotificationEventArgs.Channel">
            <summary>
            The channel on which the notification was sent.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlNotificationEventArgs.Payload">
            <summary>
            An optional payload string that was sent with this notification.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlOperationInProgressException">
            <summary>
            Thrown when trying to use a connection that is already busy performing some other operation.
            Provides information on the already-executing operation to help with debugging.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlOperationInProgressException.#ctor(Npgsql.NpgsqlCommand)">
            <summary>
            Creates a new instance of <see cref="T:Npgsql.NpgsqlOperationInProgressException" />.
            </summary>
            <param name="command">
            A command which was in progress when the operation which triggered this exception was executed.
            </param>
        </member>
        <member name="P:Npgsql.NpgsqlOperationInProgressException.CommandInProgress">
            <summary>
            If the connection is busy with another command, this will contain a reference to that command.
            Otherwise, if the connection if busy with another type of operation (e.g. COPY), contains
            <see langword="null" />.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlParameter">
            <summary>
             This class represents a parameter to a command that will be sent to server
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/> class with the parameter name and a value.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter"/>.</param>
            <remarks>
            <p>
            When you specify an <see cref="T:System.Object"/> in the value parameter, the <see cref="T:System.Data.DbType"/> is
            inferred from the CLR type.
            </p>
            <p>
            When using this constructor, you must be aware of a possible misuse of the constructor which takes a <see cref="P:Npgsql.NpgsqlParameter.DbType"/>
            parameter. This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of
            <see cref="P:Npgsql.NpgsqlParameter.DbType"/>. Use <see cref="M:System.Convert.ToInt32(System.Object)"/> for example to have compiler calling the correct constructor.
            </p>
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/> class with the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType"/> values.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/>
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values.</param>
            <param name="isNullable">
            <see langword="true"/> if the value of the field can be <see langword="null"/>, otherwise <see langword="false"/>.
            </param>
            <param name="precision">
            The total number of digits to the left and right of the decimal point to which <see cref="P:Npgsql.NpgsqlParameter.Value"/> is resolved.
            </param>
            <param name="scale">The total number of decimal places to which <see cref="P:Npgsql.NpgsqlParameter.Value"/> is resolved.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"/> values.</param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the <see cref="T:Npgsql.NpgsqlParameter"/>.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values.</param>
            <param name="isNullable">
            <see langword="true"/> if the value of the field can be <see langword="null"/>, otherwise <see langword="false"/>.
            </param>
            <param name="precision">
            The total number of digits to the left and right of the decimal point to which <see cref="P:Npgsql.NpgsqlParameter.Value"/> is resolved.
            </param>
            <param name="scale">The total number of decimal places to which <see cref="P:Npgsql.NpgsqlParameter.Value"/> is resolved.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"/> values.</param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the <see cref="T:Npgsql.NpgsqlParameter"/>.</param>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.ParameterName">
            <summary>
            Gets or sets The name of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <value>The name of the <see cref="T:Npgsql.NpgsqlParameter"/>.
            The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Value">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameter.NpgsqlValue">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>
            An <see cref="T:System.Object" /> that is the value of the parameter.
            The default value is <see langword="null" />.
            </value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType"/> of the parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.DbType"/> values. The default is <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.NpgsqlDbType">
            <summary>
            Gets or sets the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> of the parameter.
            </summary>
            <value>One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values. The default is <see cref="T:NpgsqlTypes.NpgsqlDbType"/>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.DataTypeName">
            <summary>
            Used to specify which PostgreSQL type will be sent to the database for this parameter.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.IsNullable">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Direction">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the <see cref="P:Npgsql.NpgsqlParameter.Value"/> property.
            </summary>
            <value>
            The maximum number of digits used to represent the <see cref="P:Npgsql.NpgsqlParameter.Value"/> property.
            The default value is 0, which indicates that the data provider sets the precision for <see cref="P:Npgsql.NpgsqlParameter.Value"/>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which <see cref="P:Npgsql.NpgsqlParameter.Value"/> is resolved.
            </summary>
            <value>The number of decimal places to which <see cref="P:Npgsql.NpgsqlParameter.Value"/> is resolved. The default is 0.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Size">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceColumn">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceColumnNullMapping">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Collection">
            <summary>
            The collection to which this parameter belongs, if any.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.PostgresType">
            <summary>
            The PostgreSQL data type, such as int4 or text, as discovered from pg_type.
            This property is automatically set if parameters have been derived via
            <see cref="M:Npgsql.NpgsqlCommandBuilder.DeriveParameters(Npgsql.NpgsqlCommand)"/> and can be used to
            acquire additional information about the parameters' data type.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.ResolveTypeInfo(Npgsql.Internal.PgSerializerOptions)">
            Attempt to resolve a type info based on available (postgres) type information on the parameter.
        </member>
        <member name="M:Npgsql.NpgsqlParameter.Bind(Npgsql.Internal.DataFormat@,Npgsql.Internal.Size@)">
            Bind the current value to the type info, truncate (if applicable), take its size, and do any final validation before writing.
        </member>
        <member name="M:Npgsql.NpgsqlParameter.ResetDbType">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameter.Clone">
            <summary>
            Creates a new <see cref="T:Npgsql.NpgsqlParameter"/> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Npgsql.NpgsqlParameter"/> that is a copy of this instance.</returns>
        </member>
        <member name="T:Npgsql.NpgsqlParameterCollection">
            <summary>
            Represents a collection of parameters relevant to a <see cref="T:Npgsql.NpgsqlCommand"/> as well as their respective mappings to columns in
            a <see cref="T:System.Data.DataSet"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the NpgsqlParameterCollection class.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameter"/> with the specified name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter"/> to retrieve.</param>
            <value>
            The <see cref="T:Npgsql.NpgsqlParameter"/> with the specified name, or a <see langword="null"/> reference if the parameter is not found.
            </value>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameter"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Npgsql.NpgsqlParameter"/> to retrieve.</param>
            <value>The <see cref="T:Npgsql.NpgsqlParameter"/> at the specified index.</value>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(Npgsql.NpgsqlParameter)">
            <summary>
            Adds the specified <see cref="T:Npgsql.NpgsqlParameter"/> object to the <see cref="T:Npgsql.NpgsqlParameterCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter"/> to add to the collection.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter"/> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.System#Collections#Generic#ICollection{Npgsql#NpgsqlParameter}#Add(Npgsql.NpgsqlParameter)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> given the specified parameter name and
            value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter"/>.</param>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter"/> to add to the collection.</param>
            <returns>The parameter that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,NpgsqlTypes.NpgsqlDbType,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> given the specified parameter name,
            data type and value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter"/>.</param>
            <param name="parameterType">One of the NpgsqlDbType values.</param>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter"/> to add to the collection.</param>
            <returns>The parameter that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> given the specified parameter name and
            value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter"/>.</param>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter"/> to add to the collection.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values.</param>
            <param name="size">The length of the column.</param>
            <returns>The parameter that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> given the specified parameter name and
            value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter"/>.</param>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter"/> to add to the collection.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values.</param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The parameter that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> given the specified value.
            </summary>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter"/> to add to the collection.</param>
            <returns>The parameter that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(NpgsqlTypes.NpgsqlDbType,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> given the specified data type and value.
            </summary>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType"/> values.</param>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter"/> to add to the collection.</param>
            <returns>The parameter that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType"/> values.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter"/> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> with the parameter name, the data type,
            and the column length.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType"/> values.</param>
            <param name="size">The length of the column.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter"/> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter"/> to the <see cref="T:Npgsql.NpgsqlParameterCollection"/> with the parameter name, the data type, the
            column length, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType"/> values.</param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter"/> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.RemoveAt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter"/> from the collection using a specific index.
            </summary>
            <param name="index">The zero-based index of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter"/> from the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter"/> to remove from the collection.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter"/> from the collection.
            </summary>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter"/> to remove from the collection.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.TryGetValue(System.String,Npgsql.NpgsqlParameter@)">
            <summary>
            Gets a value indicating whether a <see cref="T:Npgsql.NpgsqlParameter"/> with the specified parameter name exists in the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter"/> object to find.</param>
            <param name="parameter">
            A reference to the requested parameter is returned in this out param if it is found in the list.
            This value is <see langword="null"/> if the parameter is not found.
            </param>
            <returns>
            <see langword="true"/> if the collection contains the parameter and param will contain the parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Count">
            <summary>
            Gets the number of <see cref="T:Npgsql.NpgsqlParameter"/> objects in the collection.
            </summary>
            <value>The number of <see cref="T:Npgsql.NpgsqlParameter"/> objects in the collection.</value>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.System#Collections#Generic#ICollection{Npgsql#NpgsqlParameter}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddRange(System.Array)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.GetParameter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(Npgsql.NpgsqlParameter)">
            <summary>
            Report the offset within the collection of the given parameter.
            </summary>
            <param name="item">Parameter to find.</param>
            <returns>Index of the parameter, or -1 if the parameter is not present.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Insert(System.Int32,Npgsql.NpgsqlParameter)">
            <summary>
            Insert the specified parameter into the collection.
            </summary>
            <param name="index">Index of the existing parameter before which to insert the new one.</param>
            <param name="item">Parameter to insert.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(Npgsql.NpgsqlParameter)">
            <summary>
            Report whether the specified parameter is present in the collection.
            </summary>
            <param name="item">Parameter to find.</param>
            <returns>True if the parameter was found, otherwise false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Remove(Npgsql.NpgsqlParameter)">
            <summary>
            Remove the specified parameter from the collection.
            </summary>
            <param name="item">Parameter to remove.</param>
            <returns>True if the parameter was found and removed, otherwise false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.CopyTo(Npgsql.NpgsqlParameter[],System.Int32)">
            <summary>
            Convert collection to a System.Array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Starting index in destination array.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.ToArray">
            <summary>
            Convert collection to a System.Array.
            </summary>
            <returns>NpgsqlParameter[]</returns>
        </member>
        <member name="F:Npgsql.PlaceholderType.NoParameters">
            <summary>
            The parameter collection includes no parameters.
            </summary>
        </member>
        <member name="F:Npgsql.PlaceholderType.Named">
            <summary>
            The parameter collection includes only named parameters.
            </summary>
        </member>
        <member name="F:Npgsql.PlaceholderType.Positional">
            <summary>
            The parameter collection includes only positional parameters.
            </summary>
        </member>
        <member name="F:Npgsql.PlaceholderType.Mixed">
            <summary>
            The parameter collection includes both named and positional parameters.
            This is only supported when <see cref="P:Npgsql.NpgsqlCommand.CommandType" /> is set to <see cref="F:System.Data.CommandType.StoredProcedure" />.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlParameter`1">
            <summary>
            A generic version of <see cref="T:Npgsql.NpgsqlParameter"/> which provides more type safety and
            avoids boxing of value types. Use <see cref="P:Npgsql.NpgsqlParameter`1.TypedValue"/> instead of <see cref="P:Npgsql.NpgsqlParameter.Value"/>.
            </summary>
            <typeparam name="T">The type of the value that will be stored in the parameter.</typeparam>
        </member>
        <member name="P:Npgsql.NpgsqlParameter`1.TypedValue">
            <summary>
            Gets or sets the strongly-typed value of the parameter.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameter`1.Value">
            <summary>
            Gets or sets the value of the parameter. This delegates to <see cref="P:Npgsql.NpgsqlParameter`1.TypedValue"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.NpgsqlParameter`1" />.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.NpgsqlParameter`1" /> with a parameter name and value.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter`1.#ctor(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.NpgsqlParameter`1" /> with a parameter name and type.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter`1.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.NpgsqlParameter`1" /> with a parameter name and type.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlRawCopyStream">
            <summary>
            Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to
            a PostgreSQL table. Initiated by <see cref="M:Npgsql.NpgsqlConnection.BeginRawBinaryCopy(System.String)"/>
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="F:Npgsql.NpgsqlRawCopyStream.BinarySignature">
            <summary>
            The copy binary format header signature
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlRawCopyStream.Cancel">
            <summary>
            Cancels and terminates an ongoing operation. Any data already written will be discarded.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlRawCopyStream.CancelAsync">
            <summary>
            Cancels and terminates an ongoing operation. Any data already written will be discarded.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCopyTextWriter">
            <summary>
            Writer for a text import, initiated by <see cref="M:Npgsql.NpgsqlConnection.BeginTextImport(System.String)"/>.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlCopyTextWriter.Cancel">
            <summary>
            Cancels and terminates an ongoing import. Any data already written will be discarded.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyTextWriter.CancelAsync">
            <summary>
            Cancels and terminates an ongoing import. Any data already written will be discarded.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCopyTextReader">
            <summary>
            Reader for a text export, initiated by <see cref="M:Npgsql.NpgsqlConnection.BeginTextExport(System.String)"/>.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/sql-copy.html.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlCopyTextReader.Cancel">
            <summary>
            Cancels and terminates an ongoing export.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyTextReader.CancelAsync">
            <summary>
            Asynchronously cancels and terminates an ongoing export.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlSchema">
            <summary>
            Provides the underlying mechanism for reading schema information.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetMetaDataCollections">
            <summary>
            Returns the MetaDataCollections that lists all possible collections.
            </summary>
            <returns>The MetaDataCollections</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetRestrictions">
            <summary>
            Returns the Restrictions that contains the meaning and position of the values in the restrictions array.
            </summary>
            <returns>The Restrictions</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.PopulateDefaultDataTypeInfo(System.Data.DataRow,Npgsql.PostgresTypes.PostgresType)">
            <summary>
            Populates some generic type information that is common for base types, arrays, enums, etc. Some will
            be overridden later.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.PopulateHardcodedDataTypeInfo(System.Data.DataRow,Npgsql.PostgresTypes.PostgresType)">
            <summary>
            Sets some custom, hardcoded info on a DataType row that cannot be loaded/inferred from PostgreSQL
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlSchema.ReservedKeywords">
            <summary>
            List of keywords taken from PostgreSQL 9.0 reserved words documentation.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlSlimDataSourceBuilder">
            <summary>
            Provides a simple API for configuring and creating an <see cref="T:Npgsql.NpgsqlDataSource" />, from which database connections can be obtained.
            </summary>
            <remarks>
            On this builder, various features are disabled by default; unless you're looking to save on code size (e.g. when publishing with
            NativeAOT), use <see cref="T:Npgsql.NpgsqlDataSourceBuilder" /> instead.
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlSlimDataSourceBuilder.ConnectionStringBuilder">
            <summary>
            A connection string builder that can be used to configured the connection string on the builder.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlSlimDataSourceBuilder.ConnectionString">
            <summary>
            Returns the connection string, as currently configured on the builder.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlSlimDataSourceBuilder.Name">
            <summary>
            A diagnostics name used by Npgsql when generating tracing, logging and metrics.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Npgsql.NpgsqlSlimDataSourceBuilder" />, optionally starting out from the given
            <paramref name="connectionString"/>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Sets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> that will be used for logging.
            </summary>
            <param name="loggerFactory">The logger factory to be used.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableParameterLogging(System.Boolean)">
            <summary>
            Enables parameters to be included in logging. This includes potentially sensitive information from data sent to PostgreSQL.
            You should only enable this flag in development, or if you have the appropriate security measures in place based on the
            sensitivity of this data.
            </summary>
            <param name="parameterLoggingEnabled">If <see langword="true" />, then sensitive data is logged.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.ConfigureJsonOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Configures the JSON serializer options used when reading and writing all System.Text.Json data.
            </summary>
            <param name="serializerOptions">Options to customize JSON serialization and deserialization.</param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseUserCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            When using SSL/TLS, this is a callback that allows customizing how the PostgreSQL-provided certificate is verified. This is an
            advanced API, consider using <see cref="F:Npgsql.SslMode.VerifyFull" /> or <see cref="F:Npgsql.SslMode.VerifyCA" /> instead.
            </summary>
            <param name="userCertificateValidationCallback">The callback containing custom callback verification logic.</param>
            <remarks>
            <para>
            Cannot be used in conjunction with <see cref="F:Npgsql.SslMode.Disable" />, <see cref="F:Npgsql.SslMode.VerifyCA" /> or
            <see cref="F:Npgsql.SslMode.VerifyFull" />.
            </para>
            <para>
            See <see href="https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx"/>.
            </para>
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Specifies an SSL/TLS certificate which Npgsql will send to PostgreSQL for certificate-based authentication.
            </summary>
            <param name="clientCertificate">The client certificate to be sent to PostgreSQL when opening a connection.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Specifies a collection of SSL/TLS certificates which Npgsql will send to PostgreSQL for certificate-based authentication.
            </summary>
            <param name="clientCertificates">The client certificate collection to be sent to PostgreSQL when opening a connection.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificatesCallback(System.Action{System.Security.Cryptography.X509Certificates.X509CertificateCollection})">
            <summary>
            Specifies a callback to modify the collection of SSL/TLS client certificates which Npgsql will send to PostgreSQL for
            certificate-based authentication. This is an advanced API, consider using <see cref="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)" /> or
            <see cref="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" /> instead.
            </summary>
            <param name="clientCertificatesCallback">The callback to modify the client certificate collection.</param>
            <remarks>
            <para>
            The callback is invoked every time a physical connection is opened, and is therefore suitable for rotating short-lived client
            certificates. Simply make sure the certificate collection argument has the up-to-date certificate(s).
            </para>
            <para>
            The callback's collection argument already includes any client certificates specified via the connection string or environment
            variables.
            </para>
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseRootCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Sets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that will be used validate SSL certificate, received from the server.
            </summary>
            <param name="rootCertificate">The CA certificate.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UseRootCertificateCallback(System.Func{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Specifies a callback that will be used to validate SSL certificate, received from the server.
            </summary>
            <param name="rootCertificateCallback">The callback to get CA certificate.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
            <remarks>
            This overload, which accepts a callback, is suitable for scenarios where the certificate rotates
            and might change during the lifetime of the application.
            When that's not the case, use the overload which directly accepts the certificate.
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UsePeriodicPasswordProvider(System.Func{Npgsql.NpgsqlConnectionStringBuilder,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.String}},System.TimeSpan,System.TimeSpan)">
            <summary>
            Configures a periodic password provider, which is automatically called by the data source at some regular interval. This is the
            recommended way to fetch a rotating access token.
            </summary>
            <param name="passwordProvider">A callback which returns the password to be sent to PostgreSQL.</param>
            <param name="successRefreshInterval">How long to cache the password before re-invoking the callback.</param>
            <param name="failureRefreshInterval">
            If a password refresh attempt fails, it will be re-attempted with this interval.
            This should typically be much lower than <paramref name="successRefreshInterval" />.
            </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
            <remarks>
            <para>
            The provided callback is invoked in a timer, and not when opening connections. It therefore doesn't affect opening time.
            </para>
            <para>
            The provided cancellation token is only triggered when the entire data source is disposed. If you'd like to apply a timeout to the
            token fetching, do so within the provided callback.
            </para>
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UsePasswordProvider(System.Func{Npgsql.NpgsqlConnectionStringBuilder,System.String},System.Func{Npgsql.NpgsqlConnectionStringBuilder,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.String}})">
            <summary>
            Configures a password provider, which is called by the data source when opening connections.
            </summary>
            <param name="passwordProvider">
            A callback that may be invoked during <see cref="M:Npgsql.NpgsqlConnection.Open" /> which returns the password to be sent to PostgreSQL.
            </param>
            <param name="passwordProviderAsync">
            A callback that may be invoked during <see cref="M:Npgsql.NpgsqlConnection.OpenAsync(System.Threading.CancellationToken)" /> which returns the password to be sent to PostgreSQL.
            </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
            <remarks>
            <para>
            The provided callback is invoked when opening connections. Therefore its important the callback internally depends on cached
            data or returns quickly otherwise. Any unnecessary delay will affect connection opening time.
            </para>
            </remarks>
        </member>
        <member name="P:Npgsql.NpgsqlSlimDataSourceBuilder.DefaultNameTranslator">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.MapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UnmapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.MapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UnmapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.MapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UnmapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.MapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UnmapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.AddTypeInfoResolverFactory(Npgsql.Internal.PgTypeInfoResolverFactory)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.Npgsql#TypeMapping#INpgsqlTypeMapper#Reset">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableArrays">
            <summary>
            Sets up mappings for the PostgreSQL <c>array</c> types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableRanges">
            <summary>
            Sets up mappings for the PostgreSQL <c>range</c> types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableMultiranges">
            <summary>
            Sets up mappings for the PostgreSQL <c>multirange</c> types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableRecords">
            <summary>
            Sets up mappings for the PostgreSQL <c>record</c> type as a .NET <c>object[]</c>.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableFullTextSearch">
            <summary>
            Sets up mappings for the PostgreSQL <c>tsquery</c> and <c>tsvector</c> types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableLTree">
            <summary>
            Sets up mappings for the PostgreSQL <c>ltree</c> extension types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableExtraConversions">
            <summary>
            Sets up mappings for extra conversions from PostgreSQL to .NET types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableTransportSecurity">
            <summary>
            Enables the possibility to use TLS/SSl encryption for connections to PostgreSQL. This does not guarantee that encryption will
            actually be used; see <see href="https://www.npgsql.org/doc/security.html"/> for more details.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableIntegratedSecurity">
            <summary>
            Enables the possibility to use GSS/SSPI authentication for connections to PostgreSQL. This does not guarantee that it will
            actually be used; see <see href="https://www.npgsql.org/doc/security.html"/> for more details.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableDynamicJson(System.Type[],System.Type[])">
            <summary>
            Sets up dynamic System.Text.Json mappings. This allows mapping arbitrary .NET types to PostgreSQL <c>json</c> and <c>jsonb</c>
            types, as well as <see cref="T:System.Text.Json.Nodes.JsonNode" /> and its derived types.
            </summary>
            <param name="jsonbClrTypes">
            A list of CLR types to map to PostgreSQL <c>jsonb</c> (no need to specify <see cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb" />).
            </param>
            <param name="jsonClrTypes">
            A list of CLR types to map to PostgreSQL <c>json</c> (no need to specify <see cref="F:NpgsqlTypes.NpgsqlDbType.Json" />).
            </param>
            <remarks>
            Due to the dynamic nature of these mappings, they are not compatible with NativeAOT or trimming.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableRecordsAsTuples">
            <summary>
            Sets up mappings for the PostgreSQL <c>record</c> type as a .NET <see cref="T:System.ValueTuple" /> or <see cref="T:System.Tuple" />.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.EnableUnmappedTypes">
            <summary>
            Sets up mappings allowing the use of unmapped enum, range and multirange types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.UsePhysicalConnectionInitializer(System.Action{Npgsql.NpgsqlConnection},System.Func{Npgsql.NpgsqlConnection,System.Threading.Tasks.Task})">
            <summary>
            Register a connection initializer, which allows executing arbitrary commands when a physical database connection is first opened.
            </summary>
            <param name="connectionInitializer">
            A synchronous connection initialization lambda, which will be called from <see cref="M:Npgsql.NpgsqlConnection.Open" /> when a new physical
            connection is opened.
            </param>
            <param name="connectionInitializerAsync">
            An asynchronous connection initialization lambda, which will be called from
            <see cref="M:Npgsql.NpgsqlConnection.OpenAsync(System.Threading.CancellationToken)" /> when a new physical connection is opened.
            </param>
            <remarks>
            If an initializer is registered, both sync and async versions must be provided. If you do not use sync APIs in your code, simply
            throw <see cref="T:System.NotSupportedException" />, which would also catch accidental cases of sync opening.
            </remarks>
            <remarks>
            Take care that the setting you apply in the initializer does not get reverted when the connection is returned to the pool, since
            Npgsql sends <c>DISCARD ALL</c> by default. The <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.NoResetOnClose" /> option can be used to
            turn this off.
            </remarks>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.Build">
            <summary>
            Builds and returns an <see cref="T:Npgsql.NpgsqlDataSource" /> which is ready for use.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlSlimDataSourceBuilder.BuildMultiHost">
            <summary>
            Builds and returns a <see cref="T:Npgsql.NpgsqlMultiHostDataSource" /> which is ready for use for load-balancing and failover scenarios.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlTracingOptions">
            <summary>
            Options to configure Npgsql's support for OpenTelemetry tracing.
            Currently no options are available.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlTransaction">
            <summary>
            Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.Connection">
            <summary>
            Specifies the <see cref="T:Npgsql.NpgsqlConnection"/> object associated with the transaction.
            </summary>
            <value>The <see cref="T:Npgsql.NpgsqlConnection"/> object associated with the transaction.</value>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.DbConnection">
            <summary>
            Specifies the <see cref="T:Npgsql.NpgsqlConnection"/> object associated with the transaction.
            </summary>
            <value>The <see cref="T:Npgsql.NpgsqlConnection"/> object associated with the transaction.</value>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.IsCompleted">
            <summary>
            If true, the transaction has been committed/rolled back, but not disposed.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.IsolationLevel">
            <summary>
            Specifies the isolation level for this transaction.
            </summary>
            <value>The isolation level for this transaction. The default is <see cref="F:System.Data.IsolationLevel.ReadCommitted"/>.</value>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits the database transaction.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Save(System.String)">
            <summary>
            Creates a transaction save point.
            </summary>
            <param name="name">The name of the savepoint.</param>
            <remarks>
            This method does not cause a database roundtrip to be made. The savepoint creation statement will instead be sent along with
            the next command.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.SaveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a transaction save point.
            </summary>
            <param name="name">The name of the savepoint.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <remarks>
            This method does not cause a database roundtrip to be made, and will therefore always complete synchronously.
            The savepoint creation statement will instead be sent along with the next command.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Rollback(System.String)">
            <summary>
            Rolls back a transaction from a pending savepoint state.
            </summary>
            <param name="name">The name of the savepoint.</param>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.RollbackAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Rolls back a transaction from a pending savepoint state.
            </summary>
            <param name="name">The name of the savepoint.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Release(System.String)">
            <summary>
            Releases a transaction from a pending savepoint state.
            </summary>
            <param name="name">The name of the savepoint.</param>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.ReleaseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Releases a transaction from a pending savepoint state.
            </summary>
            <param name="name">The name of the savepoint.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.SupportsSavepoints">
            <summary>
            Indicates whether this transaction supports database savepoints.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Dispose(System.Boolean)">
            <summary>
            Disposes the transaction, rolling it back if it is still pending.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.DisposeAsync">
            <summary>
            Disposes the transaction, rolling it back if it is still pending.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.DisposeImmediately(System.Exception)">
            <summary>
            Disposes the transaction, without rolling back. Used only in special circumstances, e.g. when
            the connection is broken.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.UnbindIfNecessary">
            <summary>
            Unbinds transaction from the connector.
            Should be called before the connector is returned to the pool.
            </summary>
        </member>
        <member name="T:Npgsql.PgPassFile">
            <summary>
            Represents a .pgpass file, which contains passwords for noninteractive connections
            </summary>
        </member>
        <member name="P:Npgsql.PgPassFile.FileName">
            <summary>
            File name being parsed for credentials
            </summary>
        </member>
        <member name="M:Npgsql.PgPassFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.PgPassFile"/> class
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:Npgsql.PgPassFile.Entries">
            <summary>
            Parses file content and gets all credentials from the file
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> corresponding to all lines in the .pgpass file</returns>
        </member>
        <member name="M:Npgsql.PgPassFile.GetFirstMatchingEntry(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Searches queries loaded from .PGPASS file to find first entry matching the provided parameters.
            </summary>
            <param name="host">Hostname to query. Use null to match any.</param>
            <param name="port">Port to query. Use null to match any.</param>
            <param name="database">Database to query. Use null to match any.</param>
            <param name="username">User name to query. Use null to match any.</param>
            <returns>Matching <see cref="T:Npgsql.PgPassFile.Entry"/> if match was found. Otherwise, returns null.</returns>
        </member>
        <member name="T:Npgsql.PgPassFile.Entry">
            <summary>
            Represents a hostname, port, database, username, and password combination that has been retrieved from a .pgpass file
            </summary>
        </member>
        <member name="P:Npgsql.PgPassFile.Entry.Host">
            <summary>
            Hostname parsed from the .pgpass file
            </summary>
        </member>
        <member name="P:Npgsql.PgPassFile.Entry.Port">
            <summary>
            Port parsed from the .pgpass file
            </summary>
        </member>
        <member name="P:Npgsql.PgPassFile.Entry.Database">
            <summary>
            Database parsed from the .pgpass file
            </summary>
        </member>
        <member name="P:Npgsql.PgPassFile.Entry.Username">
            <summary>
            User name parsed from the .pgpass file
            </summary>
        </member>
        <member name="P:Npgsql.PgPassFile.Entry.Password">
            <summary>
            Password parsed from the .pgpass file
            </summary>
        </member>
        <member name="M:Npgsql.PgPassFile.Entry.#ctor(System.String,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            This class represents an entry from the .pgpass file
            </summary>
            <param name="host">Hostname parsed from the .pgpass file</param>
            <param name="port">Port parsed from the .pgpass file</param>
            <param name="database">Database parsed from the .pgpass file</param>
            <param name="username">User name parsed from the .pgpass file</param>
            <param name="password">Password parsed from the .pgpass file</param>
        </member>
        <member name="M:Npgsql.PgPassFile.Entry.Parse(System.String)">
            <summary>
            Creates new <see cref="T:Npgsql.PgPassFile.Entry"/> based on string in the format hostname:port:database:username:password. The : and \ characters should be escaped with a \.
            </summary>
            <param name="serializedEntry">string for the entry from the pgpass file</param>
            <returns>New instance of <see cref="T:Npgsql.PgPassFile.Entry"/> for the string</returns>
            <exception cref="T:System.FormatException">Entry is not formatted as hostname:port:database:username:password or non-wildcard port is not a number</exception>
        </member>
        <member name="M:Npgsql.PgPassFile.Entry.IsMatch(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Checks whether this <see cref="T:Npgsql.PgPassFile.Entry"/> matches the parameters supplied
            </summary>
            <param name="host">Hostname to check against this entry</param>
            <param name="port">Port to check against this entry</param>
            <param name="database">Database to check against this entry</param>
            <param name="username">Username to check against this entry</param>
            <returns>True if the entry is a match. False otherwise.</returns>
        </member>
        <member name="M:Npgsql.PgPassFile.Entry.AreValuesMatched(System.String,System.String)">
            <summary>
            Checks if 2 strings are a match for a <see cref="T:Npgsql.PgPassFile.Entry"/> considering that either value can be a wildcard (*)
            </summary>
            <param name="query">Value being searched</param>
            <param name="actual">Value from the PGPASS entry</param>
            <returns>True if the values are a match. False otherwise.</returns>
        </member>
        <member name="F:Npgsql.PoolingDataSource.Connectors">
            <summary>
            Tracks all connectors currently managed by this pool, whether idle or busy.
            Only updated rarely - when physical connections are opened/closed - but is read in perf-sensitive contexts.
            </summary>
        </member>
        <member name="F:Npgsql.PoolingDataSource._idleConnectorReader">
            <summary>
            Reader side for the idle connector channel. Contains nulls in order to release waiting attempts after
            a connector has been physically closed/broken.
            </summary>
        </member>
        <member name="F:Npgsql.PoolingDataSource._clearCounter">
            <summary>
            Incremented every time this pool is cleared via <see cref="M:Npgsql.NpgsqlConnection.ClearPool(Npgsql.NpgsqlConnection)"/> or
            <see cref="M:Npgsql.NpgsqlConnection.ClearAllPools"/>. Allows us to identify connections which were
            created before the clear.
            </summary>
        </member>
        <member name="T:Npgsql.PoolManager">
            <summary>
            Provides lookup for a pool based on a connection string.
            </summary>
            <remarks>
            Note that pools created directly as <see cref="T:Npgsql.NpgsqlDataSource" /> are referenced directly by users, and aren't managed here.
            </remarks>
        </member>
        <member name="M:Npgsql.PoolManager.Reset">
            <summary>
            Resets the pool manager to its initial state, for test purposes only.
            Assumes that no other threads are accessing the pool.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresDatabaseInfoFactory">
            <summary>
            The default implementation of <see cref="T:Npgsql.Internal.INpgsqlDatabaseInfoFactory"/>, for standard PostgreSQL databases..
            </summary>
        </member>
        <member name="M:Npgsql.PostgresDatabaseInfoFactory.Load(Npgsql.Internal.NpgsqlConnector,Npgsql.Util.NpgsqlTimeout,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.PostgresDatabaseInfo">
            <summary>
            The default implementation of NpgsqlDatabase, for standard PostgreSQL databases.
            </summary>
        </member>
        <member name="F:Npgsql.PostgresDatabaseInfo._types">
            <summary>
            The PostgreSQL types detected in the database.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresDatabaseInfo.GetTypes">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.PostgresDatabaseInfo.LongVersion">
            <summary>
            The PostgreSQL version string as returned by the version() function. Populated during loading.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresDatabaseInfo.IsRedshift">
            <summary>
            True if the backend is Amazon Redshift; otherwise, false.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresDatabaseInfo.SupportsUnlisten">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.PostgresDatabaseInfo.HasEnumSortOrder">
            <summary>
            True if the 'pg_enum' table includes the 'enumsortorder' column; otherwise, false.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresDatabaseInfo.HasTypeCategory">
            <summary>
            True if the 'pg_type' table includes the 'typcategory' column; otherwise, false.
            </summary>
            <remarks>
            pg_type.typcategory is added after 8.4.
            see: https://www.postgresql.org/docs/8.4/static/catalog-pg-type.html#CATALOG-TYPCATEGORY-TABLE
            </remarks>
        </member>
        <member name="M:Npgsql.PostgresDatabaseInfo.LoadPostgresInfo(Npgsql.Internal.NpgsqlConnector,Npgsql.Util.NpgsqlTimeout,System.Boolean)">
            <summary>
            Loads database information from the PostgreSQL database specified by <paramref name="conn"/>.
            </summary>
            <param name="conn">The database connection.</param>
            <param name="timeout">The timeout while loading types from the backend.</param>
            <param name="async">True to load types asynchronously.</param>
            <returns>
            A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Npgsql.PostgresDatabaseInfo.GenerateLoadTypesQuery(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates a raw SQL query string to select type information.
            </summary>
            <remarks>
            Select all types (base, array which is also base, enum, range, composite).
            Note that arrays are distinguished from primitive types through them having typreceive=array_recv.
            Order by primitives first, container later.
            For arrays and ranges, join in the element OID and type (to filter out arrays of unhandled
            types).
            </remarks>
        </member>
        <member name="M:Npgsql.PostgresDatabaseInfo.LoadBackendTypes(Npgsql.Internal.NpgsqlConnector,Npgsql.Util.NpgsqlTimeout,System.Boolean)">
            <summary>
            Loads type information from the backend specified by <paramref name="conn"/>.
            </summary>
            <param name="conn">The database connection.</param>
            <param name="timeout">The timeout while loading types from the backend.</param>
            <param name="async">True to load types asynchronously.</param>
            <returns>
            A collection of types loaded from the backend.
            </returns>
            <exception cref="T:System.TimeoutException" />
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown typtype for type '{internalName}' in pg_type: {typeChar}.</exception>
        </member>
        <member name="T:Npgsql.PostgresErrorCodes">
            <summary>
            Provides constants for PostgreSQL error codes.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/errcodes-appendix.html
            </remarks>
        </member>
        <member name="T:Npgsql.PostgresException">
             <summary>
             The exception that is thrown when the PostgreSQL backend reports errors (e.g. query
             SQL issues, constraint violations).
             </summary>
             <remarks>
             This exception only corresponds to a PostgreSQL-delivered error.
             Other errors (e.g. network issues) will be raised via <see cref="T:Npgsql.NpgsqlException" />,
             and purely Npgsql-related issues which aren't related to the server will be raised
             via the standard CLR exceptions (e.g. <see cref="T:System.ArgumentException" />).
            
             See https://www.postgresql.org/docs/current/static/errcodes-appendix.html,
             https://www.postgresql.org/docs/current/static/protocol-error-fields.html
             </remarks>
        </member>
        <member name="M:Npgsql.PostgresException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:Npgsql.PostgresException.ToString">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.PostgresException.IsTransient">
            <summary>
            Specifies whether the exception is considered transient, that is, whether retrying the operation could
            succeed (e.g. a network error). Check <see cref="P:Npgsql.PostgresException.SqlState"/>.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.Severity">
            <summary>
            Severity of the error or notice.
            Always present.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.InvariantSeverity">
            <summary>
            Severity of the error or notice, not localized.
            Always present since PostgreSQL 9.6.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.SqlState">
            <summary>
            The SQLSTATE code for the error.
            </summary>
            <remarks>
            Always present.
            Constants are defined in <seealso cref="T:Npgsql.PostgresErrorCodes"/>.
            See https://www.postgresql.org/docs/current/static/errcodes-appendix.html
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresException.MessageText">
            <summary>
            The primary human-readable error message. This should be accurate but terse.
            </summary>
            <remarks>
            Always present.
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresException.Detail">
            <summary>
            An optional secondary error message carrying more detail about the problem.
            May run to multiple lines.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.Hint">
            <summary>
            An optional suggestion what to do about the problem.
            This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts.
            May run to multiple lines.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.Position">
            <summary>
            The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string.
            The first character has index 1, and positions are measured in characters not bytes.
            0 means not provided.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.InternalPosition">
            <summary>
            This is defined the same as the <see cref="P:Npgsql.PostgresException.Position"/> field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client.
            The <see cref="P:Npgsql.PostgresException.InternalQuery" /> field will always appear when this field appears.
            0 means not provided.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.InternalQuery">
            <summary>
            The text of a failed internally-generated command.
            This could be, for example, a SQL query issued by a PL/pgSQL function.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.Where">
            <summary>
            An indication of the context in which the error occurred.
            Presently this includes a call stack traceback of active PL functions.
            The trace is one entry per line, most recent first.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.SchemaName">
            <summary>
            If the error was associated with a specific database object, the name of the schema containing that object, if any.
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresException.TableName">
            <summary>
            Table name: if the error was associated with a specific table, the name of the table.
            (Refer to the schema name field for the name of the table's schema.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresException.ColumnName">
            <summary>
            If the error was associated with a specific table column, the name of the column.
            (Refer to the schema and table name fields to identify the table.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresException.DataTypeName">
            <summary>
            If the error was associated with a specific data type, the name of the data type.
            (Refer to the schema name field for the name of the data type's schema.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresException.ConstraintName">
            <summary>
            If the error was associated with a specific constraint, the name of the constraint.
            Refer to fields listed above for the associated table or domain.
            (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresException.File">
            <summary>
            The file name of the source-code location where the error was reported.
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresException.Line">
            <summary>
            The line number of the source-code location where the error was reported.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresException.Routine">
            <summary>
            The name of the source-code routine reporting the error.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresNotice">
            <summary>
            PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query
            (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator
            initiates a "fast" database shutdown).
            </summary>
            <remarks>
            https://www.postgresql.org/docs/current/static/protocol-flow.html#PROTOCOL-ASYNC
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.Severity">
            <summary>
            Severity of the error or notice.
            Always present.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.InvariantSeverity">
            <summary>
            Severity of the error or notice, not localized.
            Always present since PostgreSQL 9.6.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.SqlState">
            <summary>
            The SQLSTATE code for the error.
            </summary>
            <remarks>
            Always present.
            See https://www.postgresql.org/docs/current/static/errcodes-appendix.html
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.MessageText">
            <summary>
            The primary human-readable error message. This should be accurate but terse.
            </summary>
            <remarks>
            Always present.
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.Detail">
            <summary>
            An optional secondary error message carrying more detail about the problem.
            May run to multiple lines.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.Hint">
            <summary>
            An optional suggestion what to do about the problem.
            This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts.
            May run to multiple lines.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.Position">
            <summary>
            The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string.
            The first character has index 1, and positions are measured in characters not bytes.
            0 means not provided.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.InternalPosition">
            <summary>
            This is defined the same as the <see cref="P:Npgsql.PostgresNotice.Position"/> field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client.
            The <see cref="P:Npgsql.PostgresNotice.InternalQuery" /> field will always appear when this field appears.
            0 means not provided.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.InternalQuery">
            <summary>
            The text of a failed internally-generated command.
            This could be, for example, a SQL query issued by a PL/pgSQL function.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.Where">
            <summary>
            An indication of the context in which the error occurred.
            Presently this includes a call stack traceback of active PL functions.
            The trace is one entry per line, most recent first.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.SchemaName">
            <summary>
            If the error was associated with a specific database object, the name of the schema containing that object, if any.
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.TableName">
            <summary>
            Table name: if the error was associated with a specific table, the name of the table.
            (Refer to the schema name field for the name of the table's schema.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.ColumnName">
            <summary>
            If the error was associated with a specific table column, the name of the column.
            (Refer to the schema and table name fields to identify the table.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.DataTypeName">
            <summary>
            If the error was associated with a specific data type, the name of the data type.
            (Refer to the schema name field for the name of the data type's schema.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.ConstraintName">
            <summary>
            If the error was associated with a specific constraint, the name of the constraint.
            Refer to fields listed above for the associated table or domain.
            (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.)
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.File">
            <summary>
            The file name of the source-code location where the error was reported.
            </summary>
            <remarks>PostgreSQL 9.3 and up.</remarks>
        </member>
        <member name="P:Npgsql.PostgresNotice.Line">
            <summary>
            The line number of the source-code location where the error was reported.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresNotice.Routine">
            <summary>
            The name of the source-code routine reporting the error.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresNotice.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresNotice.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlNoticeEventArgs">
            <summary>
            Provides data for a PostgreSQL notice event.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlNoticeEventArgs.Notice">
            <summary>
            The Notice that was sent from the database.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresArrayType">
            <summary>
            Represents a PostgreSQL array data type, which can hold several multiple values in a single column.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/arrays.html.
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresArrayType.Element">
            <summary>
            The PostgreSQL data type of the element contained within this array.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresArrayType.#ctor(System.String,System.String,System.UInt32,Npgsql.PostgresTypes.PostgresType)">
            <summary>
            Constructs a representation of a PostgreSQL array data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresArrayType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid,Npgsql.PostgresTypes.PostgresType)">
            <summary>
            Constructs a representation of a PostgreSQL array data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresArrayType.GetPartialNameWithFacets(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresBaseType">
            <summary>
            Represents a PostgreSQL base data type, which is a simple scalar value.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresBaseType.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Constructs a representation of a PostgreSQL base data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresBaseType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid)">
            <summary>
            Constructs a representation of a PostgreSQL base data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresBaseType.GetPartialNameWithFacets(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresCompositeType">
            <summary>
            Represents a PostgreSQL composite data type, which can hold multiple fields of varying types in a single column.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/rowtypes.html.
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresCompositeType.Fields">
            <summary>
            Holds the name and types for all fields.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresCompositeType.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Constructs a representation of a PostgreSQL array data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresCompositeType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid)">
            <summary>
            Constructs a representation of a PostgreSQL domain data type.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresCompositeType.Field">
            <summary>
            Represents a field in a PostgreSQL composite data type.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresCompositeType.Field.Name">
            <summary>
            The name of the composite field.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresCompositeType.Field.Type">
            <summary>
            The type of the composite field.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresCompositeType.Field.ToString">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresDomainType">
             <summary>
             Represents a PostgreSQL domain type.
             </summary>
             <remarks>
             See https://www.postgresql.org/docs/current/static/sql-createdomain.html.
            
             When PostgreSQL returns a RowDescription for a domain type, the type OID is the base type's
             (so fetching a domain type over text returns a RowDescription for text).
             However, when a composite type is returned, the type OID there is that of the domain,
             so we provide "clean" support for domain types.
             </remarks>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresDomainType.BaseType">
            <summary>
            The PostgreSQL data type of the base type, i.e. the type this domain is based on.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresDomainType.NotNull">
            <summary>
            <b>True</b> if the domain has a NOT NULL constraint, otherwise <b>false</b>.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresDomainType.#ctor(System.String,System.String,System.UInt32,Npgsql.PostgresTypes.PostgresType,System.Boolean)">
            <summary>
            Constructs a representation of a PostgreSQL domain data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresDomainType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid,Npgsql.PostgresTypes.PostgresType,System.Boolean)">
            <summary>
            Constructs a representation of a PostgreSQL domain data type.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresEnumType">
            <summary>
            Represents a PostgreSQL enum data type.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/datatype-enum.html.
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresEnumType.Labels">
            <summary>
            The enum's fields.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresEnumType.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Constructs a representation of a PostgreSQL enum data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresEnumType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid)">
            <summary>
            Constructs a representation of a PostgreSQL enum data type.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresMultirangeType">
            <summary>
            Represents a PostgreSQL multirange data type.
            </summary>
            <remarks>
            <p>See https://www.postgresql.org/docs/current/static/rangetypes.html.</p>
            <p>Multirange types were introduced in PostgreSQL 14.</p>
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresMultirangeType.Subrange">
            <summary>
            The PostgreSQL data type of the range of this multirange.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresMultirangeType.#ctor(System.String,System.String,System.UInt32,Npgsql.PostgresTypes.PostgresRangeType)">
            <summary>
            Constructs a representation of a PostgreSQL multirange data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresMultirangeType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid,Npgsql.PostgresTypes.PostgresRangeType)">
            <summary>
            Constructs a representation of a PostgreSQL multirange data type.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresRangeType">
            <summary>
            Represents a PostgreSQL range data type.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/rangetypes.html.
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresRangeType.Subtype">
            <summary>
            The PostgreSQL data type of the subtype of this range.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresRangeType.Multirange">
            <summary>
            The PostgreSQL data type of the multirange of this range.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresRangeType.#ctor(System.String,System.String,System.UInt32,Npgsql.PostgresTypes.PostgresType)">
            <summary>
            Constructs a representation of a PostgreSQL range data type.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresRangeType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid,Npgsql.PostgresTypes.PostgresType)">
            <summary>
            Constructs a representation of a PostgreSQL range data type.
            </summary>
        </member>
        <member name="T:Npgsql.PostgresTypes.PostgresType">
            <summary>
            Represents a PostgreSQL data type, such as int4 or text, as discovered from pg_type.
            This class is abstract, see derived classes for concrete types of PostgreSQL types.
            </summary>
            <remarks>
            Instances of this class are shared between connections to the same databases.
            For more info about what this class and its subclasses represent, see
            https://www.postgresql.org/docs/current/static/catalog-pg-type.html.
            </remarks>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresType.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Constructs a representation of a PostgreSQL data type.
            </summary>
            <param name="ns">The data type's namespace (or schema).</param>
            <param name="name">The data type's name.</param>
            <param name="oid">The data type's OID.</param>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresType.#ctor(Npgsql.Internal.Postgres.DataTypeName,Npgsql.Internal.Postgres.Oid)">
            <summary>
            Constructs a representation of a PostgreSQL data type.
            </summary>
            <param name="dataTypeName">The data type's fully qualified name.</param>
            <param name="oid">The data type's OID.</param>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.OID">
            <summary>
            The data type's OID - a unique id identifying the data type in a given database (in pg_type).
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.Namespace">
            <summary>
            The data type's namespace (or schema).
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.Name">
            <summary>
            The data type's name.
            </summary>
            <remarks>
            Note that this is the standard, user-displayable type name (e.g. integer[]) rather than the internal
            PostgreSQL name as it is in pg_type (_int4). See <see cref="P:Npgsql.PostgresTypes.PostgresType.InternalName"/> for the latter.
            </remarks>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.FullName">
            <summary>
            The full name of the backend type, including its namespace.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.DisplayName">
            <summary>
            A display name for this backend type, including the namespace unless it is pg_catalog (the namespace
            for all built-in types).
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.InternalName">
            <summary>
            The data type's internal PostgreSQL name (e.g. <c>_int4</c> not <c>integer[]</c>).
            See <see cref="P:Npgsql.PostgresTypes.PostgresType.Name"/> for a more user-friendly name.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.Array">
            <summary>
            If a PostgreSQL array type exists for this type, it will be referenced here.
            Otherwise null.
            </summary>
        </member>
        <member name="P:Npgsql.PostgresTypes.PostgresType.Range">
            <summary>
            If a PostgreSQL range type exists for this type, it will be referenced here.
            Otherwise null.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresType.GetDisplayNameWithFacets(System.Int32)">
            <summary>
            Generates the type name including any facts (size, precision, scale), given the PostgreSQL type modifier.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresType.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.PostgresType.GetRepresentationalType">
            Canonizes (nested) domain types to underlying types, does not handle composites.
        </member>
        <member name="F:Npgsql.PostgresTypes.PostgresTypeKind.Base">
            A base type.
        </member>
        <member name="F:Npgsql.PostgresTypes.PostgresTypeKind.Enum">
            An enum carrying its variants.
        </member>
        <member name="F:Npgsql.PostgresTypes.PostgresTypeKind.Pseudo">
            A pseudo type like anyarray.
        </member>
        <member name="T:Npgsql.PostgresTypes.UnknownBackendType">
            <summary>
            Represents a PostgreSQL data type that isn't known to Npgsql and cannot be handled.
            </summary>
        </member>
        <member name="M:Npgsql.PostgresTypes.UnknownBackendType.#ctor">
            <summary>
            Constructs a the unknown backend type.
            </summary>
        </member>
        <member name="T:Npgsql.PreparedStatement">
            <summary>
            Internally represents a statement has been prepared, is in the process of being prepared, or is a
            candidate for preparation (i.e. awaiting further usages).
            </summary>
        </member>
        <member name="P:Npgsql.PreparedStatement.IsExplicit">
            <summary>
            If true, the user explicitly requested this statement be prepared. It does not get closed as part of
            the automatic preparation LRU mechanism.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedStatement.StatementBeingReplaced">
            <summary>
            If this statement is about to be prepared, but replaces a previous statement which needs to be closed,
            this holds the name of the previous statement. Otherwise null.
            </summary>
        </member>
        <member name="P:Npgsql.PreparedStatement.ConverterParamTypes">
            <summary>
            Contains the handler types for a prepared statement's parameters, for overloaded cases (same SQL, different param types)
            Only populated after the statement has been prepared (i.e. null for candidates).
            </summary>
        </member>
        <member name="T:Npgsql.PreparedState">
            <summary>
            The state of a <see cref="T:Npgsql.PreparedStatement"/>.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedState.NotPrepared">
            <summary>
            The statement hasn't been prepared yet, nor is it in the process of being prepared.
            This is the value for autoprepare candidates which haven't been prepared yet, and is also
            a temporary state during preparation.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedState.BeingPrepared">
            <summary>
            The statement is in the process of being prepared.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedState.Prepared">
            <summary>
            The statement has been fully prepared and can be executed.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedState.BeingUnprepared">
            <summary>
            The statement is in the process of being unprepared. This is a temporary state that only occurs during
            unprepare. Specifically, it means that a Close message for the statement has already been written
            to the write buffer.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedState.Unprepared">
            <summary>
            The statement has been unprepared and is no longer usable.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedState.Invalidated">
            <summary>
            The statement was invalidated because e.g. table schema has changed since preparation.
            </summary>
        </member>
        <member name="F:Npgsql.PreparedStatementManager.NumPrepared">
            <summary>
            Total number of current prepared statements (whether explicit or automatic).
            </summary>
        </member>
        <member name="T:Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions">
            <summary>
            This API is for internal use and for implementing logical replication plugins.
            It is not meant to be consumed in common Npgsql usage scenarios.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.CreateLogicalReplicationSlot(Npgsql.Replication.LogicalReplicationConnection,System.String,System.String,System.Boolean,System.Nullable{Npgsql.Replication.LogicalSlotSnapshotInitMode},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This API is for internal use and for implementing logical replication plugins.
            It is not meant to be consumed in common Npgsql usage scenarios.
            </summary>
            <remarks>
            Creates a new replication slot and returns information about the newly-created slot.
            </remarks>
            <param name="connection">The <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> to use for creating the
            replication slot</param>
            <param name="slotName">The name of the slot to create. Must be a valid replication slot name (see
            <a href="https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION">
            https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION</a>).
            </param>
            <param name="outputPlugin">The name of the output plugin used for logical decoding (see
            <a href="https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html">
            https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html</a>).
            </param>
            <param name="isTemporary"><see langword="true"/> if this replication slot shall be temporary one; otherwise
            <see langword="false"/>. Temporary slots are not saved to disk and are automatically dropped on error or
            when the session has finished.</param>
            <param name="slotSnapshotInitMode">A <see cref="T:Npgsql.Replication.LogicalSlotSnapshotInitMode"/> to specify what to do with the
            snapshot created during logical slot initialization. <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Export"/>, which is
            also the default, will export the snapshot for use in other sessions. This option can't be used inside a
            transaction. <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Use"/> will use the snapshot for the current transaction
            executing the command. This option must be used in a transaction, and <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Use"/>
            must be the first command run in that transaction. Finally, <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.NoExport"/> will
            just use the snapshot for logical decoding as normal but won't do anything else with it.</param>
            <param name="twoPhase">
            If <see langword="true"/>, this logical replication slot supports decoding of two-phase transactions. With this option,
            two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted.
            The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is <see langword="false"/>.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing a <see cref="T:Npgsql.Replication.ReplicationSlotOptions"/> class that
            can be used to initialize instances of <see cref="T:Npgsql.Replication.ReplicationSlot"/> subclasses.</returns>
        </member>
        <member name="M:Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions.StartLogicalReplication(Npgsql.Replication.LogicalReplicationConnection,Npgsql.Replication.Internal.LogicalReplicationSlot,System.Threading.CancellationToken,System.Nullable{NpgsqlTypes.NpgsqlLogSequenceNumber},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Instructs the server to start streaming the WAL for logical replication, starting at WAL location
            <paramref name="walLocation"/> or at the slot's consistent point if <paramref name="walLocation"/> isn't specified.
            The server can reply with an error, for example if the requested section of the WAL has already been recycled.
            </summary>
            <param name="connection">The <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> to use for starting replication</param>
            <param name="slot">The replication slot that will be updated as replication progresses so that the server
            knows which WAL segments are still needed by the standby.
            </param>
            <param name="cancellationToken">The token to monitor for stopping the replication.</param>
            <param name="walLocation">The WAL location to begin streaming at.</param>
            <param name="options">The collection of options passed to the slot's logical decoding plugin.</param>
            <param name="bypassingStream">
            Whether the plugin will be bypassing <see cref="P:Npgsql.Replication.XLogDataMessage.Data" /> and reading directly from the buffer.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that
            can be used to stream WAL entries in form of <see cref="T:Npgsql.Replication.XLogDataMessage"/> instances.</returns>
        </member>
        <member name="T:Npgsql.Replication.Internal.LogicalReplicationSlot">
            <summary>
            Contains information about a newly-created logical replication slot.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.Internal.LogicalReplicationSlot.#ctor(System.String,Npgsql.Replication.ReplicationSlotOptions)">
            <summary>
            Creates a new logical replication slot
            </summary>
            <param name="outputPlugin">The logical decoding output plugin to the corresponding replication slot was created for.</param>
            <param name="replicationSlotOptions">A <see cref="T:Npgsql.Replication.ReplicationSlotOptions"/> struct with information to create the replication slot.</param>
        </member>
        <member name="P:Npgsql.Replication.Internal.LogicalReplicationSlot.SnapshotName">
            <summary>
            The identifier of the snapshot exported by the command.
            The snapshot is valid until a new command is executed on this connection or the replication connection is closed.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.Internal.LogicalReplicationSlot.OutputPlugin">
            <summary>
            The name of the output plugin used by the newly-created logical replication slot.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.Internal.LogicalReplicationSlot.ConsistentPoint">
            <summary>
            The WAL location at which the slot became consistent.
            This is the earliest location from which streaming can start on this replication slot.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.LogicalReplicationConnection">
            <summary>
            Represents a logical replication connection to a PostgreSQL server.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.LogicalReplicationConnection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/>.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.LogicalReplicationConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> with the given connection string.
            </summary>
            <param name="connectionString">The connection used to open the PostgreSQL database.</param>
        </member>
        <member name="T:Npgsql.Replication.LogicalSlotSnapshotInitMode">
            <summary>
            Decides what to do with the snapshot created during logical slot initialization.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Export">
            <summary>
            Export the snapshot for use in other sessions. This is the default.
            This option can't be used inside a transaction.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Use">
            <summary>
            Use the snapshot for the current transaction executing the command.
            This option must be used in a transaction, and CREATE_REPLICATION_SLOT must be the first command run
            in that transaction.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.NoExport">
            <summary>
            Just use the snapshot for logical decoding as normal but don't do anything else with it.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.BeginMessage">
            <summary>
            Logical Replication Protocol begin message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionFinalLsn">
            <summary>
            The final LSN of the transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionCommitTimestamp">
            <summary>
            Commit timestamp of the transaction.
            The value is in number of microseconds since PostgreSQL epoch (2000-01-01).
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.BeginPrepareMessage">
            <summary>
            Logical Replication Protocol begin prepare message
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.CommitMessage">
            <summary>
            Logical Replication Protocol commit message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitMessage.Flags">
            <summary>
            Flags; currently unused.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitLsn">
            <summary>
            The LSN of the commit.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitMessage.TransactionEndLsn">
            <summary>
            The end LSN of the transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitMessage.TransactionCommitTimestamp">
            <summary>
            Commit timestamp of the transaction.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitFlags">
            <summary>
            Flags for the commit.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.CommitMessage.CommitFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage">
            <summary>
            Logical Replication Protocol commit prepared message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.Flags">
            <summary>
            Flags for the commit prepared; currently unused.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedLsn">
            <summary>
            The LSN of the commit prepared.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedEndLsn">
            <summary>
            The end LSN of the commit prepared transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.TransactionCommitTimestamp">
            <summary>
            Commit timestamp of the transaction.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedFlags">
            <summary>
            Flags for the commit prepared; currently unused.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage.CommitPreparedFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage">
            <summary>
            Logical Replication Protocol update message for tables with REPLICA IDENTITY set to DEFAULT.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage.NewRow">
            <summary>
            Columns representing the new row.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.DeleteMessage">
            <summary>
            Abstract base class for Logical Replication Protocol delete message types.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.DeleteMessage.Relation">
            <summary>
            The relation for this <see cref="T:Npgsql.Replication.PgOutput.Messages.InsertMessage" />.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.FullDeleteMessage">
            <summary>
            Logical Replication Protocol delete message for tables with REPLICA IDENTITY REPLICA IDENTITY set to FULL.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.FullDeleteMessage.OldRow">
            <summary>
            Columns representing the deleted row.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.FullUpdateMessage">
            <summary>
            Logical Replication Protocol update message for tables with REPLICA IDENTITY set to FULL.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.OldRow">
            <summary>
            Columns representing the old row.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.FullUpdateMessage.NewRow">
            <summary>
            Columns representing the new row.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage">
            <summary>
            Logical Replication Protocol update message for tables with REPLICA IDENTITY set to USING INDEX.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.Key">
            <summary>
            Columns representing the key.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage.NewRow">
            <summary>
            Columns representing the new row.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.InsertMessage">
            <summary>
            Logical Replication Protocol insert message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.InsertMessage.Relation">
            <summary>
            The relation for this <see cref="T:Npgsql.Replication.PgOutput.Messages.InsertMessage" />.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.InsertMessage.NewRow">
            <summary>
            Columns representing the new row.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage">
            <summary>
            Logical Replication Protocol delete message for tables with REPLICA IDENTITY set to DEFAULT or USING INDEX.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage.Key">
            <summary>
            Columns representing the key.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage">
            <summary>
            Logical Replication Protocol logical decoding message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Flags">
            <summary>
            Flags; Either 0 for no flags or 1 if the logical decoding message is transactional.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.MessageLsn">
            <summary>
            The LSN of the logical decoding message.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Prefix">
            <summary>
            The prefix of the logical decoding message.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Data">
            <summary>
            The content of the logical decoding message.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.OriginMessage">
            <summary>
            Logical Replication Protocol origin message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.OriginMessage.OriginCommitLsn">
            <summary>
            The LSN of the commit on the origin server.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.OriginMessage.OriginName">
            <summary>
            Name of the origin.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage">
            <summary>
            The base class of all Logical Replication Protocol Messages
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/protocol-logicalrep-message-formats.html for details about the
            protocol.
            </remarks>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage">
            <summary>
            Abstract base class for Logical Replication Protocol prepare and begin prepare message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage.TransactionGid">
            <summary>
            The user defined GID of the two-phase transaction.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.PrepareMessage">
            <summary>
            Logical Replication Protocol prepare message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.PrepareMessage.Flags">
            <summary>
            Flags for the prepare; currently unused.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.PrepareMessage.PrepareFlags">
            <summary>
            Flags for the prepare; currently unused.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.PrepareMessage.PrepareFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.PrepareMessageBase">
            <summary>
            Abstract base class for the logical replication protocol begin prepare and prepare message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.PrepareMessageBase.PrepareLsn">
            <summary>
            The LSN of the prepare.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.PrepareMessageBase.PrepareEndLsn">
            <summary>
            The end LSN of the prepared transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.PrepareMessageBase.TransactionPrepareTimestamp">
            <summary>
            Prepare timestamp of the transaction.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.RelationMessage">
            <summary>
            Logical Replication Protocol relation message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.RelationId">
            <summary>
            ID of the relation.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.Namespace">
            <summary>
            Namespace (empty string for pg_catalog).
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.RelationName">
            <summary>
            Relation name.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentity">
            <summary>
            Replica identity setting for the relation (same as <c>relreplident</c> in <c>pg_class</c>):
            columns used to form “replica identity” for rows.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.Columns">
            <summary>
            Relation columns
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column">
            <summary>
            Represents a column in a Logical Replication Protocol relation message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.Flags">
            <summary>
            Flags for the column.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnName">
            <summary>
            Name of the column.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.DataTypeId">
            <summary>
            ID of the column's data type.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.TypeModifier">
            <summary>
            Type modifier of the column (atttypmod).
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnFlags">
            <summary>
            Flags for the column.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.RelationMessage.Column.ColumnFlags.PartOfKey">
            <summary>
            Marks the column as part of the key.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting">
            <summary>
            Replica identity setting for the relation (same as <c>relreplident</c> in <c>pg_class</c>).
            </summary>
            <remarks>
            See <see href="https://www.postgresql.org/docs/current/catalog-pg-class.html" />
            </remarks>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.Default">
            <summary>
            Default (primary key, if any).
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.Nothing">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.AllColumns">
            <summary>
            All columns.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.RelationMessage.ReplicaIdentitySetting.IndexWithIndIsReplIdent">
            <summary>
            Index with <c>indisreplident</c> set (same as nothing if the index used has been dropped)
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.RelationMessageColumn">
            <summary>
            Represents a column in a Logical Replication Protocol relation message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.Flags">
            <summary>
            Flags for the column. Currently can be either 0 for no flags or 1 which marks the column as part of the key.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.ColumnName">
            <summary>
            Name of the column.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.DataTypeId">
            <summary>
            ID of the column's data type.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RelationMessageColumn.TypeModifier">
            <summary>
            Type modifier of the column (atttypmod).
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage">
            <summary>
            Logical Replication Protocol rollback prepared message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.Flags">
            <summary>
            Flags for the rollback prepared; currently unused.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.PreparedTransactionEndLsn">
            <summary>
            The end LSN of the prepared transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.RollbackPreparedEndLsn">
            <summary>
            The end LSN of the rollback prepared transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.TransactionPrepareTimestamp">
            <summary>
            Prepare timestamp of the transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.TransactionRollbackTimestamp">
            <summary>
            Rollback timestamp of the transaction.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.RollbackPreparedFlags">
            <summary>
            Flags for the rollback prepared; currently unused.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage.RollbackPreparedFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.StreamAbortMessage">
            <summary>
            Logical Replication Protocol stream abort message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.SubtransactionXid">
            <summary>
            Xid of the subtransaction (will be same as xid of the transaction for top-level transactions).
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.StreamCommitMessage">
            <summary>
            Logical Replication Protocol stream commit message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.Flags">
            <summary>
            Flags; currently unused (must be 0).
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.CommitLsn">
            <summary>
            The LSN of the commit.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.TransactionEndLsn">
            <summary>
            The end LSN of the transaction.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.TransactionCommitTimestamp">
            <summary>
            Commit timestamp of the transaction.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage">
            <summary>
            Logical Replication Protocol stream prepare message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.Flags">
            <summary>
            Flags for the prepare; currently unused.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.StreamPrepareFlags">
            <summary>
            Flags for the prepare; currently unused.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage.StreamPrepareFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.StreamStartMessage">
            <summary>
            Logical Replication Protocol stream start message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.StreamStartMessage.StreamSegmentIndicator">
            <summary>
            A value of 1 indicates this is the first stream segment for this XID, 0 for any other stream segment.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.StreamStopMessage">
            <summary>
            Logical Replication Protocol stream stop message
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.TransactionalMessage">
            <summary>
            The common base class for all streaming replication messages that can be part of a streaming transaction (protocol V2)
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.TransactionalMessage.TransactionXid">
            <summary>
            Xid of the transaction (only present for streamed transactions).
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.TransactionControlMessage">
            <summary>
            The common base class for all replication messages that set the transaction xid of a transaction
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.TransactionXid">
            <summary>
            Xid of the transaction.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.TruncateMessage">
            <summary>
            Logical Replication Protocol truncate message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.TruncateMessage.Options">
            <summary>
            Option flags for TRUNCATE
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.TruncateMessage.Relations">
            <summary>
            The relations being truncated.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions">
            <summary>
            Enum representing the additional options for the TRUNCATE command as flags
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions.None">
            <summary>
            No additional option was specified
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions.Cascade">
            <summary>
            CASCADE was specified
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.Messages.TruncateMessage.TruncateOptions.RestartIdentity">
            <summary>
            RESTART IDENTITY was specified
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.TypeMessage">
            <summary>
            Logical Replication Protocol type message
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.TypeMessage.TypeId">
            <summary>
            ID of the data type.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.TypeMessage.Namespace">
            <summary>
            Namespace (empty string for pg_catalog).
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.TypeMessage.Name">
            <summary>
            Name of the data type.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.Messages.UpdateMessage">
            <summary>
            Abstract base class for Logical Replication Protocol delete message types.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.UpdateMessage.Relation">
            <summary>
            The relation for this <see cref="T:Npgsql.Replication.PgOutput.Messages.InsertMessage" />.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.Messages.UpdateMessage.NewRow">
            <summary>
            Columns representing the new row.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.PgOutputReplicationOptions">
            <summary>
            Options to be passed to the pgoutput plugin
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.#ctor(System.String,System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationOptions"/>.
            </summary>
            <param name="publicationName">The publication names to include into the stream</param>
            <param name="protocolVersion">The version of the logical streaming replication protocol</param>
            <param name="binary">Send values in binary representation</param>
            <param name="streaming">Enable streaming of in-progress transactions</param>
            <param name="messages">Write logical decoding messages into the replication stream</param>
            <param name="twoPhase">Enable streaming of prepared transactions</param>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.#ctor(System.Collections.Generic.IEnumerable{System.String},System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationOptions"/>.
            </summary>
            <param name="publicationNames">The publication names to include into the stream</param>
            <param name="protocolVersion">The version of the logical streaming replication protocol</param>
            <param name="binary">Send values in binary representation</param>
            <param name="streaming">Enable streaming of in-progress transactions</param>
            <param name="messages">Write logical decoding messages into the replication stream</param>
            <param name="twoPhase">Enable streaming of prepared transactions</param>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.ProtocolVersion">
            <summary>
            The version of the Logical Streaming Replication Protocol
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PublicationNames">
            <summary>
            The publication names to stream
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Binary">
            <summary>
            Send values in binary representation
            </summary>
            <remarks>
            This works in PostgreSQL versions 14+
            </remarks>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Streaming">
            <summary>
            Enable streaming of in-progress transactions
            </summary>
            <remarks>
            This works as of logical streaming replication protocol version 2 (PostgreSQL 14+)
            </remarks>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Messages">
            <summary>
            Write logical decoding messages into the replication stream
            </summary>
            <remarks>
            This works in PostgreSQL versions 14+
            </remarks>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.TwoPhase">
            <summary>
            Enable streaming of prepared transactions
            </summary>
            <remarks>
            This works in PostgreSQL versions 15+
            </remarks>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Equals(Npgsql.Replication.PgOutput.PgOutputReplicationOptions)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot">
            <summary>
            Acts as a proxy for a logical replication slot initialized for for the logical streaming replication protocol
            (pgoutput logical decoding plugin).
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationSlot.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot"/> instance.
            </summary>
            <remarks>
            Create a <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot"/> instance with this
            constructor to wrap an existing PostgreSQL replication slot that has
            been initialized for the pgoutput logical decoding plugin.
            </remarks>
            <param name="slotName">The name of the existing replication slot</param>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationSlot.#ctor(Npgsql.Replication.ReplicationSlotOptions)">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot"/> instance.
            </summary>
            <remarks>
            Create a <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot"/> instance with this
            constructor to wrap an existing PostgreSQL replication slot that has
            been initialized for the pgoutput logical decoding plugin.
            </remarks>
            <param name="options">The <see cref="T:Npgsql.Replication.ReplicationSlotOptions"/> representing the existing replication slot</param>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.PgOutputReplicationSlot.#ctor(Npgsql.Replication.PgOutput.PgOutputReplicationSlot)">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot"/> instance.
            </summary>
            <remarks>
            This constructor is intended to be consumed by plugins sitting on top of
            <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot"/>
            </remarks>
            <param name="slot">The <see cref="T:Npgsql.Replication.PgOutput.PgOutputReplicationSlot"/> from which the new instance should be initialized</param>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.ReplicationTuple">
            <summary>
            Represents a streaming tuple containing <see cref="T:Npgsql.Replication.PgOutput.ReplicationValue"/>.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.ReplicationTuple.NumColumns">
            <summary>
            The number of columns in the tuple.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationTuple.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.Replication.PgOutput.ReplicationValue">
            <summary>
            Represents a column value in a logical replication session.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.ReplicationValue.Length">
            <summary>
            The length of the value in bytes.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.ReplicationValue.Kind">
            <summary>
            The kind of data transmitted for a tuple in a Logical Replication Protocol message.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.ReplicationValue.IsDBNull">
            <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
            <returns><b>true</b> if the specified column is equivalent to <see cref="T:System.DBNull"/>; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Npgsql.Replication.PgOutput.ReplicationValue.IsUnchangedToastedValue">
            <summary>
            Gets a value that indicates whether the column contains an unchanged TOASTed value (the actual value is not sent).
            </summary>
            <returns>Whether the specified column is an unchanged TOASTed value.</returns>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationValue.GetPostgresType">
            <summary>
            Gets a representation of the PostgreSQL data type for the specified field.
            The returned representation can be used to access various information about the field.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationValue.GetDataTypeName">
            <summary>
            Gets the data type information for the specified field.
            This is be the PostgreSQL type name (e.g. double precision), not the .NET type
            (see <see cref="M:Npgsql.Replication.PgOutput.ReplicationValue.GetFieldType"/> for that).
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationValue.GetFieldType">
            <summary>
            Gets the data type of the specified column.
            </summary>
            <returns>The data type of the specified column.</returns>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationValue.Get``1(System.Threading.CancellationToken)">
            <summary>
            Gets the value of the specified column as a type.
            </summary>
            <typeparam name="T">The type of the value to be returned.</typeparam>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationValue.Get(System.Threading.CancellationToken)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationValue.GetStream">
            <summary>
            Retrieves data as a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PgOutput.ReplicationValue.GetTextReader">
            <summary>
            Retrieves data as a <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.PgOutput.TupleDataKind">
            <summary>
            The kind of data transmitted for a tuple in a Logical Replication Protocol message.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.TupleDataKind.Null">
            <summary>
            Identifies the data as NULL value.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.TupleDataKind.UnchangedToastedValue">
            <summary>
            Identifies unchanged TOASTed value (the actual value is not sent).
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.TupleDataKind.TextValue">
            <summary>
            Identifies the data as text formatted value.
            </summary>
        </member>
        <member name="F:Npgsql.Replication.PgOutput.TupleDataKind.BinaryValue">
            <summary>
            Identifies the data as binary value.
            </summary>
            <remarks>Added in PG14</remarks>
        </member>
        <member name="T:Npgsql.Replication.PgOutputConnectionExtensions">
            <summary>
            Extension methods to use <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> with the pg_output logical decoding plugin.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PgOutputConnectionExtensions.CreatePgOutputReplicationSlot(Npgsql.Replication.LogicalReplicationConnection,System.String,System.Boolean,System.Nullable{Npgsql.Replication.LogicalSlotSnapshotInitMode},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Npgsql.Replication.Internal.LogicalReplicationSlot"/> class that wraps a replication slot using the
            "pgoutput" logical decoding plugin and can be used to start streaming replication via the logical
            streaming replication protocol.
            </summary>
            <remarks>
            See <a href="https://www.postgresql.org/docs/current/protocol-logical-replication.html">https://www.postgresql.org/docs/current/protocol-logical-replication.html</a>
            and <a href="https://www.postgresql.org/docs/current/protocol-logicalrep-message-formats.html">https://www.postgresql.org/docs/current/protocol-logicalrep-message-formats.html</a>
            for more information.
            </remarks>
            <param name="connection">The <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> to use for creating the replication slot</param>
            <param name="slotName">The name of the slot to create. Must be a valid replication slot name (see
            <a href="https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION">https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION</a>).
            </param>
            <param name="temporarySlot">
            <see langword="true"/> if this replication slot shall be temporary one; otherwise <see langword="false"/>.
            Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished.
            </param>
            <param name="slotSnapshotInitMode">
            A <see cref="T:Npgsql.Replication.LogicalSlotSnapshotInitMode"/> to specify what to do with the snapshot created during logical slot
            initialization. <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Export"/>, which is also the default, will export the
            snapshot for use in other sessions. This option can't be used inside a transaction.
            <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Use"/> will use the snapshot for the current transaction executing the
            command. This option must be used in a transaction, and <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Use"/> must be the
            first command run in that transaction. Finally, <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.NoExport"/> will just use
            the snapshot for logical decoding as normal but won't do anything else with it.
            </param>
            <param name="twoPhase">
            If <see langword="true"/>, this logical replication slot supports decoding of two-phase transactions. With this option,
            two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted.
            The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is <see langword="false"/>.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>
            A <see cref="T:Npgsql.Replication.Internal.LogicalReplicationSlot"/> that wraps the newly-created replication slot.
            </returns>
        </member>
        <member name="M:Npgsql.Replication.PgOutputConnectionExtensions.StartReplication(Npgsql.Replication.LogicalReplicationConnection,Npgsql.Replication.PgOutput.PgOutputReplicationSlot,Npgsql.Replication.PgOutput.PgOutputReplicationOptions,System.Threading.CancellationToken,System.Nullable{NpgsqlTypes.NpgsqlLogSequenceNumber})">
            <summary>
            Instructs the server to start the Logical Streaming Replication Protocol (pgoutput logical decoding plugin),
            starting at WAL location <paramref name="walLocation"/> or at the slot's consistent point if <paramref name="walLocation"/>
            isn't specified.
            The server can reply with an error, for example if the requested section of the WAL has already been recycled.
            </summary>
            <param name="connection">The <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> to use for starting replication</param>
            <param name="slot">The replication slot that will be updated as replication progresses so that the server
            knows which WAL segments are still needed by the standby.
            </param>
            <param name="options">The collection of options passed to the slot's logical decoding plugin.</param>
            <param name="cancellationToken">The token to monitor for stopping the replication.</param>
            <param name="walLocation">The WAL location to begin streaming at.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that
            can be used to stream WAL entries in form of <see cref="T:Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage"/> instances.</returns>
        </member>
        <member name="T:Npgsql.Replication.PhysicalReplicationConnection">
            <summary>
            Represents a physical replication connection to a PostgreSQL server.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationConnection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.Replication.PhysicalReplicationConnection"/>.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Npgsql.Replication.PhysicalReplicationConnection"/> with the given connection string.
            </summary>
            <param name="connectionString">The connection used to open the PostgreSQL database.</param>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationConnection.CreateReplicationSlot(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Npgsql.Replication.PhysicalReplicationSlot"/> that wraps a PostgreSQL physical replication slot and
            can be used to start physical streaming replication
            </summary>
            <param name="slotName">
            The name of the slot to create. Must be a valid replication slot name
            (see <a href="https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION">Section 26.2.6.1</a>).
            </param>
            <param name="isTemporary">
            <see langword="true"/> if this replication slot shall be a temporary one; otherwise
            <see langword="false"/>. Temporary slots are not saved to disk and are automatically dropped on error or
            when the session has finished.
            </param>
            <param name="reserveWal">
            If this is set to <see langword="true"/> this physical replication slot reserves WAL immediately. Otherwise,
            WAL is only reserved upon connection from a streaming replication client.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing a <see cref="T:Npgsql.Replication.PhysicalReplicationSlot"/> that represents the
            newly-created replication slot.
            </returns>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationConnection.ReadReplicationSlot(System.String,System.Threading.CancellationToken)">
            <summary>
            Read some information associated to a replication slot.
            <remarks>
            This command is currently only supported for physical replication slots.
            </remarks>
            </summary>
            <param name="slotName">
            The name of the slot to read. Must be a valid replication slot name
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing a <see cref="T:Npgsql.Replication.PhysicalReplicationSlot"/> or <see langword="null"/>
            if the replication slot does not exist.</returns>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationConnection.StartReplication(Npgsql.Replication.PhysicalReplicationSlot,NpgsqlTypes.NpgsqlLogSequenceNumber,System.Threading.CancellationToken,System.UInt32)">
            <summary>
            Instructs the server to start streaming the WAL for physical replication, starting at WAL location
            <paramref name="walLocation"/>. The server can reply with an error, for example if the requested
            section of the WAL has already been recycled.
            </summary>
            <remarks>
            If the client requests a timeline that's not the latest but is part of the history of the server, the server
            will stream all the WAL on that timeline starting from the requested start point up to the point where the
            server switched to another timeline.
            </remarks>
            <param name="slot">
            The replication slot that will be updated as replication progresses so that the server
            knows which WAL segments are still needed by the standby.
            </param>
            <param name="walLocation">The WAL location to begin streaming at.</param>
            <param name="cancellationToken">The token to be used for stopping the replication.</param>
            <param name="timeline">Streaming starts on timeline tli.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that
            can be used to stream WAL entries in form of <see cref="T:Npgsql.Replication.XLogDataMessage"/> instances.</returns>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationConnection.StartReplication(NpgsqlTypes.NpgsqlLogSequenceNumber,System.Threading.CancellationToken,System.UInt32)">
            <summary>
            Instructs the server to start streaming the WAL for logical replication, starting at WAL location
            <paramref name="walLocation"/>. The server can reply with an error, for example if the requested
            section of WAL has already been recycled.
            </summary>
            <remarks>
            If the client requests a timeline that's not the latest but is part of the history of the server, the server
            will stream all the WAL on that timeline starting from the requested start point up to the point where the
            server switched to another timeline.
            </remarks>
            <param name="walLocation">The WAL location to begin streaming at.</param>
            <param name="cancellationToken">The token to be used for stopping the replication.</param>
            <param name="timeline">Streaming starts on timeline tli.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that
            can be used to stream WAL entries in form of <see cref="T:Npgsql.Replication.XLogDataMessage"/> instances.</returns>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationConnection.StartReplication(Npgsql.Replication.PhysicalReplicationSlot,System.Threading.CancellationToken)">
            <summary>
            Instructs the server to start streaming the WAL for physical replication, starting at the WAL location
            and timeline id specified in <paramref name="slot"/>. The server can reply with an error, for example
            if the requested section of the WAL has already been recycled.
            </summary>
            <remarks>
            If the client requests a timeline that's not the latest but is part of the history of the server, the server
            will stream all the WAL on that timeline starting from the requested start point up to the point where the
            server switched to another timeline.
            </remarks>
            <param name="slot">
            The replication slot that will be updated as replication progresses so that the server
            knows which WAL segments are still needed by the standby.
            <remarks>
            The <paramref name="slot"/> must contain a valid <see cref="P:Npgsql.Replication.PhysicalReplicationSlot.RestartLsn"/> to be used for this overload.
            </remarks>
            </param>
            <param name="cancellationToken">The token to be used for stopping the replication.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that
            can be used to stream WAL entries in form of <see cref="T:Npgsql.Replication.XLogDataMessage"/> instances.</returns>
        </member>
        <member name="T:Npgsql.Replication.PhysicalReplicationSlot">
            <summary>
            Wraps a replication slot that uses physical replication.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.PhysicalReplicationSlot.#ctor(System.String,System.Nullable{NpgsqlTypes.NpgsqlLogSequenceNumber},System.Nullable{System.UInt32})">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.PhysicalReplicationSlot"/> instance.
            </summary>
            <remarks>
            Create a <see cref="T:Npgsql.Replication.PhysicalReplicationSlot"/> instance with this constructor to wrap an existing PostgreSQL replication slot
            that has been initialized for physical replication.
            </remarks>
            <param name="slotName">The name of the existing replication slot</param>
            <param name="restartLsn">The replication slot's <c>restart_lsn</c></param>
            <param name="restartTimeline">The timeline ID associated to <c>restart_lsn</c>, following the current timeline history.</param>
        </member>
        <member name="P:Npgsql.Replication.PhysicalReplicationSlot.RestartLsn">
            <summary>
            The replication slot's <c>restart_lsn</c>.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.PhysicalReplicationSlot.RestartTimeline">
            <summary>
            The timeline ID associated to <c>restart_lsn</c>, following the current timeline history.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.ReplicationConnection">
            <summary>
            Defines the core behavior of replication connections and provides the base class for
            <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> and
            <see cref="T:Npgsql.Replication.PhysicalReplicationConnection"/>.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.ConnectionString">
            <summary>
            Gets or sets the string used to connect to a PostgreSQL database. See the manual for details.
            </summary>
            <value>
            The connection string that includes the server name, the database name, and other parameters needed to establish the initial
            connection. The default value is an empty string.
            </value>
            <remarks>
            Since replication connections are a special kind of connection,
            <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.Pooling"/>, <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.Enlist"/>,
            <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.Multiplexing" /> and <see cref="P:Npgsql.NpgsqlConnectionStringBuilder.KeepAlive"/>
            are always disabled no matter what you set them to in your connection string.
            </remarks>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.LastReceivedLsn">
            <summary>
            The location of the last WAL byte + 1 received in the standby.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.LastFlushedLsn">
            <summary>
            The location of the last WAL byte + 1 flushed to disk in the standby.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.LastAppliedLsn">
            <summary>
            The location of the last WAL byte + 1 applied (e. g. written to disk) in the standby.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.WalReceiverStatusInterval">
            <summary>
            Send replies at least this often.
            Timeout.<see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> disables automated replies.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.WalReceiverTimeout">
            <summary>
            Time that receiver waits for communication from master.
            Timeout.<see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> disables the timeout.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.PostgreSqlVersion">
            <summary>
            The version of the PostgreSQL server we're connected to.
            <remarks>
            <p>
            This can only be called when the connection is open.
            </p>
            <p>
            In case of a development or pre-release version this field will contain
            the version of the next version to be released from this branch.
            </p>
            </remarks>
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.ServerVersion">
            <summary>
            The PostgreSQL server version as returned by the server_version option.
            <remarks>
            This can only be called when the connection is open.
            </remarks>
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt  to execute a command and generating an error.
            </summary>
            <value>The time to wait for the command to execute. The default value is 30 seconds.</value>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.Encoding">
            <summary>
            The client encoding for the connection
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationConnection.ProcessID">
            <summary>
            Process id of backend server.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.Open(System.Threading.CancellationToken)">
            <summary>
            Opens a database replication connection with the property settings specified by the
            <see cref="P:Npgsql.Replication.ReplicationConnection.ConnectionString"/>.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous open operation.</returns>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.DisposeAsync">
            <summary>
            Closes the replication connection and performs tasks associated
            with freeing, releasing, or resetting its unmanaged resources asynchronously.
            </summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.IdentifySystem(System.Threading.CancellationToken)">
            <summary>
            Requests the server to identify itself.
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>
            A <see cref="T:Npgsql.Replication.ReplicationSystemIdentification"/> containing information about the system we are connected to.
            </returns>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.Show(System.String,System.Threading.CancellationToken)">
            <summary>
            Requests the server to send the current setting of a run-time parameter.
            This is similar to the SQL command SHOW.
            </summary>
            <param name="parameterName">The name of a run-time parameter.
            Available parameters are documented in https://www.postgresql.org/docs/current/runtime-config.html.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The current setting of the run-time parameter specified in <paramref name="parameterName"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.TimelineHistory(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Requests the server to send over the timeline history file for timeline tli.
            </summary>
            <param name="tli">The timeline for which the history file should be sent.</param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The timeline history file for timeline tli</returns>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.SetReplicationStatus(NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Sets the current status of the replication as it is interpreted by the consuming client. The value supplied
            in <see paramref="lastAppliedAndFlushedLsn" /> will be sent to the server via <see cref="P:Npgsql.Replication.ReplicationConnection.LastAppliedLsn"/> and
            <see cref="P:Npgsql.Replication.ReplicationConnection.LastFlushedLsn"/> with the next status update.
            <para>
            A status update which will happen upon server request, upon expiration of <see cref="P:Npgsql.Replication.ReplicationConnection.WalReceiverStatusInterval"/>
            our upon an enforced status update via <see cref="M:Npgsql.Replication.ReplicationConnection.SendStatusUpdate(System.Threading.CancellationToken)"/>, whichever happens first.
            If you want the value you set here to be pushed to the server immediately (e. g. in synchronous replication scenarios),
            call <see cref="M:Npgsql.Replication.ReplicationConnection.SendStatusUpdate(System.Threading.CancellationToken)"/> after calling this method.
            </para>
            </summary>
            <remarks>
            This is a convenience method setting both <see cref="P:Npgsql.Replication.ReplicationConnection.LastAppliedLsn"/> and <see cref="P:Npgsql.Replication.ReplicationConnection.LastFlushedLsn"/> in one operation.
            You can use it if your application processes replication messages in  a way that doesn't care about the difference between
            writing a message and flushing it to a permanent storage medium.
            </remarks>
            <param name="lastAppliedAndFlushedLsn">The location of the last WAL byte + 1 applied (e. g. processed or written to disk) and flushed to disk in the standby.</param>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.SendStatusUpdate(System.Threading.CancellationToken)">
            <summary>
            Sends a forced status update to PostgreSQL with the current WAL tracking information.
            </summary>
            <exception cref="T:System.InvalidOperationException">The connection currently isn't streaming</exception>
            <returns>A Task representing the sending of the status update (and not any PostgreSQL response).</returns>
        </member>
        <member name="M:Npgsql.Replication.ReplicationConnection.DropReplicationSlot(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Drops a replication slot, freeing any reserved server-side resources.
            If the slot is a logical slot that was created in a database other than
            the database the walsender is connected to, this command fails.
            </summary>
            <param name="slotName">The name of the slot to drop.</param>
            <param name="wait">
            <see langword="true"/> causes the command to wait until the slot becomes
            inactive if it currently is active instead of the default behavior of raising an error.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>A task representing the asynchronous drop operation.</returns>
        </member>
        <member name="T:Npgsql.Replication.ReplicationMessage">
            <summary>
            The common base class for all streaming replication messages
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationMessage.WalStart">
            <summary>
            The starting point of the WAL data in this message.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationMessage.WalEnd">
            <summary>
            The current end of WAL on the server.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationMessage.ServerClock">
            <summary>
            The server's system clock at the time this message was transmitted, as microseconds since midnight on 2000-01-01.
            </summary>
            <remarks>
            Since the client using Npgsql and the server may be located in different time zones,
            as of Npgsql 7.0 this value is no longer converted to local time but keeps its original value in UTC.
            You can check <see cref="P:System.DateTime.Kind"/> if you don't want to introduce behavior depending on Npgsql versions.
            </remarks>
        </member>
        <member name="T:Npgsql.Replication.ReplicationSlot">
            <summary>
            Contains information about a newly-created replication slot.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSlot.Name">
            <summary>
            The name of the newly-created replication slot.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.ReplicationSlotOptions">
            <summary>
            Contains information about a replication slot.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.ReplicationSlotOptions.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.ReplicationSlotOptions"/> instance.
            </summary>
            <param name="slotName">
            The name of the replication slot.
            </param>
            <param name="consistentPoint">
            The WAL location at which the slot became consistent.
            </param>
        </member>
        <member name="M:Npgsql.Replication.ReplicationSlotOptions.#ctor(System.String,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.ReplicationSlotOptions"/> instance.
            </summary>
            <param name="slotName">
            The name of the replication slot.
            </param>
            <param name="consistentPoint">
            The WAL location at which the slot became consistent.
            </param>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSlotOptions.SlotName">
            <summary>
            The name of the replication slot.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSlotOptions.ConsistentPoint">
            <summary>
            The WAL location at which the slot became consistent.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSlotOptions.SnapshotName">
            <summary>
            The identifier of the snapshot exported by the CREATE_REPLICATION_SLOT command.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.ReplicationSystemIdentification">
            <summary>
            Contains server identification information returned from <see cref="M:Npgsql.Replication.ReplicationConnection.IdentifySystem(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSystemIdentification.SystemId">
            <summary>
            The unique system identifier identifying the cluster.
            This can be used to check that the base backup used to initialize the standby came from the same cluster.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSystemIdentification.Timeline">
            <summary>
            Current timeline ID. Also useful to check that the standby is consistent with the master.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSystemIdentification.XLogPos">
            <summary>
            Current WAL flush location. Useful to get a known location in the write-ahead log where streaming can start.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.ReplicationSystemIdentification.DbName">
            <summary>
            Database connected to.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.TestDecoding.TestDecodingData">
            <summary>
            Text representations of PostgreSQL WAL operations decoded by the "test_decoding" plugin. See
            https://www.postgresql.org/docs/current/test-decoding.html.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingData.Data">
            <summary>
            Decoded text representation of the operation performed in this WAL entry
            </summary>
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingData.ToString">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingData.Clone">
            <summary>
            Returns a clone of this message, which can be accessed after other replication messages have been retrieved.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.TestDecoding.TestDecodingOptions">
            <summary>
            Options to be passed to the test_decoding plugin
            </summary>
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingOptions.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingOptions"/>.
            </summary>
            <param name="includeXids">Include the transaction number for BEGIN and COMMIT command output</param>
            <param name="includeTimestamp">Include the timestamp for COMMIT command output</param>
            <param name="forceBinary">Set the <a href="https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html#LOGICALDECODING-OUTPUT-MODE">output mode</a> to binary</param>
            <param name="skipEmptyXacts">Skip output for transactions that didn't change the database</param>
            <param name="onlyLocal">Only output data that don't have the <a href="https://www.postgresql.org/docs/11/replication-origins.html">replication origin</a> set</param>
            <param name="includeRewrites">Include output from table rewrites that were caused by DDL statements</param>
            <param name="streamChanges">Enable streaming output</param>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingOptions.IncludeXids">
            <summary>
            Include the transaction number for BEGIN and COMMIT command output
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingOptions.IncludeTimestamp">
            <summary>
            Include the timestamp for COMMIT command output
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingOptions.ForceBinary">
            <summary>
            Set the <a href="https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html#LOGICALDECODING-OUTPUT-MODE">output mode</a> to binary
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingOptions.SkipEmptyXacts">
            <summary>
            Skip output for transactions that didn't change the database
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingOptions.OnlyLocal">
            <summary>
            Only output data that don't have the <a href="https://www.postgresql.org/docs/11/replication-origins.html">replication origin</a> set
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingOptions.IncludeRewrites">
            <summary>
            Include output from table rewrites that were caused by DDL statements
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TestDecoding.TestDecodingOptions.StreamChanges">
            <summary>
            Enable streaming output
            </summary>
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingOptions.Equals(Npgsql.Replication.TestDecoding.TestDecodingOptions)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot">
            <summary>
            Acts as a proxy for a logical replication slot
            initialized for for the test_decoding logical decoding plugin.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot"/> instance.
            </summary>
            <remarks>
            Create a <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot"/> instance with this
            constructor to wrap an existing PostgreSQL replication slot that has
            been initialized for the test_decoding logical decoding plugin.
            </remarks>
            <param name="slotName">The name of the existing replication slot</param>
        </member>
        <member name="M:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot.#ctor(Npgsql.Replication.ReplicationSlotOptions)">
            <summary>
            Creates a new <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot"/> instance.
            </summary>
            <remarks>
            Create a <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot"/> instance with this
            constructor to wrap an existing PostgreSQL replication slot that has
            been initialized for the test_decoding logical decoding plugin.
            </remarks>
            <param name="options">The <see cref="T:Npgsql.Replication.ReplicationSlotOptions"/> representing the existing replication slot</param>
        </member>
        <member name="T:Npgsql.Replication.TestDecodingConnectionExtensions">
            <summary>
            Extension methods to use <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> with the
            test_decoding logical decoding plugin.
            See <a href="https://www.postgresql.org/docs/current/test-decoding.html">https://www.postgresql.org/docs/current/test-decoding.html</a>.
            </summary>
        </member>
        <member name="M:Npgsql.Replication.TestDecodingConnectionExtensions.CreateTestDecodingReplicationSlot(Npgsql.Replication.LogicalReplicationConnection,System.String,System.Boolean,System.Nullable{Npgsql.Replication.LogicalSlotSnapshotInitMode},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot"/> class that wraps a replication slot using the
            test_decoding logical decoding plugin.
            </summary>
            <remarks>
            See <a href="https://www.postgresql.org/docs/current/test-decoding.html">https://www.postgresql.org/docs/current/test-decoding.html</a>
            for more information.
            </remarks>
            <param name="connection">The <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> to use for creating the
            replication slot</param>
            <param name="slotName">The name of the slot to create. Must be a valid replication slot name (see
            <a href="https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION">https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS-MANIPULATION</a>).
            </param>
            <param name="temporarySlot">
            <see langword="true"/> if this replication slot shall be temporary one; otherwise <see langword="false"/>.
            Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished.
            </param>
            <param name="slotSnapshotInitMode">
            A <see cref="T:Npgsql.Replication.LogicalSlotSnapshotInitMode"/> to specify what to do with the snapshot created during logical slot
            initialization. <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Export"/>, which is also the default, will export the
            snapshot for use in other sessions. This option can't be used inside a transaction.
            <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Use"/> will use the snapshot for the current transaction executing the
            command. This option must be used in a transaction, and <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.Use"/> must be the
            first command run in that transaction. Finally, <see cref="F:Npgsql.Replication.LogicalSlotSnapshotInitMode.NoExport"/> will just use
            the snapshot for logical decoding as normal but won't do anything else with it.
            </param>
            <param name="twoPhase">
            If <see langword="true"/>, this logical replication slot supports decoding of two-phase transactions. With this option,
            two-phase commands like PREPARE TRANSACTION, COMMIT PREPARED and ROLLBACK PREPARED are decoded and transmitted.
            The transaction will be decoded and transmitted at PREPARE TRANSACTION time. The default is <see langword="false"/>.
            </param>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>
            A <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot"/> that wraps the newly-created replication slot.
            </returns>
        </member>
        <member name="M:Npgsql.Replication.TestDecodingConnectionExtensions.StartReplication(Npgsql.Replication.LogicalReplicationConnection,Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot,System.Threading.CancellationToken,Npgsql.Replication.TestDecoding.TestDecodingOptions,System.Nullable{NpgsqlTypes.NpgsqlLogSequenceNumber})">
            <summary>
            Instructs the server to start streaming the WAL for logical replication using the test_decoding logical decoding plugin,
            starting at WAL location <paramref name="walLocation"/> or at the slot's consistent point if <paramref name="walLocation"/>
            isn't specified.
            The server can reply with an error, for example if the requested section of the WAL has already been recycled.
            </summary>
            <param name="connection">The <see cref="T:Npgsql.Replication.LogicalReplicationConnection"/> to use for starting replication</param>
            <param name="slot">The replication slot that will be updated as replication progresses so that the server
            knows which WAL segments are still needed by the standby.
            </param>
            <param name="cancellationToken">The token to monitor for stopping the replication.</param>
            <param name="options">The collection of options passed to the slot's logical decoding plugin.</param>
            <param name="walLocation">The WAL location to begin streaming at.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that
            can be used to stream WAL entries in form of <see cref="T:Npgsql.Replication.TestDecoding.TestDecodingData"/> instances.</returns>
        </member>
        <member name="T:Npgsql.Replication.TimelineHistoryFile">
            <summary>
            Represents a PostgreSQL timeline history file
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TimelineHistoryFile.FileName">
            <summary>
            File name of the timeline history file, e.g., 00000002.history.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.TimelineHistoryFile.Content">
            <summary>
            Contents of the timeline history file.
            </summary>
        </member>
        <member name="T:Npgsql.Replication.XLogDataMessage">
            <summary>
            A message representing a section of the WAL data stream.
            </summary>
        </member>
        <member name="P:Npgsql.Replication.XLogDataMessage.Data">
            <summary>
            A section of the WAL data stream that is raw WAL data in physical replication or decoded with the selected
            logical decoding plugin in logical replication. It is only valid until the next <see cref="T:Npgsql.Replication.XLogDataMessage"/>
            is requested from the stream.
            </summary>
            <remarks>
            A single WAL record is never split across two XLogData messages.
            When a WAL record crosses a WAL page boundary, and is therefore already split using continuation records,
            it can be split at the page boundary. In other words, the first main WAL record and its continuation
            records can be sent in different XLogData messages.
            </remarks>
        </member>
        <member name="M:Npgsql.Schema.DbColumnSchemaGenerator.GenerateOldColumnsQuery(System.String)">
            <summary>
            Stripped-down version of <see cref="M:Npgsql.Schema.DbColumnSchemaGenerator.GenerateColumnsQuery(System.Version,System.String)"/>, mainly to support Amazon Redshift.
            </summary>
        </member>
        <member name="M:Npgsql.Schema.DbColumnSchemaGenerator.ColumnPostConfig(Npgsql.Schema.NpgsqlDbColumn,System.Int32)">
            <summary>
            Performs some post-setup configuration that's common to both table columns and non-columns.
            </summary>
        </member>
        <member name="T:Npgsql.Schema.NpgsqlDbColumn">
             <summary>
             Provides schema information about a column.
             </summary>
             <remarks>
             Note that this can correspond to a field returned in a query which isn't an actual table column
            
             See https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldatareader.getschematable(v=vs.110).aspx
             for information on the meaning of the different fields.
             </remarks>
        </member>
        <member name="M:Npgsql.Schema.NpgsqlDbColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.Schema.NpgsqlDbColumn" /> class.
            </summary>
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.AllowDBNull">
            <inheritdoc cref="P:System.Data.Common.DbColumn.AllowDBNull" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.BaseCatalogName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.BaseCatalogName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.BaseColumnName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.BaseColumnName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.BaseSchemaName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.BaseSchemaName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.BaseServerName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.BaseServerName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.BaseTableName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.BaseTableName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.ColumnName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.ColumnName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.ColumnOrdinal">
            <inheritdoc cref="P:System.Data.Common.DbColumn.ColumnOrdinal" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.ColumnSize">
            <inheritdoc cref="P:System.Data.Common.DbColumn.ColumnSize" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.IsAliased">
            <inheritdoc cref="P:System.Data.Common.DbColumn.IsAliased" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.IsAutoIncrement">
            <inheritdoc cref="P:System.Data.Common.DbColumn.IsAutoIncrement" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.IsIdentity">
            <inheritdoc cref="P:System.Data.Common.DbColumn.IsIdentity" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.IsKey">
            <inheritdoc cref="P:System.Data.Common.DbColumn.IsKey" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.IsLong">
            <inheritdoc cref="P:System.Data.Common.DbColumn.IsLong" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.IsReadOnly">
            <inheritdoc cref="P:System.Data.Common.DbColumn.IsReadOnly" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.IsUnique">
            <inheritdoc cref="P:System.Data.Common.DbColumn.IsUnique" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.NumericPrecision">
            <inheritdoc cref="P:System.Data.Common.DbColumn.NumericPrecision" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.NumericScale">
            <inheritdoc cref="P:System.Data.Common.DbColumn.NumericScale" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.UdtAssemblyQualifiedName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.UdtAssemblyQualifiedName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.DataType">
            <inheritdoc cref="P:System.Data.Common.DbColumn.DataType" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.DataTypeName">
            <inheritdoc cref="P:System.Data.Common.DbColumn.DataTypeName" />
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.PostgresType">
            <summary>
            The <see cref="P:Npgsql.Schema.NpgsqlDbColumn.PostgresType" /> describing the type of this column.
            </summary>
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.TypeOID">
            <summary>
            The OID of the type of this column in the PostgreSQL pg_type catalog table.
            </summary>
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.TableOID">
            <summary>
            The OID of the PostgreSQL table of this column.
            </summary>
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.ColumnAttributeNumber">
            <summary>
            The column's position within its table. Note that this is different from <see cref="P:Npgsql.Schema.NpgsqlDbColumn.ColumnOrdinal" />,
            which is the column's position within the resultset.
            </summary>
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.DefaultValue">
            <summary>
            The default SQL expression for this column.
            </summary>
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.NpgsqlDbType">
            <summary>
            The <see cref="P:Npgsql.Schema.NpgsqlDbColumn.NpgsqlDbType" /> value for this column's type.
            </summary>
        </member>
        <member name="P:Npgsql.Schema.NpgsqlDbColumn.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.SqlQueryParser.ParseRawQuery(Npgsql.NpgsqlCommand,System.Boolean,System.Boolean)">
            <summary>
            <p>
            Receives a user SQL query as passed in by the user in <see cref="P:Npgsql.NpgsqlCommand.CommandText"/> or
            <see cref="P:Npgsql.NpgsqlBatchCommand.CommandText"/>, and rewrites it for PostgreSQL compatibility.
            </p>
            <p>
            This includes doing rewriting named parameter placeholders to positional (@p => $1), and splitting the query
            up by semicolons (legacy batching, SELECT 1; SELECT 2).
            </p>
            </summary>
            <param name="command">The user-facing <see cref="T:Npgsql.NpgsqlCommand"/> being executed.</param>
            <param name="standardConformingStrings">Whether PostgreSQL standards-conforming are used.</param>
            <param name="deriveParameters">
            A bool indicating whether parameters contains a list of preconfigured parameters or an empty list to be filled with derived
            parameters.
            </param>
        </member>
        <member name="M:Npgsql.SqlQueryParser.ParseRawQuery(Npgsql.NpgsqlBatchCommand,System.Boolean,System.Boolean)">
            <summary>
            <p>
            Receives a user SQL query as passed in by the user in <see cref="P:Npgsql.NpgsqlCommand.CommandText"/> or
            <see cref="P:Npgsql.NpgsqlBatchCommand.CommandText"/>, and rewrites it for PostgreSQL compatibility.
            </p>
            <p>
            This includes doing rewriting named parameter placeholders to positional (@p => $1), and splitting the query
            up by semicolons (legacy batching, SELECT 1; SELECT 2).
            </p>
            </summary>
            <param name="batchCommand"> The user-facing <see cref="T:Npgsql.NpgsqlBatchCommand"/> being executed.</param>
            <param name="standardConformingStrings">Whether PostgreSQL standards-conforming are used.</param>
            <param name="deriveParameters">
            A bool indicating whether parameters contains a list of preconfigured parameters or an empty list to be filled with derived
            parameters.
            </param>
        </member>
        <member name="T:Npgsql.TargetSessionAttributes">
            <summary>
            Specifies server type preference.
            </summary>
        </member>
        <member name="F:Npgsql.TargetSessionAttributes.Any">
            <summary>
            Any successful connection is acceptable.
            </summary>
        </member>
        <member name="F:Npgsql.TargetSessionAttributes.ReadWrite">
            <summary>
            Session must accept read-write transactions by default (that is, the server must not be in hot standby mode and the
            <c>default_transaction_read_only</c> parameter must be off).
            </summary>
        </member>
        <member name="F:Npgsql.TargetSessionAttributes.ReadOnly">
            <summary>
            Session must not accept read-write transactions by default (the converse).
            </summary>
        </member>
        <member name="F:Npgsql.TargetSessionAttributes.Primary">
            <summary>
            Server must not be in hot standby mode.
            </summary>
        </member>
        <member name="F:Npgsql.TargetSessionAttributes.Standby">
            <summary>
            Server must be in hot standby mode.
            </summary>
        </member>
        <member name="F:Npgsql.TargetSessionAttributes.PreferPrimary">
            <summary>
            First try to find a primary server, but if none of the listed hosts is a primary server, try again in <see cref="F:Npgsql.TargetSessionAttributes.Any"/> mode.
            </summary>
        </member>
        <member name="F:Npgsql.TargetSessionAttributes.PreferStandby">
            <summary>
            First try to find a standby server, but if none of the listed hosts is a standby server, try again in <see cref="F:Npgsql.TargetSessionAttributes.Any"/> mode.
            </summary>
        </member>
        <member name="T:Npgsql.TaskTimeoutAndCancellation">
            <summary>
            Utility class to execute a potentially non-cancellable <see cref="T:System.Threading.Tasks.Task"/> while allowing to timeout and/or cancel awaiting for it and at the same time prevent <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException"/> event if the original <see cref="T:System.Threading.Tasks.Task"/> fails later.
            </summary>
        </member>
        <member name="M:Npgsql.TaskTimeoutAndCancellation.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Npgsql.Util.NpgsqlTimeout,System.Threading.CancellationToken)">
            <summary>
            Executes a potentially non-cancellable <see cref="T:System.Threading.Tasks.Task`1"/> while allowing to timeout and/or cancel awaiting for it.
            If the given task does not complete within <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            The executed <see cref="T:System.Threading.Tasks.Task`1"/> may be left in an incomplete state after the <see cref="T:System.Threading.Tasks.Task`1"/> that this method returns completes dues to timeout and/or cancellation request.
            The method guarantees that the abandoned, incomplete <see cref="T:System.Threading.Tasks.Task`1"/> is not going to produce <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException"/> event if it fails later.
            </summary>
            <param name="getTaskFunc">Gets the <see cref="T:System.Threading.Tasks.Task`1"/> for execution with a combined <see cref="T:System.Threading.CancellationToken"/> that attempts to cancel the <see cref="T:System.Threading.Tasks.Task`1"/> in an event of the timeout or external cancellation request.</param>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task`1"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <typeparam name="TResult">The result <see cref="T:System.Type"/>.</typeparam>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous wait.</returns>
        </member>
        <member name="M:Npgsql.TaskTimeoutAndCancellation.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},Npgsql.Util.NpgsqlTimeout,System.Threading.CancellationToken)">
            <summary>
            Executes a potentially non-cancellable <see cref="T:System.Threading.Tasks.Task"/> while allowing to timeout and/or cancel awaiting for it.
            If the given task does not complete within <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            The executed <see cref="T:System.Threading.Tasks.Task"/> may be left in an incomplete state after the <see cref="T:System.Threading.Tasks.Task"/> that this method returns completes dues to timeout and/or cancellation request.
            The method guarantees that the abandoned, incomplete <see cref="T:System.Threading.Tasks.Task"/> is not going to produce <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException"/> event if it fails later.
            </summary>
            <param name="getTaskFunc">Gets the <see cref="T:System.Threading.Tasks.Task"/> for execution with a combined <see cref="T:System.Threading.CancellationToken"/> that attempts to cancel the <see cref="T:System.Threading.Tasks.Task"/> in an event of the timeout or external cancellation request.</param>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.</returns>
        </member>
        <member name="T:Npgsql.TypeMapping.GlobalTypeMapper">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.AddTypeInfoResolverFactory(Npgsql.Internal.PgTypeInfoResolverFactory)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.Reset">
            <inheritdoc />
        </member>
        <member name="P:Npgsql.TypeMapping.GlobalTypeMapper.DefaultNameTranslator">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.ConfigureJsonOptions(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.EnableDynamicJson(System.Type[],System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.EnableRecordsAsTuples">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.EnableUnmappedTypes">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.MapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.UnmapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.MapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.UnmapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.MapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.UnmapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.MapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="M:Npgsql.TypeMapping.GlobalTypeMapper.UnmapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <inheritdoc />
        </member>
        <member name="T:Npgsql.TypeMapping.INpgsqlTypeMapper">
            <summary>
            A type mapper, managing how to read and write CLR values to PostgreSQL data types.
            </summary>
            <remarks>
            The preferred way to manage type mappings is on <see cref="T:Npgsql.NpgsqlDataSourceBuilder" />. An alternative, but discouraged, method, is to
            manage them globally via <see cref="P:Npgsql.NpgsqlConnection.GlobalTypeMapper"/>).
            </remarks>
        </member>
        <member name="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator">
            <summary>
            The default name translator to convert CLR type names and member names. Defaults to <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.
            </summary>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.MapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Maps a CLR enum to a PostgreSQL enum type.
            </summary>
            <remarks>
            CLR enum labels are mapped by name to PostgreSQL enum labels.
            The translation strategy can be controlled by the <paramref name="nameTranslator"/> parameter,
            which defaults to <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.
            You can also use the <see cref="T:NpgsqlTypes.PgNameAttribute"/> on your enum fields to manually specify a PostgreSQL enum label.
            If there is a discrepancy between the .NET and database labels while an enum is read or written,
            an exception will be raised.
            </remarks>
            <param name="pgName">
            A PostgreSQL type name for the corresponding enum type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            </param>
            <typeparam name="TEnum">The .NET enum type to be mapped</typeparam>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.UnmapEnum``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Removes an existing enum mapping.
            </summary>
            <param name="pgName">
            A PostgreSQL type name for the corresponding enum type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            </param>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.MapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Maps a CLR enum to a PostgreSQL enum type.
            </summary>
            <remarks>
            CLR enum labels are mapped by name to PostgreSQL enum labels.
            The translation strategy can be controlled by the <paramref name="nameTranslator"/> parameter,
            which defaults to <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.
            You can also use the <see cref="T:NpgsqlTypes.PgNameAttribute"/> on your enum fields to manually specify a PostgreSQL enum label.
            If there is a discrepancy between the .NET and database labels while an enum is read or written,
            an exception will be raised.
            </remarks>
            <param name="clrType">The .NET enum type to be mapped</param>
            <param name="pgName">
            A PostgreSQL type name for the corresponding enum type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            </param>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.UnmapEnum(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Removes an existing enum mapping.
            </summary>
            <param name="clrType">The .NET enum type to be mapped</param>
            <param name="pgName">
            A PostgreSQL type name for the corresponding enum type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            </param>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.MapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Maps a CLR type to a PostgreSQL composite type.
            </summary>
            <remarks>
            CLR fields and properties by string to PostgreSQL names.
            The translation strategy can be controlled by the <paramref name="nameTranslator"/> parameter,
            which defaults to <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.
            You can also use the <see cref="T:NpgsqlTypes.PgNameAttribute"/> on your members to manually specify a PostgreSQL name.
            If there is a discrepancy between the .NET type and database type while a composite is read or written,
            an exception will be raised.
            </remarks>
            <param name="pgName">
            A PostgreSQL type name for the corresponding composite type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            </param>
            <typeparam name="T">The .NET type to be mapped</typeparam>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.UnmapComposite``1(System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Removes an existing composite mapping.
            </summary>
            <param name="pgName">
            A PostgreSQL type name for the corresponding composite type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>
            </param>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.MapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Maps a CLR type to a composite type.
            </summary>
            <remarks>
            Maps CLR fields and properties by string to PostgreSQL names.
            The translation strategy can be controlled by the <paramref name="nameTranslator"/> parameter,
            which defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            If there is a discrepancy between the .NET type and database type while a composite is read or written,
            an exception will be raised.
            </remarks>
            <param name="clrType">The .NET type to be mapped.</param>
            <param name="pgName">
            A PostgreSQL type name for the corresponding composite type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            </param>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.UnmapComposite(System.Type,System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Removes an existing composite mapping.
            </summary>
            <param name="clrType">The .NET type to be unmapped.</param>
            <param name="pgName">
            A PostgreSQL type name for the corresponding composite type in the database.
            If null, the name translator given in <paramref name="nameTranslator"/> will be used.
            </param>
            <param name="nameTranslator">
            A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class).
            Defaults to <see cref="P:Npgsql.TypeMapping.INpgsqlTypeMapper.DefaultNameTranslator" />.
            </param>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.AddTypeInfoResolverFactory(Npgsql.Internal.PgTypeInfoResolverFactory)">
            <summary>
            Adds a type info resolver factory which can add or modify support for PostgreSQL types.
            Typically used by plugins.
            </summary>
            <param name="factory">The type resolver factory to be added.</param>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.ConfigureJsonOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Configures the JSON serializer options used when reading and writing all System.Text.Json data.
            </summary>
            <param name="serializerOptions">Options to customize JSON serialization and deserialization.</param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.EnableDynamicJson(System.Type[],System.Type[])">
            <summary>
            Sets up dynamic System.Text.Json mappings. This allows mapping arbitrary .NET types to PostgreSQL <c>json</c> and <c>jsonb</c>
            types, as well as <see cref="T:System.Text.Json.Nodes.JsonNode" /> and its derived types.
            </summary>
            <param name="jsonbClrTypes">
            A list of CLR types to map to PostgreSQL <c>jsonb</c> (no need to specify <see cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb" />).
            </param>
            <param name="jsonClrTypes">
            A list of CLR types to map to PostgreSQL <c>json</c> (no need to specify <see cref="F:NpgsqlTypes.NpgsqlDbType.Json" />).
            </param>
            <remarks>
            Due to the dynamic nature of these mappings, they are not compatible with NativeAOT or trimming.
            </remarks>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.EnableRecordsAsTuples">
            <summary>
            Sets up mappings for the PostgreSQL <c>record</c> type as a .NET <see cref="T:System.ValueTuple" /> or <see cref="T:System.Tuple" />.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.EnableUnmappedTypes">
            <summary>
            Sets up mappings allowing the use of unmapped enum, range and multirange types.
            </summary>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Npgsql.TypeMapping.INpgsqlTypeMapper.Reset">
            <summary>
            Resets all mapping changes performed on this type mapper and reverts it to its original, starting state.
            </summary>
        </member>
        <member name="T:Npgsql.TypeMapping.UserTypeMapping">
            <summary>
            The base class for user type mappings.
            </summary>
        </member>
        <member name="P:Npgsql.TypeMapping.UserTypeMapping.PgTypeName">
            <summary>
            The name of the PostgreSQL type that this mapping is for.
            </summary>
        </member>
        <member name="P:Npgsql.TypeMapping.UserTypeMapping.ClrType">
            <summary>
            The CLR type that this mapping is for.
            </summary>
        </member>
        <member name="T:Npgsql.Util.NpgsqlTimeout">
            <summary>
            Represents a timeout that will expire at some point.
            </summary>
        </member>
        <member name="T:Npgsql.Util.ResettableCancellationTokenSource">
            <summary>
            A wrapper around <see cref="T:System.Threading.CancellationTokenSource"/> to simplify reset management.
            </summary>
            <remarks>
            Since there's no way to reset a <see cref="T:System.Threading.CancellationTokenSource"/> once it was cancelled,
            we need to make sure that an existing cancellation token source hasn't been cancelled,
            every time we start it (see https://github.com/dotnet/runtime/issues/4694).
            </remarks>
        </member>
        <member name="F:Npgsql.Util.ResettableCancellationTokenSource.lockObject">
            <summary>
            Used, so we wouldn't concurently use the cts for the cancellation, while it's being disposed
            </summary>
        </member>
        <member name="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)">
            <summary>
            Set the timeout on the wrapped <see cref="T:System.Threading.CancellationTokenSource"/>
            and make sure that it hasn't been cancelled yet
            </summary>
            <param name="cancellationToken">
            An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The <see cref="T:System.Threading.CancellationToken"/> from the wrapped <see cref="T:System.Threading.CancellationTokenSource"/></returns>
        </member>
        <member name="M:Npgsql.Util.ResettableCancellationTokenSource.RestartTimeoutWithoutReset">
            <summary>
            Restart the timeout on the wrapped <see cref="T:System.Threading.CancellationTokenSource"/> without reinitializing it,
            even if <see cref="P:Npgsql.Util.ResettableCancellationTokenSource.IsCancellationRequested"/> is already set to <see langword="true"/>
            </summary>
        </member>
        <member name="M:Npgsql.Util.ResettableCancellationTokenSource.Reset">
            <summary>
            Reset the wrapper to contain a unstarted and uncancelled <see cref="T:System.Threading.CancellationTokenSource"/>
            in order make sure the next call to <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)"/> will not invalidate
            the cancellation token.
            </summary>
            <returns>The <see cref="T:System.Threading.CancellationToken"/> from the wrapped <see cref="T:System.Threading.CancellationTokenSource"/></returns>
        </member>
        <member name="M:Npgsql.Util.ResettableCancellationTokenSource.ResetCts">
            <summary>
            Reset the wrapper to contain a unstarted and uncancelled <see cref="T:System.Threading.CancellationTokenSource"/>
            in order make sure the next call to <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)"/> will not invalidate
            the cancellation token.
            </summary>
        </member>
        <member name="M:Npgsql.Util.ResettableCancellationTokenSource.Stop">
            <summary>
            Set the timeout on the wrapped <see cref="T:System.Threading.CancellationTokenSource"/>
            to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>
            </summary>
            <remarks>
            <see cref="P:Npgsql.Util.ResettableCancellationTokenSource.IsCancellationRequested"/> can still arrive at a state
            where it's value is <see langword="true"/> if the <see cref="T:System.Threading.CancellationToken"/>
            passed to <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)"/> gets a cancellation request.
            If this is the case it will be resolved upon the next call to <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)"/>
            or <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Reset"/>. Calling <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Stop"/> multiple times or without calling
            <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)"/> first will do no any harm (besides eating a tiny amount of CPU cycles).
            </remarks>
        </member>
        <member name="M:Npgsql.Util.ResettableCancellationTokenSource.Cancel">
            <summary>
            Cancel the wrapped <see cref="T:System.Threading.CancellationTokenSource"/>
            </summary>
        </member>
        <member name="M:Npgsql.Util.ResettableCancellationTokenSource.CancelAfter(System.Int32)">
            <summary>
            Cancel the wrapped <see cref="T:System.Threading.CancellationTokenSource"/> after delay
            </summary>
        </member>
        <member name="P:Npgsql.Util.ResettableCancellationTokenSource.Token">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> from the wrapped
            <see cref="T:System.Threading.CancellationTokenSource"/> .
            </summary>
            <remarks>
            The token is only valid after calling <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)"/>
            and before calling <see cref="M:Npgsql.Util.ResettableCancellationTokenSource.Start(System.Threading.CancellationToken)"/> the next time.
            Otherwise you may end up with a token that has already been
            cancelled or belongs to a cancellation token source that has
            been disposed.
            </remarks>
        </member>
        <member name="M:Npgsql.Util.VersionExtensions.IsGreaterOrEqual(System.Version,System.Int32,System.Int32)">
            <summary>
            Allocation free helper function to find if version is greater than expected
            </summary>
        </member>
        <member name="T:Npgsql.VolatileResourceManager">
             <summary>
            
             </summary>
             <remarks>
             Note that a connection may be closed before its TransactionScope completes. In this case we close the NpgsqlConnection
             as usual but the connector in a special list in the pool; it will be closed only when the scope completes.
             </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlDbType">
            <summary>
            Represents a PostgreSQL data type that can be written or read to the database.
            Used in places such as <see cref="P:Npgsql.NpgsqlParameter.NpgsqlDbType"/> to unambiguously specify
            how to encode or decode values.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/datatype.html.
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Bigint">
            <summary>
            Corresponds to the PostgreSQL 8-byte "bigint" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-numeric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Double">
            <summary>
            Corresponds to the PostgreSQL 8-byte floating-point "double" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-numeric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Integer">
            <summary>
            Corresponds to the PostgreSQL 4-byte "integer" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-numeric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Numeric">
            <summary>
            Corresponds to the PostgreSQL arbitrary-precision "numeric" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-numeric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Real">
            <summary>
            Corresponds to the PostgreSQL floating-point "real" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-numeric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Smallint">
            <summary>
            Corresponds to the PostgreSQL 2-byte "smallint" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-numeric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Money">
            <summary>
            Corresponds to the PostgreSQL "money" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-money.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Boolean">
            <summary>
            Corresponds to the PostgreSQL "boolean" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-boolean.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Box">
            <summary>
            Corresponds to the PostgreSQL geometric "box" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-geometric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Circle">
            <summary>
            Corresponds to the PostgreSQL geometric "circle" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-geometric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Line">
            <summary>
            Corresponds to the PostgreSQL geometric "line" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-geometric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.LSeg">
            <summary>
            Corresponds to the PostgreSQL geometric "lseg" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-geometric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Path">
            <summary>
            Corresponds to the PostgreSQL geometric "path" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-geometric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Point">
            <summary>
            Corresponds to the PostgreSQL geometric "point" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-geometric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Polygon">
            <summary>
            Corresponds to the PostgreSQL geometric "polygon" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-geometric.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Char">
            <summary>
            Corresponds to the PostgreSQL "char(n)" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-character.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Text">
            <summary>
            Corresponds to the PostgreSQL "text" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-character.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Varchar">
            <summary>
            Corresponds to the PostgreSQL "varchar" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-character.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Name">
            <summary>
            Corresponds to the PostgreSQL internal "name" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-character.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Citext">
            <summary>
            Corresponds to the PostgreSQL "citext" type for the citext module.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/citext.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.InternalChar">
             <summary>
             Corresponds to the PostgreSQL "char" type.
             </summary>
             <remarks>
             This is an internal field and should normally not be used for regular applications.
            
             See https://www.postgresql.org/docs/current/static/datatype-text.html
             </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Bytea">
            <summary>
            Corresponds to the PostgreSQL "bytea" type, holding a raw byte string.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-binary.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Date">
            <summary>
            Corresponds to the PostgreSQL "date" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-datetime.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Time">
            <summary>
            Corresponds to the PostgreSQL "time" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-datetime.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Timestamp">
            <summary>
            Corresponds to the PostgreSQL "timestamp" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-datetime.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TimestampTz">
            <summary>
            Corresponds to the PostgreSQL "timestamp with time zone" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-datetime.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Interval">
            <summary>
            Corresponds to the PostgreSQL "interval" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-datetime.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TimeTz">
            <summary>
            Corresponds to the PostgreSQL "time with time zone" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-datetime.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Abstime">
            <summary>
            Corresponds to the obsolete PostgreSQL "abstime" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-datetime.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Inet">
            <summary>
            Corresponds to the PostgreSQL "inet" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-net-types.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Cidr">
            <summary>
            Corresponds to the PostgreSQL "cidr" type, a field storing an IPv4 or IPv6 network.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-net-types.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.MacAddr">
            <summary>
            Corresponds to the PostgreSQL "macaddr" type, a field storing a 6-byte physical address.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-net-types.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.MacAddr8">
            <summary>
            Corresponds to the PostgreSQL "macaddr8" type, a field storing a 6-byte or 8-byte physical address.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-net-types.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Bit">
            <summary>
            Corresponds to the PostgreSQL "bit" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-bit.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Varbit">
            <summary>
            Corresponds to the PostgreSQL "varbit" type, a field storing a variable-length string of bits.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-boolean.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TsVector">
            <summary>
            Corresponds to the PostgreSQL "tsvector" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-textsearch.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TsQuery">
            <summary>
            Corresponds to the PostgreSQL "tsquery" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-textsearch.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Regconfig">
            <summary>
            Corresponds to the PostgreSQL "regconfig" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-textsearch.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Uuid">
            <summary>
            Corresponds to the PostgreSQL "uuid" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-uuid.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Xml">
            <summary>
            Corresponds to the PostgreSQL "xml" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-xml.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Json">
            <summary>
            Corresponds to the PostgreSQL "json" type, a field storing JSON in text format.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-json.html</remarks>
            <seealso cref="F:NpgsqlTypes.NpgsqlDbType.Jsonb"/>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Jsonb">
            <summary>
            Corresponds to the PostgreSQL "jsonb" type, a field storing JSON in an optimized binary.
            format.
            </summary>
            <remarks>
            Supported since PostgreSQL 9.4.
            See https://www.postgresql.org/docs/current/static/datatype-json.html
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.JsonPath">
            <summary>
            Corresponds to the PostgreSQL "jsonpath" type, a field storing JSON path in text format.
            format.
            </summary>
            <remarks>
            Supported since PostgreSQL 12.
            See https://www.postgresql.org/docs/current/datatype-json.html#DATATYPE-JSONPATH
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Hstore">
            <summary>
            Corresponds to the PostgreSQL "hstore" type, a dictionary of string key-value pairs.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/hstore.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Refcursor">
            <summary>
            Corresponds to the PostgreSQL "refcursor" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Oidvector">
            <summary>
            Corresponds to the PostgreSQL internal "oidvector" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-oid.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Int2Vector">
            <summary>
            Corresponds to the PostgreSQL internal "int2vector" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Oid">
            <summary>
            Corresponds to the PostgreSQL "oid" type.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-oid.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Xid">
            <summary>
            Corresponds to the PostgreSQL "xid" type, an internal transaction identifier.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-oid.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Xid8">
            <summary>
            Corresponds to the PostgreSQL "xid8" type, an internal transaction identifier.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-oid.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Cid">
            <summary>
            Corresponds to the PostgreSQL "cid" type, an internal command identifier.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/datatype-oid.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Regtype">
            <summary>
            Corresponds to the PostgreSQL "regtype" type, a numeric (OID) ID of a type in the pg_type table.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Tid">
            <summary>
            Corresponds to the PostgreSQL "tid" type, a tuple id identifying the physical location of a row within its table.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.PgLsn">
            <summary>
            Corresponds to the PostgreSQL "pg_lsn" type, which can be used to store LSN (Log Sequence Number) data which
            is a pointer to a location in the WAL.
            </summary>
            <remarks>
            See: https://www.postgresql.org/docs/current/datatype-pg-lsn.html and
            https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=7d03a83f4d0736ba869fa6f93973f7623a27038a
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Unknown">
            <summary>
            A special value that can be used to send parameter values to the database without
            specifying their type, allowing the database to cast them to another value based on context.
            The value will be converted to a string and send as text.
            </summary>
            <remarks>
            This value shouldn't ordinarily be used, and makes sense only when sending a data type
            unsupported by Npgsql.
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Geometry">
            <summary>
            The geometry type for PostgreSQL spatial extension PostGIS.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Geography">
            <summary>
            The geography (geodetic) type for PostgreSQL spatial extension PostGIS.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.LTree">
            <summary>
            The PostgreSQL ltree type, each value is a label path "a.label.tree.value", forming a tree in a set.
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/ltree.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.LQuery">
            <summary>
            The PostgreSQL lquery type for PostgreSQL extension ltree
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/ltree.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.LTxtQuery">
            <summary>
            The PostgreSQL ltxtquery type for PostgreSQL extension ltree
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/ltree.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.IntegerRange">
            <summary>
            Corresponds to the PostgreSQL "int4range" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.BigIntRange">
            <summary>
            Corresponds to the PostgreSQL "int8range" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.NumericRange">
            <summary>
            Corresponds to the PostgreSQL "numrange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TimestampRange">
            <summary>
            Corresponds to the PostgreSQL "tsrange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TimestampTzRange">
            <summary>
            Corresponds to the PostgreSQL "tstzrange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.DateRange">
            <summary>
            Corresponds to the PostgreSQL "daterange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.IntegerMultirange">
            <summary>
            Corresponds to the PostgreSQL "int4multirange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.BigIntMultirange">
            <summary>
            Corresponds to the PostgreSQL "int8multirange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.NumericMultirange">
            <summary>
            Corresponds to the PostgreSQL "nummultirange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TimestampMultirange">
            <summary>
            Corresponds to the PostgreSQL "tsmultirange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.TimestampTzMultirange">
            <summary>
            Corresponds to the PostgreSQL "tstzmultirange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.DateMultirange">
            <summary>
            Corresponds to the PostgreSQL "datemultirange" type.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Array">
            <summary>
            Corresponds to the PostgreSQL "array" type, a variable-length multidimensional array of
            another type. This value must be combined with another value from <see cref="T:NpgsqlTypes.NpgsqlDbType"/>
            via a bit OR (e.g. NpgsqlDbType.Array | NpgsqlDbType.Integer)
            </summary>
            <remarks>See https://www.postgresql.org/docs/current/static/arrays.html</remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Range">
            <summary>
            Corresponds to the PostgreSQL "range" type, continuous range of values of specific type.
            This value must be combined with another value from <see cref="T:NpgsqlTypes.NpgsqlDbType"/>
            via a bit OR (e.g. NpgsqlDbType.Range | NpgsqlDbType.Integer)
            </summary>
            <remarks>
            Supported since PostgreSQL 9.2.
            See https://www.postgresql.org/docs/current/static/rangetypes.html
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDbType.Multirange">
            <summary>
            Corresponds to the PostgreSQL "multirange" type, continuous range of values of specific type.
            This value must be combined with another value from <see cref="T:NpgsqlTypes.NpgsqlDbType"/>
            via a bit OR (e.g. NpgsqlDbType.Multirange | NpgsqlDbType.Integer)
            </summary>
            <remarks>
            Supported since PostgreSQL 14.
            See https://www.postgresql.org/docs/current/static/rangetypes.html
            </remarks>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlDbTypeExtensions.ToUnqualifiedDataTypeName(NpgsqlTypes.NpgsqlDbType)">
            Can return null when a custom range type is used.
        </member>
        <member name="M:NpgsqlTypes.NpgsqlDbTypeExtensions.ToDataTypeName(NpgsqlTypes.NpgsqlDbType)">
            Can return null when a plugin type or custom range type is used.
        </member>
        <member name="M:NpgsqlTypes.NpgsqlDbTypeExtensions.ToNpgsqlDbType(System.String)">
            Should not be used with display names, first normalize it instead.
        </member>
        <member name="T:NpgsqlTypes.NpgsqlInterval">
            <summary>
            A raw representation of the PostgreSQL interval datatype. Use only when <see cref="T:System.TimeSpan" /> or NodaTime
            <a href="https://nodatime.org/3.0.x/api/NodaTime.Period.html">Period</a> do not have sufficient range to handle your values.
            </summary>
            <remarks>
            <p>
            See https://www.postgresql.org/docs/current/static/datatype-geometric.html.
            </p>
            <p>
            Do not use this type unless you have to: prefer <see cref="T:System.TimeSpan" /> or NodaTime
            <a href="https://nodatime.org/3.0.x/api/NodaTime.Period.html">Period</a> when possible.
            </p>
            </remarks>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Constructs an <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Months">
            <summary>
            Months and years, after time for alignment.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Days">
            <summary>
            Days, after time for alignment.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Time">
            <summary>
            Remaining time unit smaller than a day, in microseconds.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Equals(NpgsqlTypes.NpgsqlInterval)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NpgsqlTypes.NpgsqlLogSequenceNumber">
             <summary>
             Wraps a PostgreSQL Write-Ahead Log Sequence Number (see: https://www.postgresql.org/docs/current/datatype-pg-lsn.html)
             </summary>
             <remarks>
             Log Sequence Numbers are a fundamental concept of the PostgreSQL Write-Ahead Log and by that of
             PostgreSQL replication. See https://www.postgresql.org/docs/current/wal-internals.html for what they represent.
            
             This struct provides conversions from/to <see cref="T:System.String"/> and <see cref="T:System.UInt64"/> and beyond that tries to port
             the methods and operators in https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/adt/pg_lsn.c
             but nothing more.
             </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlLogSequenceNumber.Invalid">
            <summary>
            Zero is used indicate an invalid Log Sequence Number. No XLOG record can begin at zero.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/>.
            </summary>
            <param name="value">The value to wrap.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.Equals(NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/>
            instance.
            </summary>
            <param name="other">A <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance to compare to this instance.</param>
            <returns><see langword="true" /> if the current instance is equal to the value parameter;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.CompareTo(NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Compares this instance to a specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance to compare to this instance.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare to this instance</param>
            <returns><see langword="true" /> if the current instance is equal to the value parameter;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, consisting of two hexadecimal numbers of
            up to 8 digits each, separated by a slash</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.Parse(System.String)">
            <summary>
            Converts the string representation of a Log Sequence Number to a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            </summary>
            <param name="s">A string that represents the Log Sequence Number to convert.</param>
            <returns>
            A <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> equivalent to the Log Sequence Number specified in <paramref name="s" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.OverflowException">
            The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue"/> or greater than
            <see cref="F:System.UInt64.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the right format.</exception>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts the span representation of a Log Sequence Number to a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            </summary>
            <param name="s">A span containing the characters that represent the Log Sequence Number to convert.</param>
            <returns>
            A <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> equivalent to the Log Sequence Number specified in <paramref name="s" />.
            </returns>
            <exception cref="T:System.OverflowException">
            The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue"/> or greater than
            <see cref="F:System.UInt64.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the right format.</exception>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.TryParse(System.String,NpgsqlTypes.NpgsqlLogSequenceNumber@)">
            <summary>
            Tries to convert the string representation of a Log Sequence Number to an <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/>
            instance. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string that represents the Log Sequence Number to convert.</param>
            <param name="result">
            When this method returns, contains a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance equivalent to the Log Sequence
            Number contained in <paramref name="s"/>, if the conversion succeeded, or the default value for
            <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> (<c>0</c>) if the conversion failed. The conversion fails if the <paramref name="s" />
            parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not in the right format, or represents a number
            less than <see cref="F:System.UInt64.MinValue"/> or greater than <see cref="F:System.UInt64.MaxValue"/>. This parameter is
            passed uninitialized; any value originally supplied in result will be overwritten.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="s"/>c> was converted successfully; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.TryParse(System.ReadOnlySpan{System.Char},NpgsqlTypes.NpgsqlLogSequenceNumber@)">
            <summary>
            Tries to convert the span representation of a Log Sequence Number to an <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/>
            instance. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A span containing the characters that represent the Log Sequence Number to convert.</param>
            <param name="result">
            When this method returns, contains a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance equivalent to the Log Sequence
            Number contained in <paramref name="s"/>, if the conversion succeeded, or the default value for
            <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> (<c>0</c>) if the conversion failed. The conversion fails if the <paramref name="s" />
            parameter is empty, is not in the right format, or represents a number less than
            <see cref="F:System.UInt64.MinValue"/> or greater than <see cref="F:System.UInt64.MaxValue"/>. This parameter is passed
            uninitialized; any value originally supplied in result will be overwritten.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="s"/> was converted successfully; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_Explicit(System.UInt64)~NpgsqlTypes.NpgsqlLogSequenceNumber">
            <summary>
            Converts the value of a 64-bit unsigned integer to a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>A new instance of <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> initialized to <paramref name="value" />.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_Explicit(NpgsqlTypes.NpgsqlLogSequenceNumber)~System.UInt64">
            <summary>
            Converts the value of a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance to a 64-bit unsigned integer value.
            </summary>
            <param name="value">A <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance</param>
            <returns>The contents of <paramref name="value" /> as 64-bit unsigned integer.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_Equality(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns a value that indicates whether two specified instances of <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> are equal.
            </summary>
            <param name="value1">The first Log Sequence Number to compare.</param>
            <param name="value2">The second Log Sequence Number to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_Inequality(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns a value that indicates whether two specified instances of <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> are not
            equal.
            </summary>
            <param name="value1">The first Log Sequence Number to compare.</param>
            <param name="value2">The second Log Sequence Number to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_GreaterThan(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance is greater than
            another specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="value1" /> is greater than <paramref name="value2" />; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_LessThan(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance is less than
            another specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="value1" /> is less than <paramref name="value2" />; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_GreaterThanOrEqual(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance is greater than or
            equal to another specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.Larger(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns the larger of two <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
            The larger of the two <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> values.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.Smaller(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns the smaller of two <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
            The smaller of the two <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> values.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_LessThanOrEqual(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance is less than or
            equal to another specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="value1" /> is less than or equal to <paramref name="value2" />;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_Subtraction(NpgsqlTypes.NpgsqlLogSequenceNumber,NpgsqlTypes.NpgsqlLogSequenceNumber)">
            <summary>
            Subtracts two specified <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> values.
            </summary>
            <param name="first">The first <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> value.</param>
            <param name="second">The second <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> value.</param>
            <returns>The number of bytes separating those write-ahead log locations.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_Subtraction(NpgsqlTypes.NpgsqlLogSequenceNumber,System.Double)">
            <summary>
            Subtract the number of bytes from a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance, giving a new
            <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            Handles both positive and negative numbers of bytes.
            </summary>
            <param name="lsn">
            The <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance representing a write-ahead log location.
            </param>
            <param name="nbytes">The number of bytes to subtract.</param>
            <returns>A new <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.</returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance would represent a number less than
            <see cref="F:System.UInt64.MinValue"/>.
            </exception>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlLogSequenceNumber.op_Addition(NpgsqlTypes.NpgsqlLogSequenceNumber,System.Double)">
            <summary>
            Add the number of bytes to a <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance, giving a new
            <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.
            Handles both positive and negative numbers of bytes.
            </summary>
            <param name="lsn">
            The <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance representing a write-ahead log location.
            </param>
            <param name="nbytes">The number of bytes to add.</param>
            <returns>A new <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance.</returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NpgsqlTypes.NpgsqlLogSequenceNumber"/> instance would represent a number greater than
            <see cref="F:System.UInt64.MaxValue"/>.
            </exception>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlRange`1">
            <summary>
            Represents a PostgreSQL range type.
            </summary>
            <typeparam name="T">The element type of the values in the range.</typeparam>
            <remarks>
            See: https://www.postgresql.org/docs/current/static/rangetypes.html
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.EmptyLiteral">
            <summary>
            Defined by PostgreSQL to represent an empty range.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.LowerInfinityLiteral">
            <summary>
            Defined by PostgreSQL to represent an infinite lower bound.
            Some element types may have specific handling for this value distinct from a missing or null value.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.UpperInfinityLiteral">
            <summary>
            Defined by PostgreSQL to represent an infinite upper bound.
            Some element types may have specific handling for this value distinct from a missing or null value.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.NullLiteral">
            <summary>
            Defined by PostgreSQL to represent an null bound.
            Some element types may have specific handling for this value distinct from an infinite or missing value.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.LowerInclusiveBound">
            <summary>
            Defined by PostgreSQL to represent a lower inclusive bound.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.LowerExclusiveBound">
            <summary>
            Defined by PostgreSQL to represent a lower exclusive bound.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.UpperInclusiveBound">
            <summary>
            Defined by PostgreSQL to represent an upper inclusive bound.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.UpperExclusiveBound">
            <summary>
            Defined by PostgreSQL to represent an upper exclusive bound.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.BoundSeparator">
            <summary>
            Defined by PostgreSQL to separate the values for the upper and lower bounds.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.BoundConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> used by <see cref="M:NpgsqlTypes.NpgsqlRange`1.Parse(System.String)"/> to convert <see cref="T:System.String"/> bounds into <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.HasEquatableBounds">
            <summary>
            True if <typeparamref name="T"/> implements <see cref="T:System.IEquatable`1"/>; otherwise, false.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.Empty">
            <summary>
            Represents the empty range. This field is read-only.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlRange`1.LowerBound">
            <summary>
            The lower bound of the range. Only valid when <see cref="P:NpgsqlTypes.NpgsqlRange`1.LowerBoundInfinite"/> is false.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlRange`1.UpperBound">
            <summary>
            The upper bound of the range. Only valid when <see cref="P:NpgsqlTypes.NpgsqlRange`1.UpperBoundInfinite"/> is false.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlRange`1.Flags">
            <summary>
            The characteristics of the boundaries.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlRange`1.LowerBoundIsInclusive">
            <summary>
            True if the lower bound is part of the range (i.e. inclusive); otherwise, false.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlRange`1.UpperBoundIsInclusive">
            <summary>
            True if the upper bound is part of the range (i.e. inclusive); otherwise, false.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlRange`1.LowerBoundInfinite">
            <summary>
            True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlRange`1.UpperBoundInfinite">
            <summary>
            True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlRange`1.IsEmpty">
            <summary>
            True if the range is empty; otherwise, false.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.#ctor(`0,`0)">
            <summary>
            Constructs an <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> with inclusive and definite bounds.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.#ctor(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            Constructs an <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> with definite bounds.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="lowerBoundIsInclusive">True if the lower bound is is part of the range (i.e. inclusive); otherwise, false.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <param name="upperBoundIsInclusive">True if the upper bound is part of the range (i.e. inclusive); otherwise, false.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.#ctor(`0,System.Boolean,System.Boolean,`0,System.Boolean,System.Boolean)">
            <summary>
            Constructs an <see cref="T:NpgsqlTypes.NpgsqlRange`1"/>.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="lowerBoundIsInclusive">True if the lower bound is is part of the range (i.e. inclusive); otherwise, false.</param>
            <param name="lowerBoundInfinite">True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <param name="upperBoundIsInclusive">True if the upper bound is part of the range (i.e. inclusive); otherwise, false.</param>
            <param name="upperBoundInfinite">True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.#ctor(`0,`0,NpgsqlTypes.RangeFlags)">
            <summary>
            Constructs an <see cref="T:NpgsqlTypes.NpgsqlRange`1"/>.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <param name="flags">The characteristics of the range boundaries.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.IsEmptyRange(`0,`0,NpgsqlTypes.RangeFlags)">
            <summary>
            Attempts to determine if the range is malformed or implicitly empty.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <param name="flags">The characteristics of the range boundaries.</param>
            <returns>
            True if the range is implicitly empty; otherwise, false.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.EvaluateBoundaryFlags(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boundary flags.
            </summary>
            <param name="lowerBoundIsInclusive">True if the lower bound is is part of the range (i.e. inclusive); otherwise, false.</param>
            <param name="lowerBoundInfinite">True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false.</param>
            <param name="upperBoundIsInclusive">True if the upper bound is part of the range (i.e. inclusive); otherwise, false.</param>
            <param name="upperBoundInfinite">True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false.</param>
            <returns>
            The boundary characteristics.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.op_Equality(NpgsqlTypes.NpgsqlRange{`0},NpgsqlTypes.NpgsqlRange{`0})">
            <summary>
            Indicates whether the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the left is equal to the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the right.
            </summary>
            <param name="x">The <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the left.</param>
            <param name="y">The <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the right.</param>
            <returns>
            True if the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the left is equal to the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the right; otherwise, false.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.op_Inequality(NpgsqlTypes.NpgsqlRange{`0},NpgsqlTypes.NpgsqlRange{`0})">
            <summary>
            Indicates whether the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the left is not equal to the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the right.
            </summary>
            <param name="x">The <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the left.</param>
            <param name="y">The <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the right.</param>
            <returns>
            True if the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the left is not equal to the <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> on the right; otherwise, false.
            </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.Equals(NpgsqlTypes.NpgsqlRange{`0})">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.Parse(System.String)">
            <summary>
            Parses the well-known text representation of a PostgreSQL range type into a <see cref="T:NpgsqlTypes.NpgsqlRange`1"/>.
            </summary>
            <param name="value">A PosgreSQL range type in a well-known text format.</param>
            <returns>
            The <see cref="T:NpgsqlTypes.NpgsqlRange`1"/> represented by the <paramref name="value"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Malformed range literal.
            </exception>
            <exception cref="T:System.FormatException">
            Malformed range literal. Missing left parenthesis or bracket.
            </exception>
            <exception cref="T:System.FormatException">
            Malformed range literal. Missing right parenthesis or bracket.
            </exception>
            <exception cref="T:System.FormatException">
            Malformed range literal. Missing comma after lower bound.
            </exception>
            <remarks>
            See: https://www.postgresql.org/docs/current/static/rangetypes.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlRange`1.RangeTypeConverter">
            <summary>
            Represents a type converter for <see cref="T:NpgsqlTypes.NpgsqlRange`1" />.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.RangeTypeConverter.Register">
            <summary>
            Adds a <see cref="T:System.ComponentModel.TypeConverterAttribute"/> to the closed form <see cref="T:NpgsqlTypes.NpgsqlRange`1"/>.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.RangeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.RangeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.RangeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlRange`1.RangeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:NpgsqlTypes.RangeFlags">
            <summary>
            Represents characteristics of range type boundaries.
            </summary>
            <remarks>
            See: https://www.postgresql.org/docs/current/static/rangetypes.html
            </remarks>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.None">
            <summary>
            The default flag. The range is not empty and has boundaries that are definite and exclusive.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.Empty">
            <summary>
            The range is empty. E.g. '(0,0)', 'empty'.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.LowerBoundInclusive">
            <summary>
            The lower bound is inclusive. E.g. '[0,5]', '[0,5)', '[0,)'.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.UpperBoundInclusive">
            <summary>
            The upper bound is inclusive. E.g. '[0,5]', '(0,5]', '(,5]'.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.LowerBoundInfinite">
            <summary>
            The lower bound is infinite or indefinite. E.g. '(null,5]', '(-infinity,5]', '(,5]'.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.UpperBoundInfinite">
            <summary>
            The upper bound is infinite or indefinite. E.g. '[0,null)', '[0,infinity)', '[0,)'.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.Inclusive">
            <summary>
            Both the lower and upper bounds are inclusive.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.Infinite">
            <summary>
            Both the lower and upper bounds are indefinite.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.LowerInclusiveInfinite">
            <summary>
            The lower bound is both inclusive and indefinite. This represents an error condition.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.RangeFlags.UpperInclusiveInfinite">
            <summary>
            The upper bound is both inclusive and indefinite. This represents an error condition.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQuery">
            <summary>
            Represents a PostgreSQL tsquery. This is the base class for the
            lexeme, not, or, and, and "followed by" nodes.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQuery.Kind">
            <summary>
            Node kind
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQuery.NodeKind">
            <summary>
            NodeKind
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQuery.NodeKind.Empty">
            <summary>
            Represents the empty tsquery. Should only be used at top level.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQuery.NodeKind.Lexeme">
            <summary>
            Lexeme
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQuery.NodeKind.Not">
            <summary>
            Not operator
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQuery.NodeKind.And">
            <summary>
            And operator
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQuery.NodeKind.Or">
            <summary>
            Or operator
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQuery.NodeKind.Phrase">
            <summary>
            "Followed by" operator
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.#ctor(NpgsqlTypes.NpgsqlTsQuery.NodeKind)">
            <summary>
            Constructs an <see cref="T:NpgsqlTypes.NpgsqlTsQuery"/>.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.Write(System.Text.StringBuilder)">
            <summary>
            Writes the tsquery in PostgreSQL's text format.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.ToString">
            <summary>
            Writes the tsquery in PostgreSQL's text format.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.Parse(System.String)">
            <summary>
            Parses a tsquery in PostgreSQL's text format.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.Equals(NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:NpgsqlTypes.NpgsqlTsQuery"/> object represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns><see langword="true"/> if g is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.op_Equality(NpgsqlTypes.NpgsqlTsQuery,NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Indicates whether the values of two specified <see cref="T:NpgsqlTypes.NpgsqlTsQuery"/> objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQuery.op_Inequality(NpgsqlTypes.NpgsqlTsQuery,NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Indicates whether the values of two specified <see cref="T:NpgsqlTypes.NpgsqlTsQuery"/> objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryLexeme">
            <summary>
            TsQuery Lexeme node.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQueryLexeme.Text">
            <summary>
            Lexeme text.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQueryLexeme.Weights">
            <summary>
            Weights is a bitmask of the Weight enum.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQueryLexeme.IsPrefixSearch">
            <summary>
            Prefix search.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryLexeme.#ctor(System.String)">
            <summary>
            Creates a tsquery lexeme with only lexeme text.
            </summary>
            <param name="text">Lexeme text.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryLexeme.#ctor(System.String,NpgsqlTypes.NpgsqlTsQueryLexeme.Weight)">
            <summary>
            Creates a tsquery lexeme with lexeme text and weights.
            </summary>
            <param name="text">Lexeme text.</param>
            <param name="weights">Bitmask of enum Weight.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryLexeme.#ctor(System.String,NpgsqlTypes.NpgsqlTsQueryLexeme.Weight,System.Boolean)">
            <summary>
            Creates a tsquery lexeme with lexeme text, weights and prefix search flag.
            </summary>
            <param name="text">Lexeme text.</param>
            <param name="weights">Bitmask of enum Weight.</param>
            <param name="isPrefixSearch">Is prefix search?</param>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryLexeme.Weight">
            <summary>
            Weight enum, can be OR'ed together.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.D">
            <summary>
            D
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.A">
            <summary>
            A
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryLexeme.Equals(NpgsqlTypes.NpgsqlTsQuery)">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryLexeme.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryNot">
            <summary>
            TsQuery Not node.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQueryNot.Child">
            <summary>
            Child node
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryNot.#ctor(NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Creates a not operator, with a given child node.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryNot.Equals(NpgsqlTypes.NpgsqlTsQuery)">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryNot.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryBinOp">
            <summary>
            Base class for TsQuery binary operators (&amp; and |).
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQueryBinOp.Left">
            <summary>
            Left child
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQueryBinOp.Right">
            <summary>
            Right child
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryBinOp.#ctor(NpgsqlTypes.NpgsqlTsQuery.NodeKind,NpgsqlTypes.NpgsqlTsQuery,NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Constructs a <see cref="T:NpgsqlTypes.NpgsqlTsQueryBinOp"/>.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryAnd">
            <summary>
            TsQuery And node.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryAnd.#ctor(NpgsqlTypes.NpgsqlTsQuery,NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Creates an and operator, with two given child nodes.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryAnd.Equals(NpgsqlTypes.NpgsqlTsQuery)">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryAnd.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryOr">
            <summary>
            TsQuery Or Node.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryOr.#ctor(NpgsqlTypes.NpgsqlTsQuery,NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Creates an or operator, with two given child nodes.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryOr.Equals(NpgsqlTypes.NpgsqlTsQuery)">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryOr.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryFollowedBy">
            <summary>
            TsQuery "Followed by" Node.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsQueryFollowedBy.Distance">
            <summary>
            The distance between the 2 nodes, in lexemes.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryFollowedBy.#ctor(NpgsqlTypes.NpgsqlTsQuery,System.Int16,NpgsqlTypes.NpgsqlTsQuery)">
            <summary>
            Creates a "followed by" operator, specifying 2 child nodes and the
            distance between them in lexemes.
            </summary>
            <param name="left"></param>
            <param name="distance"></param>
            <param name="right"></param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryFollowedBy.Equals(NpgsqlTypes.NpgsqlTsQuery)">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryFollowedBy.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsQueryEmpty">
            <summary>
            Represents an empty tsquery. Shold only be used as top node.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryEmpty.#ctor">
            <summary>
            Creates a tsquery that represents an empty query. Should not be used as child node.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryEmpty.Equals(NpgsqlTypes.NpgsqlTsQuery)">
            <inheritdoc/>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsQueryEmpty.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsVector">
            <summary>
            Represents a PostgreSQL tsvector.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Parse(System.String)">
            <summary>
            Parses a tsvector in PostgreSQL's text format.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsVector.Item(System.Int32)">
            <summary>
            Returns the lexeme at a specific index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsVector.Count">
            <summary>
            Gets the number of lexemes.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.ToString">
            <summary>
            Gets a string representation in PostgreSQL's format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Equals(NpgsqlTypes.NpgsqlTsVector)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsVector.Lexeme">
            <summary>
            Represents a lexeme. A lexeme consists of a text string and optional word entry positions.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsVector.Lexeme.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.#ctor(System.String)">
            <summary>
            Creates a lexeme with no word entry positions.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.#ctor(System.String,System.Collections.Generic.List{NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos})">
            <summary>
            Creates a lexeme with word entry positions.
            </summary>
            <param name="text"></param>
            <param name="wordEntryPositions"></param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsVector.Lexeme.Item(System.Int32)">
            <summary>
            Gets a word entry position.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsVector.Lexeme.Count">
            <summary>
            Gets the number of word entry positions.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.ToString">
            <summary>
            Creates a string representation in PostgreSQL's format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos">
            <summary>
            Represents a word entry position and an optional weight.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.#ctor(System.Int32,NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight)">
            <summary>
            Creates a WordEntryPos with a given position and weight.
            </summary>
            <param name="pos">Position values can range from 1 to 16383; larger numbers are silently set to 16383.</param>
            <param name="weight">A weight labeled between A and D.</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Weight">
            <summary>
            The weight is labeled from A to D. D is the default, and not printed.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Pos">
            <summary>
            The position is a 14-bit unsigned integer indicating the position in the text this lexeme occurs. Cannot be 0.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.ToString">
            <summary>
            Prints this lexeme in PostgreSQL's format, i.e. position is followed by weight (weight is only printed if A, B or C).
            </summary>
            <returns></returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Equals(NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.op_Equality(NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos,NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.op_Inequality(NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos,NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos)">
            <summary>
            Determines whether the specified object is unequal to the current object.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight">
            <summary>
            The weight is labeled from A to D. D is the default, and not printed.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.D">
            <summary>
            D, the default
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.A">
            <summary>
            A
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.Equals(NpgsqlTypes.NpgsqlTsVector.Lexeme)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.op_Equality(NpgsqlTypes.NpgsqlTsVector.Lexeme,NpgsqlTypes.NpgsqlTsVector.Lexeme)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTsVector.Lexeme.op_Inequality(NpgsqlTypes.NpgsqlTsVector.Lexeme,NpgsqlTypes.NpgsqlTsVector.Lexeme)">
            <summary>
            Determines whether the specified object is unequal to the current object.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPoint">
            <summary>
            Represents a PostgreSQL point type.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlLine">
            <summary>
            Represents a PostgreSQL line type.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlLSeg">
            <summary>
            Represents a PostgreSQL Line Segment type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlBox">
            <summary>
            Represents a PostgreSQL box type.
            </summary>
            <remarks>
            See https://www.postgresql.org/docs/current/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPath">
            <summary>
            Represents a PostgreSQL Path type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPolygon">
            <summary>
            Represents a PostgreSQL Polygon type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlCircle">
            <summary>
            Represents a PostgreSQL Circle type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlInet">
            <summary>
            Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask.
            </summary>
            <remarks>
            https://www.postgresql.org/docs/current/static/datatype-net-types.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlCidr">
            <summary>
            Represents a PostgreSQL cidr type.
            </summary>
            <remarks>
            https://www.postgresql.org/docs/current/static/datatype-net-types.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTid">
            <summary>
            Represents a PostgreSQL tid value
            </summary>
            <remarks>
            https://www.postgresql.org/docs/current/static/datatype-oid.html
            </remarks>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTid.BlockNumber">
            <summary>
            Block number
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTid.OffsetNumber">
            <summary>
            Tuple index within block
            </summary>
        </member>
        <member name="T:NpgsqlTypes.PgNameAttribute">
            <summary>
            Indicates that this property or field corresponds to a PostgreSQL field with the specified name
            </summary>
        </member>
        <member name="P:NpgsqlTypes.PgNameAttribute.PgName">
            <summary>
            The name of PostgreSQL field that corresponds to this CLR property or field
            </summary>
        </member>
        <member name="M:NpgsqlTypes.PgNameAttribute.#ctor(System.String)">
            <summary>
            Indicates that this property or field corresponds to a PostgreSQL field with the specified name
            </summary>
            <param name="pgName">The name of PostgreSQL field that corresponds to this CLR property or field</param>
        </member>
        <member name="T:__LoggerMessageGenerator">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
    </members>
</doc>
